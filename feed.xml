<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kaiser-yang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kaiser-yang.github.io/" rel="alternate" type="text/html" hreflang="zh"/><updated>2025-10-30T09:15:05+00:00</updated><id>https://kaiser-yang.github.io/feed.xml</id><title type="html">Kaiser’s Homepage</title><subtitle>Sharing everything I know. </subtitle><entry><title type="html">鞋带公式</title><link href="https://kaiser-yang.github.io/blog/2025/shoelace-formula/" rel="alternate" type="text/html" title="鞋带公式"/><published>2025-10-30T08:51:37+00:00</published><updated>2025-10-30T08:51:37+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/shoelace-formula</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/shoelace-formula/"><![CDATA[<p>简单多边形：如果一个多边形的任意两条边都不相交，则称该多边形为简单多边形。</p> <p>鞋带公式是用来求一个简单多边形面积的公式。</p> <p>鞋带公式要求按照顺时针或逆时针的顺序给出多边形的顶点坐标。</p> <p>这里我们定义 \(x_i, y_i\) 分别表示一个简单 \(n\) 边形的第 \(i\) 个顶点的横坐标和纵坐标， 这里选择下标从 \(0\) 开始编号。特别地，我们定义 \(x_n = x_0\)，\(y_n = y_0\)。</p> <p>鞋带公式的表达式为：</p> \[\text{Area} = \frac{1}{2} \left| \sum_{i=0}^{n-1} (x_i y_{i+1} - x_{i+1} y_i) \right|\] <h2 id="原理">原理</h2> <p>鞋带公式实际是通过计算多个梯形的代数面积来求解多边形的面积。 具体地，我们可以将多边形划分为多个梯形， 每个梯形的顶点分别是多边形的两个相邻顶点和 x 轴上的两个投影点。 通过计算每个梯形的面积并累加起来，我们可以得到整个多边形的面积。</p> <p>而上述的过程可以写成如下的方程:</p> \[\text{Area} = \frac{1}{2} \sum_{i=0}^{n-1} (y_i + y_{i+1}) (x_{i+1} - x_i)\] <p>整理后就可以得到最开始给出的鞋带公式。</p> <h2 id="实现">实现</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">R</span> <span class="o">=</span> <span class="n">T</span><span class="p">&gt;</span>
<span class="n">R</span> <span class="nf">polygon_area</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">points</span><span class="p">,</span> <span class="n">R</span> <span class="n">_</span> <span class="o">=</span> <span class="n">R</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">R</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">area</span> <span class="o">+=</span> <span class="p">(</span><span class="n">R</span><span class="p">)</span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">points</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="n">area</span> <span class="o">-=</span> <span class="p">(</span><span class="n">R</span><span class="p">)</span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">points</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">area</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Shoelace Formula"/><summary type="html"><![CDATA[本文介绍鞋带公式的原理及其实现方式。]]></summary></entry><entry><title type="html">背包问题</title><link href="https://kaiser-yang.github.io/blog/2025/knapsack-problem/" rel="alternate" type="text/html" title="背包问题"/><published>2025-10-24T10:39:56+00:00</published><updated>2025-10-24T10:39:56+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/knapsack-problem</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/knapsack-problem/"><![CDATA[<p>多重背包问题可以通过如下的转移方程来解决：</p> \[dp_{i,j} = \max(dp_{i-1,j-k \cdot w_i} + k \cdot v_i) \quad (0 \leq k \leq c_i \text{且} j - k \cdot w_i \geq 0)\] <p>其中，\(dp_{i,j}\) 表示前 \(i\) 种物品放入容量为 \(j\) 的背包所能获得的最大价值， \(w_i\) 和 \(v_i\) 分别表示第 \(i\) 种物品的重量和价值，\(c_i\) 表示第 \(i\) 种物品的数量。</p> <p>通过上面的方法进行转移时，时间复杂度为 \(O(N \cdot M \cdot C)\)， 其中 \(N\) 是物品种类数，\(M\) 是背包容量，\(C\) 是物品数量的最大值。 当 \(C\) 较大时，时间复杂度会变得非常高，这里介绍两种优化方法来降低时间复杂度。</p> <h2 id="二进制优化">二进制优化</h2> <p>对于第 \(i\) 件物品我们将其拆分成 \(1, 2, 4, \ldots, 2^k\) 件，使得 \(1 + 2 + 4 + \ldots + 2^k \leq c_i\)， 再加上剩余的 \(x := c_i - (1 + 2 + 4 + \ldots + 2^k)\) 件，其中的 \(k\) 满足 \(2^{k+1} &gt; c_i\)。</p> <p>经过上述的拆分后，我们可以将多重背包问题转化为 0-1 背包问题，从而将时间复杂度降低到 \(O(N \cdot M \cdot \log C)\)。</p> <p>转换的依据是 \(1, 2, 4, \ldots, 2^k\) 件物品可以组成 \(0, 1, 2, \ldots, 2^{k+1} - 1\) 件物品， 而加上剩余的 \(x\) 件物品后，可以组成 \(0, 1, 2, \ldots, 2^{k+1} - 1 + x = c_i\) 件物品。</p> <p>综上所述，这里使用 0-1 背包的方式进行转移依然可以覆盖所有的情况。这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">weight</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">weight</span><span class="p">;</span> <span class="o">--</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">weight</span><span class="p">]</span> <span class="o">+</span> <span class="n">value</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">count</span> <span class="o">-=</span> <span class="n">num</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="单调栈优化">单调栈优化</h2> <p>我们回到最开始的转移方程：</p> \[dp_{i,j} = \max(dp_{i-1,j-k \cdot w_i} + k \cdot v_i) \quad (0 \leq k \leq c_i \text{且} j - k \cdot w_i \geq 0)\] <p>在上面的方程中我们可以发现 \(dp_{i, j}\) 只依赖于 \(dp_{i-1, j-k \cdot w_i}\)， 因此我们可以以 \(w_i\) 为步长将 \(j\) 分成若干组， 即 \(j \equiv r \text{mod} w_i\)，其中 \(0 \leq r &lt; w_i\)。</p> <p>对于每一组，我们可以将其转移方程改写为：</p> \[dp_{i, r + k \cdot w_i} = \max(dp_{i-1, r + k' \cdot w_i} + (k - k') \cdot v_i) \quad (0 \leq k - k' \leq c_i)\] <p>整理一下可以得到：</p> \[dp_{i, r + k \cdot w_i} = \max(dp_{i-1, r + k' \cdot w_i} - k' \cdot v_i) + k \cdot v_i \quad (0 \leq k - k' \leq c_i)\] <p>不难发现上面的 \(\max(dp_{i-1, r + k' \cdot w_i} - k' \cdot v_i)\) 可以通过单调队列来进行优化， 从而将时间复杂度降低到 \(O(N \cdot M)\)。</p> <p>这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ndp</span><span class="p">(</span><span class="n">M</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="o">++</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">,</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="n">val</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">k</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">-</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span> <span class="n">q</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span> <span class="p">}</span>
            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">-</span> <span class="n">q</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span> <span class="n">q</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span> <span class="p">}</span>
            <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
            <span class="n">ndp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+</span> <span class="p">(</span><span class="n">k</span> <span class="o">-</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">())</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">ndp</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Knapsack Problem"/><summary type="html"><![CDATA[本文介绍多种背包问题的两种优化方法。]]></summary></entry><entry><title type="html">中国剩余定理及其扩展</title><link href="https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem/" rel="alternate" type="text/html" title="中国剩余定理及其扩展"/><published>2025-10-16T07:22:05+00:00</published><updated>2025-10-16T07:22:05+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem/"><![CDATA[<h2 id="中国剩余定理">中国剩余定理</h2> <p>假如给定一组同余方程：</p> \[\begin{cases} x \equiv a_1 \text{mod} m_1 \\ x \equiv a_2 \text{mod} m_2 \\ \vdots \\ x \equiv a_k \text{mod} m_k \end{cases}\] <p>其中 \(m_1, m_2, \ldots, m_k\) 两两互质，下面介绍如何求解该组方程。</p> <p>我们令 \(M = m_1 \cdot m_2 \cdots m_k\)，并且对于每个 \(i\)，定义 \(M_i = \frac{M}{m_i}\)。 由于 \(m_i\) 和 \(M_i\) 互质，可以知道 \(M_i\) 在模 \(m_i\) 意义下是有逆元的， 记为 \(M_i^{-1}\)。不难发现 \(M_i \cdot M_i^{-1} \equiv 1 \text{mod} m_i\) 和 \(M_i \cdot M_i^{-1} \equiv 0 \text{mod} m_j\)（\(j \neq i\)）都成立。 记 \(c_i = a_i \cdot M_i \cdot M_i^{-1}\)，则有：</p> \[\begin{cases} c_i \equiv a_i \text{mod} m_i \\ n_i \equiv 0 \text{mod} m_j \quad (j \neq i) \end{cases}\] <p>由同余的线性性质可知，\(x' = \sum_{i=1}^{k} c_i\) 即为一个特解。</p> <p>不难证明通解可以写成 \(x = x' + t \cdot M \quad (t \in \mathbb{Z})\)。</p> <p>注意在上述的过程中，我们要求解 \(M_i\) 在模 \(m_i\) 意义下的逆元， 只有在 \(m_i\) 两两互质的情况下才能保证每次求解的逆元存在。</p> <p>代码如下：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">crt</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">m</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">e</span> <span class="o">:</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span> <span class="n">l</span> <span class="o">*=</span> <span class="n">e</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="n">l</span> <span class="o">*</span> <span class="n">inverse_of</span><span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="n">l</span><span class="p">)</span> <span class="o">%</span> <span class="n">l</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="扩展中国剩余定理">扩展中国剩余定理</h2> <p>扩展中国剩余定理是在中国剩余定理的基础上，放宽了对模数的互质要求。 假设给定一组同余方程：</p> \[\begin{cases} x \equiv a_1 \text{mod} m_1 \\ x \equiv a_2 \text{mod} m_2 \\ \vdots \\ x \equiv a_k \text{mod} m_k \end{cases}\] <p>并不保证 \(m_1, m_2, \ldots, m_k\) 两两互质，下面介绍如何求解该组方程。</p> <p>不难发现，\(x = x' + t \cdot M \quad (t \in \mathbb{Z})\) 是同余方程 \(x \equiv x' \text{mod}{M}\) 的解。</p> <p>假设我们已经求出了前 \(i-1\) 个方程的解：</p> \[x = x_{i-1} + t \cdot M_{i-1} \quad (t \in \mathbb{Z}),\] <p>现在考虑如何求其与</p> \[x \equiv a_i \text{mod}{m_i}\] <p>的公共解。</p> <p>将当前的解代入上述方程，得到：</p> \[x_{i-1} + t \cdot M_{i-1} \equiv a_i \text{mod}{m_i},\] <p>即</p> \[t \cdot M_{i-1} \equiv a_i - x_{i-1} \text{mod}{m_i}.\] <p>设 \(d = \gcd(M_{i-1}, m_i)\)，则上式有解的<strong>充要条件</strong>是\(d \mid (a_i - x_{i-1})\)。</p> <p>如果有解，将上式两边同时除以 \(d\)，得到：</p> \[t \cdot \frac{M_{i-1}}{d} \equiv \frac{a_i - x_{i-1}}{d} \text{mod}{\frac{m_i}{d}}.\] <p>由于\(\frac{M_{i-1}}{d}\)和\(\frac{m_i}{d}\)互质， 可以用扩展欧几里得算法求该方程的一个特解 \(t_0\)，则通解可以表示为：</p> \[t = t_0 + k \cdot \frac{m_i}{d} \quad (k \in \mathbb{Z}).\] <p>将通解代入\(x = x_{i-1} + t \cdot M_{i-1}\)中，可以得到：</p> \[x = x_{i-1} + t_0 \cdot M_{i-1} + k \cdot \frac{m_i}{d} \cdot M_{i-1} \quad (k \in \mathbb{Z}).\] <p>因此，新的解可以表示为：</p> \[x = x_i + k \cdot M_i \quad (k \in \mathbb{Z}),\] <p>其中</p> \[\begin{cases} x_i = x_{i-1} + t_0 \cdot M_{i-1} \\ M_i = \frac{m_i}{d} \cdot M_{i-1} \end{cases}\] <p>特别地，我们可以增加一个方程 \(x \equiv 0 \text{mod} 1\) 作为初始条件， 此时 \(x_0 = 0\)，\(M_0 = 1\)。这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">ex_crt</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">T</span> <span class="n">t0</span><span class="p">,</span> <span class="n">_</span><span class="p">;</span>
        <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">%</span> <span class="n">d</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">l</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ex_gcd</span><span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">d</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">,</span> <span class="n">t0</span><span class="p">,</span> <span class="n">_</span><span class="p">);</span>
        <span class="n">t0</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">d</span> <span class="o">*</span> <span class="n">t0</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">);</span>
        <span class="n">t0</span> <span class="o">=</span> <span class="p">(</span><span class="n">t0</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">))</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">);</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">t0</span> <span class="o">*</span> <span class="n">l</span><span class="p">;</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span> <span class="o">*</span> <span class="n">l</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">%=</span> <span class="n">l</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Chinese Remainder Theorem"/><summary type="html"><![CDATA[本文介绍中国剩余定理以及扩展中国剩余定理。]]></summary></entry><entry><title type="html">模逆元</title><link href="https://kaiser-yang.github.io/blog/2025/mod-inverse/" rel="alternate" type="text/html" title="模逆元"/><published>2025-10-15T13:34:31+00:00</published><updated>2025-10-15T13:34:31+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/mod-inverse</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/mod-inverse/"><![CDATA[<p>模逆元的定义如下：</p> <p>给定一个正整数 \(a\) 和一个正模数 \(p\) ，如果存在一个正整数 \(b\) 满足：</p> \[a \cdot b \equiv 1 \ (\text{mod} \ p), 1 \leq b \le p\] <p>则称 \(b\) 为 \(a\) 关于模数 \(p\) 的模逆元，记作 \(a^{-1} \ (\text{mod} \ p)\) 。</p> <h2 id="计算方法">计算方法</h2> <h3 id="单个数的模逆元">单个数的模逆元</h3> <p>对于模逆元的计算，其本质是在求解 \(ax + py = 1\) 这个不定方程的正整数解 \(x\)。</p> <p>由裴蜀定理可知，只有当 \(\gcd(a, p) = 1\) 时，方程才有整数解。</p> <p>所以我们可以使用扩展欧几里得算法来计算模逆元。</p> <p>这里给出计算代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the inverse of a modulo mod</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">T</span> <span class="nf">inverse_of</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">mod</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">ex_gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">mod</span> <span class="o">+</span> <span class="n">mod</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>特别地，当 \(p\) 是质数时，由费马小定理可知：</p> \[a^{p-1} \equiv 1 \ (\text{mod} \ p)\] <p>因此，\(a^{p-2} \ (\text{mod} \ p)\) 即为 \(a\) 关于模数 \(p\) 的模逆元。</p> <h3 id="多个数的模逆元">多个数的模逆元</h3> <p>逆元存在一个重要的性质：对于 \(a\) 和 \(b\)，有</p> \[(a \cdot b)^{-1} \equiv a^{-1} \cdot b^{-1} (\text{mod} \ p)\] <p>有了这个性质，我们可以通过预处理前缀积来计算多个数的模逆元。</p> <p>具体地，我们用 \(prod_i\) 表示 \([1, i)\) 的前缀积取模后的结果，即：</p> \[prod_i = a_{i-1} \cdot prod_{i-1} \ (\text{mod} \ p)\] <p>那么就有 \(a^{-1}_i \equiv prod^{-1}_{i+1} \cdot prod_i \ (\text{mod} \ p)\)。</p> <p>我们只需要计算出 \(prod_n\) 的模逆元，然后从后往前依次计算出每个数的模逆元即可。</p> <p>这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the inverse of each element in a modulo mod</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inverse</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">mod</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">prod</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inv</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="n">inverse_of</span><span class="p">(</span><span class="n">prod</span><span class="p">.</span><span class="n">back</span><span class="p">(),</span> <span class="n">mod</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">inv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span> <span class="o">*</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">inv</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Modular Inverse"/><summary type="html"><![CDATA[本文介绍模逆元的定义及其计算方法。]]></summary></entry><entry><title type="html">扩展欧几里德算法</title><link href="https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm/" rel="alternate" type="text/html" title="扩展欧几里德算法"/><published>2025-10-14T10:42:49+00:00</published><updated>2025-10-14T10:42:49+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm/"><![CDATA[<h2 id="前置知识">前置知识</h2> <p>裴蜀定理（Bézout’s Identity）： 对于任意两个整数 \(a\) 和 \(b\)，存在整数 \(x\) 和 \(y\) 使得 \(ax + by = \gcd(a, b)\) 成立。</p> <p>欧几里德算法：对于两个非负整数 \(a\) 和 \(b\)，其最大公约数可以通过以下递归关系计算：</p> \[gcd(a, b) = gcd(b, a \text{mod} b)\] <h2 id="线性丢番图方程">线性丢番图方程</h2> <p>线性丢番图方程是形如 \(ax + by = c\) 的不定方程， 其中 \(a\)、\(b\) 和 \(c\) 是已知整数，\(x\) 和 \(y\) 是未知整数。</p> <p>根据裴蜀定理，线性丢番图方程有整数解的充分必要条件是 \(\gcd(a, b)\) 整除 \(c\)。</p> <h2 id="扩展欧几里德算法">扩展欧几里德算法</h2> <p>扩展欧几里德算法是用来求解 \(ax + by = \gcd(a, b)\) 的一组特解。</p> <p>算法的基本思想是利用欧几里德算法的递归结构，同时在每一步记录下 \(x\) 和 \(y\) 的变化。</p> <p>考虑当我们已经知道 \(gcd(b, a \text{mod} b) = bx_1 + (a \text{mod} b)y_1\) 的解时， 如何求出 \(gcd(a, b) = ax + by\) 的解。</p> <p>我们记 \(a \text{mod} b = a - \lfloor \frac{a}{b} \rfloor \cdot b\)， 则有：</p> \[gcd(b, a \text{mod} b) = bx_1 + (a - \lfloor \frac{a}{b} \rfloor \cdot b)y_1\] <p>注意到 \(gcd(b, a \text{mod} b) = gcd(a, b)\)，我们可以将上式改写为：</p> \[gcd(a, b) = ay_1 + b(x_1 - \lfloor \frac{a}{b} \rfloor \cdot y_1) = ax + by\] <p>从而得到：</p> \[\left\{ \begin{array}{l} x = y_1 \\ y = x_1 - \lfloor \frac{a}{b} \rfloor \cdot y_1 \end{array} \right.\] <p>而不难发现当 \(b = 0\) 时，\(gcd(a, 0) = a\)，此时方程的解为 \((1, 0)\)。</p> <p>这样我们就可以通过递归的方式来求解 \(ax + by = \gcd(a, b)\)。</p> <p>对于 \(ax + by = c\) 的情况，我们只需要先求出 \(ax_0 + by_0 = \gcd(a, b)\) 的一组解， 此时 \(x = x_0 \cdot \frac{c}{\gcd(a, b)}\)，\(y = y_0 \cdot \frac{c}{\gcd(a, b)}\) 即为 \(ax + by = c\) 的一组特解。</p> <p>接下来我们考虑在知道一组解的情况下，如何求出通解。这里先给出结论：</p> <p>若 \((x_0, y_0)\) 是 \(ax + by = c\) 的一组解，则通解可以表示为：</p> \[\left\{ \begin{array}{l} x = x_0 + k \cdot \frac{b}{\gcd(a, b)} \\ y = y_0 - k \cdot \frac{a}{\gcd(a, b)} \end{array} \right.\] <p>容易证明上述形式的解都满足方程。我们接下来证明所有解都可以表示为上述形式。</p> <p>设 \((x_1, y_1)\) 也是方程的解，则有 \(a(x_1 - x_0) + b(y_1 - y_0) = 0\) 成立。</p> <p>由此可得</p> \[a(x_1 - x_0) = -b(y_1 - y_0)\] <p>两边同时除以 \(\gcd(a, b)\)，有</p> \[\frac{a}{\gcd(a, b)}(x_1 - x_0) = -\frac{b}{\gcd(a, b)}(y_1 - y_0)\] <p>可以知道</p> \[\frac{a}{\gcd(a, b)} \mid \frac{b}{\gcd(a, b)}(y_1 - y_0)\] <p>因为 \(\frac{a}{\gcd(a, b)}\) 和 \(\frac{b}{\gcd(a, b)}\) 互质，所以</p> \[\frac{a}{\gcd(a, b)} \mid y_1 - y_0\] <p>即存在整数 \(k\) 使得：</p> \[y_1 - y_0 = k \cdot \frac{a}{\gcd(a, b)}\] <p>即</p> \[y_1 = y_0 + k \cdot \frac{a}{\gcd(a, b)}\] <p>代入前面的等式，有：</p> \[a(x_1 - x_0) = -b \cdot k \cdot \frac{a}{\gcd(a, b)}\] <p>即</p> \[x_1 = x_0 - k \cdot \frac{b}{\gcd(a, b)}\] <p>综上所述，所有解可以表示为上述通解的形式。</p> <p>最后给出扩展欧几里德算法的代码实现：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the greatest common divisor of a and b,</span>
<span class="c1">// and find x and y such that ax + by = gcd(a, b)</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">T</span> <span class="nf">ex_gcd</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">ex_gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="p">(</span><span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Extended Euclidean Algorithm"/><category term="gcd"/><summary type="html"><![CDATA[本文介绍扩展欧几里德算法的原理及应用。]]></summary></entry><entry><title type="html">Miller Rabin 素数测试</title><link href="https://kaiser-yang.github.io/blog/2025/miller-rabin/" rel="alternate" type="text/html" title="Miller Rabin 素数测试"/><published>2025-10-13T13:11:22+00:00</published><updated>2025-10-13T13:11:22+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/miller-rabin</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/miller-rabin/"><![CDATA[<h2 id="前置知识">前置知识</h2> <h3 id="费马小定理fermats-little-theorem">费马小定理（Fermat’s Little Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(a\) 不是 \(p\) 的倍数， 则 \(a^{p-1} \equiv 1 \text{mod} p\)。</p> <h3 id="二次探测定理quadratic-residue-theorem">二次探测定理（Quadratic Residue Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(x^2 \equiv 1 \text{mod} p\)， 则 \(x \equiv 1 \text{mod} p\) 或 \(x \equiv n - 1 \text{mod} p\)。</p> <h2 id="miller-rabin-素数测试原理">Miller Rabin 素数测试原理</h2> <p>我们可以发现，费马小定理和二次探测定理都给出了素数的必要条件， 但并不是充分条件。也就是说，如果一个数不满足这些条件， 那么它一定不是素数。</p> <p>Miller Rabin 素数测试是一种基于概率的素数测试算法， 它通过多次随机选择基数 \(a\) 来验证一个数是否为素数。</p> <p>对于一个奇数 \(n\) 而言其可以被写成 \(n - 1 = 2^s \cdot d\) 的形式， 其中 \(d\) 是奇数，\(s \geq 1\)。 根据费马小定理，如果 \(n\) 是素数， 则对于任意不是 \(p\) 倍数的 \(a\)，都有 \(a^{2^s \cdot d} \equiv 1 \text{mod} n\)。 而由二次探测定理可知，我们可以对 \(a^{2^s \cdot d} \equiv 1 \text{mod} n\) 执行开方的操作，其结果一定要是 \(1\) 或 \(n - 1\)。 同时当其结果为 \(1\) 时，则可以继续尝试开方操作，直到结果为 \(n - 1\) 或无法继续开方为止。 如果在某次开方的过程中，结果既不是 \(1\) 也不是 \(n - 1\)， 则 \(n\) 一定不是素数。</p> <p>根据上面的流程我们可以选择多个不同的 \(a\) 来进行测试， 如果所有的测试都通过了，则 \(n\) 很可能是素数。</p> <p>特别地，对于 64 位无符号整数，选择 \(2, 325, 9375, 28178, 450775, 9780504, 1795265022\) 可以保证不会出现误判。</p> <p>另外在实现的过程中，我们往往不会进行开方的操作，取而代之的是平方操作：</p> <ol> <li>将待测试的数 \(n\) 表示为 \(n - 1 = 2^s \cdot d\)，其中 \(d\) 是奇数，\(s \geq 1\)。</li> <li>选择一个基数 \(a\)。</li> <li>计算 \(x = a^d \text{mod} n\)。</li> <li>如果 \(x \equiv 1 \text{mod} n\) 或 \(x \equiv n - 1 \text{mod} n\)，此时进行平方的结果一定是 \(1\)， 所以可以直接认为通过本轮的测试。</li> <li>否则，重复以下步骤 \(s - 1\) 次： <ul> <li>计算 \(x \leftarrow x^2 \text{mod} n\)。</li> <li>如果 \(x \equiv n - 1 \text{mod} n\)，则通过本轮测试。</li> <li>如果在 \(s - 1\) 次操作中都没有出现 \(x \equiv n - 1 \text{mod} n\)，则本轮测试未通过。</li> </ul> </li> </ol> <p>在上述过程的5中，我们只检查了结果是否等于 \(n - 1\)，而没有检查结果是否等于 \(1\)。 这是因为如果当前的结果第一次等于 \(1\)，则说明在前一次平方操作中， 结果既不是 \(1\) 也不是 \(n - 1\)，这就违背了二次探测定理。</p> <p>最后给出Miller Rabin素数测试的代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">bool</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">T</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">d</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">d</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">s</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">a</span> <span class="o">:</span> <span class="n">miller_rabin_test</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span> <span class="c1">// calculate a^d % n</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
        <span class="kt">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ok</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Miller Rabin"/><category term="Primality Test"/><summary type="html"><![CDATA[本文介绍 Miller Rabin 素数测试的原理及其实现方式。]]></summary></entry><entry><title type="html">Cradle to Grave Devotion: Objective C Notes</title><link href="https://kaiser-yang.github.io/blog/2025/oc-notes/" rel="alternate" type="text/html" title="Cradle to Grave Devotion: Objective C Notes"/><published>2025-06-18T11:57:02+00:00</published><updated>2025-06-18T11:57:02+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/oc-notes</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/oc-notes/"><![CDATA[<h2 id="property"><code class="language-plaintext highlighter-rouge">@property</code></h2> <p>In Objective C, <code class="language-plaintext highlighter-rouge">@property</code> is used to declare properties in a class. It is a way to define instance variables (ivars) and their associated getter and setter methods. You can use <code class="language-plaintext highlighter-rouge">@property</code> to declare properties in the interface section of a class.</p> <p>Here is an example of how to declare a property:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">age</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>You can also specify attributes for the property.</p> <p>Here are some common attributes for memory management. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">strong</code> (default): This means that the property retains a strong reference to the object.</li> <li><code class="language-plaintext highlighter-rouge">weak</code>: This means that the property does not retain the object and allows it to be deallocated if there are no strong references to it.</li> <li><code class="language-plaintext highlighter-rouge">assign</code>: This means that the property does not retain the object and simply assigns it. This one is usually used for primitive types like <code class="language-plaintext highlighter-rouge">NSInteger</code>, <code class="language-plaintext highlighter-rouge">CGFloat</code>, etc.</li> <li><code class="language-plaintext highlighter-rouge">copy</code>: This means that the property creates a copy of the object when it is assigned.</li> <li><code class="language-plaintext highlighter-rouge">retain</code>: This is similar to <code class="language-plaintext highlighter-rouge">strong</code>, but it is used in manual reference counting (MRC) instead of automatic reference counting (ARC). Deprecated in ARC.</li> </ul> <p>Here are some common attributes for thread safety and access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">atomic</code> (default): This means that the property is thread-safe and uses atomic access.</li> <li><code class="language-plaintext highlighter-rouge">nonatomic</code>: This means that the property is not thread-safe and does not use atomic access.</li> </ul> <p>Here are some common attributes for access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">readwrite</code> (default): This means that the property can be both read and written to.</li> <li><code class="language-plaintext highlighter-rouge">readonly</code>: This means that the property can only be read and not written to.</li> </ul> <p>Other attributes you can use with <code class="language-plaintext highlighter-rouge">@property</code> include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">getter=</code>: This allows you to specify a custom getter method name.</li> <li><code class="language-plaintext highlighter-rouge">setter=</code>: This allows you to specify a custom setter method name.</li> </ul> <p>These below are some attributes that just used for documentation and do not affect the behavior of the property unless you implement the methods yourself:</p> <ul> <li><code class="language-plaintext highlighter-rouge">nullable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">nonnull</code>: This indicates that the property cannot be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">null_resettable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code> and will be reset to a default value when it is set to <code class="language-plaintext highlighter-rouge">nil</code>.</li> </ul> <p>For <code class="language-plaintext highlighter-rouge">@property</code>, you can access the property using dot notation and when you access the property with dot notation, the compiler will automatically call the getter or setter method for you.</p> <h2 id="categories-of-objective-c">Categories of Objective C</h2> <p>There is a very interesting syntax in Objective C: the category.</p> <p>A category is a way to add methods to an existing class without modifying the original class.</p> <p>To use a category, you first need to define it in a header file (<code class="language-plaintext highlighter-rouge">.h</code> file) and then implement it in an implementation file (<code class="language-plaintext highlighter-rouge">.m</code> file or <code class="language-plaintext highlighter-rouge">.mm</code> file).</p> <p>Here is an example of a category that extends the <code class="language-plaintext highlighter-rouge">NSString</code> class to add a method that reverses a string:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NSString+Reverse.h</span>
<span class="cp">#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// NSString+Reverse.m</span>
<span class="cp">#import "NSString+Reverse.h"
</span><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span> <span class="p">{</span>
    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nf">stringWithCapacity</span><span class="p">:[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">reversed</span> <span class="nf">appendFormat</span><span class="p">:</span><span class="s">@"%C"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nf">characterAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">]];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">reversed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We usually name the files with the format <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.h</code> and <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.m</code>. With these files, now you can use the <code class="language-plaintext highlighter-rouge">reversedString</code> method on any <code class="language-plaintext highlighter-rouge">NSString</code> object:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// import the category header file</span>
<span class="cp">#import "NSString+Reverse.h"
</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">original</span> <span class="o">=</span> <span class="s">@"Hello, World!"</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">original</span> <span class="nf">reversedString</span><span class="p">];</span>
</code></pre></div></div> <p>Of course, you can also add class methods (<code class="language-plaintext highlighter-rouge">+</code> methods) to a category. But note that you cannot add new properties to a category, and you cannot access the ivars (instance variables) of the original class directly.</p> <p>You can define multiple categories for the same class, but be careful to avoid method name conflicts.</p> <p>You can also use the methods defined in a category in another category, and you just need to import the category header file in the implementation file of the other category.</p> <h2 id="class-extensions">Class Extensions</h2> <p>Class extensions are also called anonymous categories.</p> <p>Unlike normal categories, class extensions are defined and implemented in implementation files, and usually used to add private methods or properties to a class.</p> <p>Here is an example of a class extension:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Person.mm</span>
<span class="cp">#import "Person.h"
#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">privateProperty</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"This is a private method."</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">privateProperty</code> and <code class="language-plaintext highlighter-rouge">privateMethod</code> are only accessible within the <code class="language-plaintext highlighter-rouge">Person</code> class.</p> <p>Actually, you can still access the private methods from outside the class using <code class="language-plaintext highlighter-rouge">performSelector</code>. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">privateMethod</span><span class="p">)];</span>
<span class="c1">// With parameters, but only support at most two parameters</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nf">privateMethod</span><span class="p">:</span><span class="n">withArg</span><span class="o">:</span><span class="p">)</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg1"</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg2"</span><span class="p">];</span>
</code></pre></div></div> <h2 id="protocols">Protocols</h2> <p>Protocols in Objective C are similar to interfaces in other languages. They define a set of methods that a class can implement.</p> <p>You can use <code class="language-plaintext highlighter-rouge">@protocol</code> to define a protocol, and then use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code> to specify whether the methods are optional or required. The default is <code class="language-plaintext highlighter-rouge">@required</code>. And when you use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>, all the methods following it will be optional or required until the end of the protocol or the next <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>.</p> <p>Here is an example of a protocol:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span>
<span class="err">@required</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherRequiredMethod</span><span class="p">;</span>
<span class="k">@optional</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">optionalMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherOptionalMethod</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>To declare a class that conforms to a protocol, you can use the <code class="language-plaintext highlighter-rouge">&lt;ProtocolName&gt;</code> syntax in the class declaration. If the class implements more than one protocol, you can separate them with commas.</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="p">,</span> <span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When a class conforms to a protocol, it must implement all the required methods of the protocol. If it does not implement all the required methods, the compiler will generate a warning or error.</p> <p>And you can specify that a property conforms to protocols, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span>
<span class="c1">// We use 'id' for properties that conform to protocols</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span> <span class="n">myProperty</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>For optional methods, you may want to check if the object responds to the method before calling it, using <code class="language-plaintext highlighter-rouge">respondsToSelector:</code>:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">([</span><span class="n">myObject</span> <span class="nf">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">optionalMethod</span><span class="p">)])</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">myObject</span> <span class="nf">optionalMethod</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is possible to declare a protocol conforming to another protocol, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span> <span class="o">&lt;</span><span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="c1">// We just declare that 'MyProtocol' conforms to 'AnotherProtocol'</span>
<span class="c1">// and we don't need to implement any methods here.</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When you declare a class that conforms to a protocol, you must implement all the required methods of the protocol. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In the .h file</span>
<span class="k">@interface</span> <span class="nc">MyClass</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>

<span class="c1">// In the .m file</span>
<span class="k">@implementation</span> <span class="nc">MyClass</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span> <span class="p">{</span>
    <span class="c1">// Implementation of the required method</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Potpourri"/><category term="Objective C"/><summary type="html"><![CDATA[This post includes some notes on Objective C.]]></summary></entry><entry><title type="html">gcs-front-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/" rel="alternate" type="text/html" title="gcs-front-end Development"/><published>2025-06-05T01:26:27+00:00</published><updated>2025-06-05T01:26:27+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-front-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-front-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Code and test.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone https://github.com/CMIPT/gcs-front-end.git
<span class="c"># or with SSH</span>
git clone git@github.com:CMIPT/gcs-front-end.git
</code></pre></div></div> <h2 id="code-and-test">Code and Test</h2> <p>You may need to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> first, so that you can request APIs from the front-end.</p> <p>We recommend you to use the <code class="language-plaintext highlighter-rouge">docker-compose</code> to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code>, those below are required:</p> <ul> <li><code class="language-plaintext highlighter-rouge">docker</code></li> <li><code class="language-plaintext highlighter-rouge">docker-compose</code></li> <li><code class="language-plaintext highlighter-rouge">openssl</code></li> </ul> <p>First, you should download the latest release from <a href="https://github.com/CMIPT/gcs-back-end/releases">gcs-back-end</a>.</p> <p>The downloaded file is a compressed file named <code class="language-plaintext highlighter-rouge">gcs-back-end.tar.gz</code>, which contains the compiled <code class="language-plaintext highlighter-rouge">jar</code> package, and related configuration files.</p> <p>The directory structure is as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── .env
├── 3rdparty
├── Dockerfile
├── database
├── docker-compose.yml
├── nginx
├── start.sh
├── target
</code></pre></div></div> <p>Then you need to do some configurations for the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the port you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories.</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>You can generate the <code class="language-plaintext highlighter-rouge">ssl</code> certificate by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 36500 <span class="nt">-newkey</span> rsa:2048 <span class="se">\</span>
  <span class="nt">-keyout</span> nginx/ssl/private.key <span class="nt">-out</span> nginx/ssl/certificate.crt
</code></pre></div></div> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>After this, the <code class="language-plaintext highlighter-rouge">gcs</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>Once the service is running (you can check the status by running <code class="language-plaintext highlighter-rouge">docker ps</code>), you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>Now it’s time for you to code and test.</p> <h2 id="commit-the-code">Commit the Code</h2> <p>After you finish your coding and testing, you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use asynchronous request to check if the repository
name is not empty. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Frontend"/><category term="Vue"/><summary type="html"><![CDATA[This post includes the main process of gcs-front-end development.]]></summary></entry><entry><title type="html">gcs-back-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/" rel="alternate" type="text/html" title="gcs-back-end Development"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-back-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-back-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Write the code.</li> <li>Compile and test the code.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <p>If you want to run the project locally, you should clone the sub-modules, too. Use the following command to clone the repository and its sub-modules:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone <span class="nt">--recursive</span> https://github.com/CMIPT/gcs-back-end.git
<span class="c"># or with SSH</span>
git clone <span class="nt">--recursive</span> git@github.com:CMIPT/gcs-back-end.git
</code></pre></div></div> <p>If you have cloned the repository before, you just need to update the sub-module:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs-back-end root first</span>
git submodule init
git submodule update
</code></pre></div></div> <h2 id="write-the-code">Write the Code</h2> <p>Then you should write the code related to the feature you want to implement or the bug you want to fix.</p> <p>Do not forget to write the integration tests for the code you write, if you are adding a new feature or you are fixing a bug that has no tests before.</p> <h2 id="compile-and-test-the-code">Compile and Test the Code</h2> <p>If you just want to compile, make sure you have <code class="language-plaintext highlighter-rouge">mvn</code> and <code class="language-plaintext highlighter-rouge">jdk17</code> (or later) installed on your system.</p> <p>If you want to run the tests, you should have a database set up. We recommend you to use <code class="language-plaintext highlighter-rouge">docker-compose</code> to run the tests. Make sure <code class="language-plaintext highlighter-rouge">mvn</code>, <code class="language-plaintext highlighter-rouge">jdk17</code> (or later), <code class="language-plaintext highlighter-rouge">docker</code>, <code class="language-plaintext highlighter-rouge">openssl</code>, and <code class="language-plaintext highlighter-rouge">docker-compose</code> are installed on your system.</p> <p>Or if you do not want to compile and test the code locally, you can skip this step. When you open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the repository, GitHub Actions will automatically build the project and run the tests.</p> <h3 id="compile">Compile</h3> <p>Use the following command to compile the project:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile
</code></pre></div></div> <h3 id="test">Test</h3> <p>For test, you should build the <code class="language-plaintext highlighter-rouge">jar</code> package first:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Skip tests, as we have no database to run tests</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div> <p>Once it successfully built, you will find the <code class="language-plaintext highlighter-rouge">jar</code> package in the <code class="language-plaintext highlighter-rouge">target</code> directory.</p> <p>The second step is to configure the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the ports you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories,</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>Now the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>You can use <code class="language-plaintext highlighter-rouge">docker ps</code> to check if the service is running (named with <code class="language-plaintext highlighter-rouge">gcs</code>).</p> <p>Once the service is running, you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>If you want to update the <code class="language-plaintext highlighter-rouge">jar</code> package, you can use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Rebuild the jar package</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
<span class="c"># Substitute the old jar package with the new one</span>
docker <span class="nb">cp </span>target/gcs-back-end.jar gcs:/gcs
<span class="c"># Restart the gcs service</span>
docker restart gcs
</code></pre></div></div> <p>Now you can copy the whole repository to the <code class="language-plaintext highlighter-rouge">gcs</code> docker so that you can run the tests in the docker container:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
</code></pre></div></div> <p>Now you can enter the <code class="language-plaintext highlighter-rouge">gcs</code> docker container and run the tests:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Install maven</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> maven
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <p>Once the tests are passed, you can exit the docker container.</p> <p>The next time you want to run the tests, you just need use those commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Update the source code in docker container</span>
docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
<span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <h2 id="commit-the-code">Commit the Code</h2> <p>Now you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use @NotBlank to ensure the repository name
is not empty. And add NOT NULL constraint to the repository
name in the database. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Docker"/><category term="Spring"/><category term="Backend"/><category term="Java"/><summary type="html"><![CDATA[This post includes the main process of gcs-back-end development.]]></summary></entry><entry><title type="html">gcs Documentation</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-documentation/" rel="alternate" type="text/html" title="gcs Documentation"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-documentation</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-documentation/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">gcs</code> stands for Git Center Server. It is a Git repository management system that provides a web interface for managing Git repositories, similar to GitHub or GitLab. This project is developed by the <a href="https://github.com/CMIPT">CMIPT</a>. We do this mainly to provide a self-hosted solution for our team, and practice our skills in coding. <code class="language-plaintext highlighter-rouge">gcs</code> is still in the early stages of development, and there are many features that are not yet implemented. Therefore, we hope that there will be more contributors to join the project. Do not be afraid to contribute, even if you are not familiar with it, there will be someone to help you.</p> <ul> <li><a href="/blog/2025/gcs-deploy">Deploy gcs</a></li> <li><a href="/blog/2025/gcs-back-end-development">gcs-back-end Development</a></li> <li><a href="/blog/2025/gcs-back-front-development">gcs-front-end Development</a></li> </ul>]]></content><author><name></name></author><category term="gcs"/><category term="Linux"/><category term="Nginx"/><category term="Docker"/><category term="Spring"/><category term="Vue"/><category term="Frontend"/><category term="Backend"/><summary type="html"><![CDATA[This post includes the index of gcs documentation.]]></summary></entry></feed>