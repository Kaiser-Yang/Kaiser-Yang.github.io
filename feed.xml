<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kaiser-yang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kaiser-yang.github.io/" rel="alternate" type="text/html" hreflang="zh"/><updated>2025-10-16T10:03:38+00:00</updated><id>https://kaiser-yang.github.io/feed.xml</id><title type="html">Kaiser’s Homepage</title><subtitle>Sharing everything I know. </subtitle><entry><title type="html">中国剩余定理及其扩展</title><link href="https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem/" rel="alternate" type="text/html" title="中国剩余定理及其扩展"/><published>2025-10-16T07:22:05+00:00</published><updated>2025-10-16T07:22:05+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/chinese-reminder-theorem/"><![CDATA[<h2 id="中国剩余定理">中国剩余定理</h2> <p>假如给定一组同余方程：</p> \[\begin{cases} x \equiv a_1 mod m_1 \\ x \equiv a_2 mod m_2 \\ \vdots \\ x \equiv a_k mod m_k \end{cases}\] <p>其中 \(m_1, m_2, \ldots, m_k\) 两两互质，下面介绍如何求解该组方程。</p> <p>我们令 \(M = m_1 \cdot m_2 \cdots m_k\)，并且对于每个 \(i\)，定义 \(M_i = \frac{M}{m_i}\)。 由于 \(m_i\) 和 \(M_i\) 互质，可以知道 \(M_i\) 在模 \(m_i\) 意义下是有逆元的， 记为 \(M_i^{-1}\)。不难发现 \(M_i \cdot M_i^{-1} \equiv 1 mod m_i\) 和 \(M_i \cdot M_i^{-1} \equiv 0 mod m_j\)（\(j \neq i\)）都成立。 记 \(c_i = a_i \cdot M_i \cdot M_i^{-1}\)，则有：</p> \[\begin{cases} c_i \equiv a_i mod m_i \\ n_i \equiv 0 mod m_j \quad (j \neq i) \end{cases}\] <p>由同余的线性性质可知，\(x' = \sum_{i=1}^{k} c_i\) 即为一个特解。</p> <p>不难证明通解可以写成 \(x = x' + t \cdot M \quad (t \in \mathbb{Z})\)。</p> <p>注意在上述的过程中，我们要求解 \(M_i\) 在模 \(m_i\) 意义下的逆元， 只有在 \(m_i\) 两两互质的情况下才能保证每次求解的逆元存在。</p> <p>代码如下：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">crt</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">m</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">e</span> <span class="o">:</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span> <span class="n">l</span> <span class="o">*=</span> <span class="n">e</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="n">l</span> <span class="o">*</span> <span class="n">inverse_of</span><span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="n">l</span><span class="p">)</span> <span class="o">%</span> <span class="n">l</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="扩展中国剩余定理">扩展中国剩余定理</h2> <p>扩展中国剩余定理是在中国剩余定理的基础上，放宽了对模数的互质要求。 假设给定一组同余方程：</p> \[\begin{cases} x \equiv a_1 mod m_1 \\ x \equiv a_2 mod m_2 \\ \vdots \\ x \equiv a_k mod m_k \end{cases}\] <p>并不保证 \(m_1, m_2, \ldots, m_k\) 两两互质，下面介绍如何求解该组方程。</p> <p>不难发现，\(x = x' + t \cdot M \quad (t \in \mathbb{Z})\) 是同余方程 \(x \equiv x' \pmod{M}\) 的解。</p> <p>假设我们已经求出了前 $i-1$ 个方程的解：</p> \[x = x_{i-1} + t \cdot M_{i-1} \quad (t \in \mathbb{Z}),\] <p>现在考虑如何求与</p> \[x \equiv a_i \pmod{m_i}\] <p>的公共解。</p> <p>将当前的解代入上述方程，得到：</p> \[x_{i-1} + t \cdot M_{i-1} \equiv a_i \pmod{m_i},\] <p>即</p> \[t \cdot M_{i-1} \equiv a_i - x_{i-1} \pmod{m_i}.\] <p>设 \(d = \gcd(M_{i-1}, m_i)\)，则上式有解的<strong>充要条件</strong>是\(d \mid (a_i - x_{i-1})\)。</p> <p>如果有解，将上式两边同时除以 $d$，得到：</p> \[t \cdot \frac{M_{i-1}}{d} \equiv \frac{a_i - x_{i-1}}{d} \pmod{\frac{m_i}{d}}.\] <p>由于\(\frac{M_{i-1}}{d}\)和\(\frac{m_i}{d}\)互质， 可以用扩展欧几里得算法求该方程的一个特解 $t_0$，则通解要求表示为：</p> \[t = t_0 + k \cdot \frac{m_i}{d} \quad (k \in \mathbb{Z}).\] <p>将通解代入\(x = x_{i-1} + t \cdot M_{i-1}\)中，可以得到：</p> \[x = x_{i-1} + t_0 \cdot M_{i-1} + k \cdot \frac{m_i}{d} \cdot M_{i-1} \quad (k \in \mathbb{Z}).\] <p>因此，新的解可以表示为：</p> \[x = x_i + k \cdot M_i \quad (k \in \mathbb{Z}),\] <p>其中</p> <p>\(\begin{cases} x_i = x_{i-1} + t_0 \cdot M_{i-1} \\ M_i = \frac{m_i}{d} \cdot M_{i-1} \end{cases}\)。</p> <p>特别地，我们可以增加 一个方程 \(x \equiv 0 mod 1\) 作为初始条件， 此时 \(x_0 = 0\)，\(M_0 = 1\)。这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">ex_crt</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">T</span> <span class="n">t0</span><span class="p">,</span> <span class="n">_</span><span class="p">;</span>
        <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">%</span> <span class="n">d</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">l</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ex_gcd</span><span class="p">(</span><span class="n">l</span> <span class="o">/</span> <span class="n">d</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">,</span> <span class="n">t0</span><span class="p">,</span> <span class="n">_</span><span class="p">);</span>
        <span class="n">t0</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">d</span> <span class="o">*</span> <span class="n">t0</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">);</span>
        <span class="n">t0</span> <span class="o">=</span> <span class="p">(</span><span class="n">t0</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">))</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span><span class="p">);</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">t0</span> <span class="o">*</span> <span class="n">l</span><span class="p">;</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">d</span> <span class="o">*</span> <span class="n">l</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">%=</span> <span class="n">l</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Chinese Remainder Theorem"/><summary type="html"><![CDATA[本文介绍中国剩余定理以及扩展中国剩余定理。]]></summary></entry><entry><title type="html">模逆元</title><link href="https://kaiser-yang.github.io/blog/2025/mod-inverse/" rel="alternate" type="text/html" title="模逆元"/><published>2025-10-15T13:34:31+00:00</published><updated>2025-10-15T13:34:31+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/mod-inverse</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/mod-inverse/"><![CDATA[<p>模逆元的定义如下：</p> <p>给定一个正整数 \(a\) 和一个正模数 \(p\) ，如果存在一个正整数 \(b\) 满足：</p> \[a \cdot b \equiv 1 \ (\text{mod} \ p), 1 \leq b \le p\] <p>则称 \(b\) 为 \(a\) 关于模数 \(p\) 的模逆元，记作 \(a^{-1} \ (\text{mod} \ p)\) 。</p> <h2 id="计算方法">计算方法</h2> <h3 id="单个数的模逆元">单个数的模逆元</h3> <p>对于模逆元的计算，其本质是在求解 \(ax + py = 1\) 这个不定方程的正整数解 \(x\)。</p> <p>由裴蜀定理可知，只有当 \(\gcd(a, p) = 1\) 时，方程才有整数解。</p> <p>所以我们可以使用扩展欧几里得算法来计算模逆元。</p> <p>这里给出计算代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the inverse of a modulo mod</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">T</span> <span class="nf">inverse_of</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">mod</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">ex_gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">mod</span> <span class="o">+</span> <span class="n">mod</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>特别地，当 \(p\) 是质数时，由费马小定理可知：</p> \[a^{p-1} \equiv 1 \ (\text{mod} \ p)\] <p>因此，\(a^{p-2} \ (\text{mod} \ p)\) 即为 \(a\) 关于模数 \(p\) 的模逆元。</p> <h3 id="多个数的模逆元">多个数的模逆元</h3> <p>逆元存在一个重要的性质：对于 \(a\) 和 \(b\)，有</p> \[(a \cdot b)^{-1} \equiv a^{-1} \cdot b^{-1} (\text{mod} \ p)\] <p>有了这个性质，我们可以通过预处理前缀积来计算多个数的模逆元。</p> <p>具体地，我们用 \(prod_i\) 表示 \([1, i)\) 的前缀积取模后的结果，即：</p> \[prod_i = a_{i-1} \cdot prod_{i-1} \ (\text{mod} \ p)\] <p>那么就有 \(a^{-1}_i \equiv prod^{-1}_{i+1} \cdot prod_i \ (\text{mod} \ p)\)。</p> <p>我们只需要计算出 \(prod_n\) 的模逆元，然后从后往前依次计算出每个数的模逆元即可。</p> <p>这里给出代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the inverse of each element in a modulo mod</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inverse</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">mod</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">prod</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inv</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="n">inverse_of</span><span class="p">(</span><span class="n">prod</span><span class="p">.</span><span class="n">back</span><span class="p">(),</span> <span class="n">mod</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">inv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span> <span class="o">*</span> <span class="n">prod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">inv</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Modular Inverse"/><summary type="html"><![CDATA[本文介绍模逆元的定义及其计算方法。]]></summary></entry><entry><title type="html">扩展欧几里德算法</title><link href="https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm/" rel="alternate" type="text/html" title="扩展欧几里德算法"/><published>2025-10-14T10:42:49+00:00</published><updated>2025-10-14T10:42:49+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/extended-euclidean-algorithm/"><![CDATA[<h2 id="前置知识">前置知识</h2> <p>裴蜀定理（Bézout’s Identity）： 对于任意两个整数 \(a\) 和 \(b\)，存在整数 \(x\) 和 \(y\) 使得 \(ax + by = \gcd(a, b)\) 成立。</p> <p>欧几里德算法：对于两个非负整数 \(a\) 和 \(b\)，其最大公约数可以通过以下递归关系计算：</p> \[gcd(a, b) = gcd(b, a mod b)\] <h2 id="线性丢番图方程">线性丢番图方程</h2> <p>线性丢番图方程是形如 \(ax + by = c\) 的不定方程， 其中 \(a\)、\(b\) 和 \(c\) 是已知整数，\(x\) 和 \(y\) 是未知整数。</p> <p>根据裴蜀定理，线性丢番图方程有整数解的充分必要条件是 \(\gcd(a, b)\) 整除 \(c\)。</p> <h2 id="扩展欧几里德算法">扩展欧几里德算法</h2> <p>扩展欧几里德算法是用来求解 \(ax + by = \gcd(a, b)\) 的一组特解。</p> <p>算法的基本思想是利用欧几里德算法的递归结构，同时在每一步记录下 \(x\) 和 \(y\) 的变化。</p> <p>考虑当我们已经知道 \(gcd(b, a mod b) = bx_1 + (a mod b)y_1\) 的解时， 如何求出 \(gcd(a, b) = ax + by\) 的解。</p> <p>我们记 \(a mod b = a - \lfloor \frac{a}{b} \rfloor \cdot b\)， 则有：</p> \[gcd(b, a mod b) = bx_1 + (a - \lfloor \frac{a}{b} \rfloor \cdot b)y_1\] <p>注意到 \(gcd(b, a mod b) = gcd(a, b)\)，我们可以将上式改写为：</p> \[gcd(a, b) = ay_1 + b(x_1 - \lfloor \frac{a}{b} \rfloor \cdot y_1) = ax + by\] <p>从而得到：</p> \[\left\{ \begin{array}{l} x = y_1 \\ y = x_1 - \lfloor \frac{a}{b} \rfloor \cdot y_1 \end{array} \right.\] <p>而不难发现当 \(b = 0\) 时，\(gcd(a, 0) = a\)，此时方程的解为 \((1, 0)\)。</p> <p>这样我们就可以通过递归的方式来求解 \(ax + by = \gcd(a, b)\)。</p> <p>对于 \(ax + by = c\) 的情况，我们只需要先求出 \(ax_0 + by_0 = \gcd(a, b)\) 的一组解， 此时 \(x = x_0 \cdot \frac{c}{\gcd(a, b)}\)，\(y = y_0 \cdot \frac{c}{\gcd(a, b)}\) 即为 \(ax + by = c\) 的一组特解。</p> <p>接下来我们考虑在知道一组解的情况下，如何求出通解。这里先给出结论：</p> <p>若 \((x_0, y_0)\) 是 \(ax + by = c\) 的一组解，则通解可以表示为：</p> \[\left\{ \begin{array}{l} x = x_0 + k \cdot \frac{b}{\gcd(a, b)} \\ y = y_0 - k \cdot \frac{a}{\gcd(a, b)} \end{array} \right.\] <p>容易证明上述形式的解都满足方程。我们接下来证明所有解都可以表示为上述形式。</p> <p>设 \((x_1, y_1)\) 也是方程的解，则有 \(a(x_1 - x_0) + b(y_1 - y_0) = 0\) 成立。</p> <p>由此可得</p> \[a(x_1 - x_0) = -b(y_1 - y_0)\] <p>两边同时除以 \(\gcd(a, b)\)，有</p> \[\frac{a}{\gcd(a, b)}(x_1 - x_0) = -\frac{b}{\gcd(a, b)}(y_1 - y_0)\] <p>可以知道</p> \[\frac{a}{\gcd(a, b)} \mid \frac{b}{\gcd(a, b)}(y_1 - y_0)\] <p>因为 \(\frac{a}{\gcd(a, b)}\) 和 \(\frac{b}{\gcd(a, b)}\) 互质，所以</p> \[\frac{a}{\gcd(a, b)} \mid y_1 - y_0\] <p>即存在整数 \(k\) 使得：</p> \[y_1 - y_0 = k \cdot \frac{a}{\gcd(a, b)}\] <p>即</p> \[y_1 = y_0 + k \cdot \frac{a}{\gcd(a, b)}\] <p>代入前面的等式，有：</p> \[a(x_1 - x_0) = -b \cdot k \cdot \frac{a}{\gcd(a, b)}\] <p>即</p> \[x_1 = x_0 - k \cdot \frac{b}{\gcd(a, b)}\] <p>综上所述，所有解可以表示为上述通解的形式。</p> <p>最后给出扩展欧几里德算法的代码实现：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// return the greatest common divisor of a and b,</span>
<span class="c1">// and find x and y such that ax + by = gcd(a, b)</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="n">T</span> <span class="nf">ex_gcd</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">ex_gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
        <span class="n">y</span> <span class="o">-=</span> <span class="p">(</span><span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Extended Euclidean Algorithm"/><category term="gcd"/><summary type="html"><![CDATA[本文介绍扩展欧几里德算法的原理及应用。]]></summary></entry><entry><title type="html">Miller Rabin 素数测试</title><link href="https://kaiser-yang.github.io/blog/2025/miller-rabin/" rel="alternate" type="text/html" title="Miller Rabin 素数测试"/><published>2025-10-13T13:11:22+00:00</published><updated>2025-10-13T13:11:22+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/miller-rabin</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/miller-rabin/"><![CDATA[<h2 id="前置知识">前置知识</h2> <h3 id="费马小定理fermats-little-theorem">费马小定理（Fermat’s Little Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(a\) 不是 \(p\) 的倍数， 则 \(a^{p-1} \equiv 1 mod p\)。</p> <h3 id="二次探测定理quadratic-residue-theorem">二次探测定理（Quadratic Residue Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(x^2 \equiv 1 mod p\)， 则 \(x \equiv 1 mod p\) 或 \(x \equiv -1 mod p\)。</p> <h2 id="miller-rabin-素数测试原理">Miller Rabin 素数测试原理</h2> <p>我们可以发现，费马小定理和二次探测定理都给出了素数的必要条件， 但并不是充分条件。也就是说，如果一个数不满足这些条件， 那么它一定不是素数。</p> <p>Miller Rabin 素数测试是一种基于概率的素数测试算法， 它通过多次随机选择基数 \(a\) 来验证一个数是否为素数。</p> <p>对于一个奇数 \(n\) 而言其可以被写成 \(n - 1 = 2^s \cdot d\) 的形式， 其中 \(d\) 是奇数，\(s \geq 1\)。 根据费马小定理，如果 \(n\) 是素数， 则对于任意 \(a\)，都有 \(a^{2^s \cdot d} \equiv 1 mod n\)。 而由二次探测定理可知，我们可以对 \(a^{2^s \cdot d} \equiv 1 mod n\) 执行开方的操作，其结果一定要是 \(1\) 或 \(n - 1\)。 同时当其结果为 \(1\) 时，且当前还可以进行开方操作时， 则继续进行开方操作，直到结果为 \(n - 1\) 或无法继续开方为止。 如果在某次开方的过程中，结果既不是 \(1\) 也不是 \(n - 1\)， 则 \(n\) 一定不是素数。</p> <p>根据上面的流程我们可以选择多个不同的 \(a\) 来进行测试， 如果所有的测试都通过了，则 \(n\) 很可能是素数。</p> <p>特别地，对于64位无符号整数，选择 \(2, 325, 9375, 28178, 450775, 9780504, 1795265022\) 可以保证不会出现伪素数。</p> <p>另外在实现的过程中，我们往往不会进行开方的操作，取而代之的是平方操作：</p> <ol> <li>将待测试的数 \(n\) 表示为 \(n - 1 = 2^s \cdot d\)，其中 \(d\) 是奇数，\(s \geq 1\)。</li> <li>选择一个基数 \(a\)。</li> <li>计算 \(x = a^d mod n\)。</li> <li>如果 \(x \equiv 1 mod n\) 或 \(x \equiv n - 1 mod n\)，此时进行平方的结果一定是 \(1\)， 所以可以直接认为通过本轮的测试。</li> <li>否则，重复以下步骤 \(s - 1\) 次： <ul> <li>计算 \(x \leftarrow x^2 mod n\)。</li> <li>如果 \(x \equiv n - 1 mod n\)，则通过本轮测试。</li> </ul> </li> <li>如果所有测试都未通过，则 \(n\) 不是素数。</li> </ol> <p>在上述过程的5中，我们只检查了结果是否等于 \(n - 1\)，而没有检查结果是否等于 \(1\)。 这是因为如果当前的结果第一次等于 \(1\)，则说明在前一次平方操作中， 结果既不是 \(1\) 也不是 \(n - 1\)，这就违背了二次探测定理。</p> <p>最后给出Miller Rabin素数测试的代码：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">bool</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">T</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">T</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">d</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">d</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">s</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">a</span> <span class="o">:</span> <span class="n">miller_rabin_test</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
        <span class="kt">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ok</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Algorithm"/><category term="Miller Rabin"/><category term="Primality Test"/><summary type="html"><![CDATA[本文介绍 Miller Rabin 素数测试的原理及其实现方式。]]></summary></entry><entry><title type="html">The Brief Introduction of Git</title><link href="https://kaiser-yang.github.io/blog/2025/git-base/" rel="alternate" type="text/html" title="The Brief Introduction of Git"/><published>2025-06-22T19:38:50+00:00</published><updated>2025-06-22T19:38:50+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/git-base</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/git-base/"><![CDATA[<h2 id="the-importance-of-version-control">The importance of Version Control</h2> <details> <summary>The answer from copilot</summary> <p> Version control is important because it helps individuals and teams manage changes to code, documents, or other digital assets over time. Here are some key reasons why version control is essential: </p> <ul> <li> Track Changes: It records every modification made to files, allowing you to see what was changed, when, and by whom. </li> <li> Collaboration: Multiple people can work on the same project simultaneously without overwriting each other's work. Version control systems help merge changes from different contributors. </li> <li> Revert Changes: If a mistake is made, you can easily revert files or entire projects back to a previous state. </li> <li> Branching and Experimentation: You can create branches to try out new features or ideas without affecting the main codebase. If the experiment fails, simply discard the branch. </li> <li> Accountability: With a detailed history of changes, it's easier to understand the reasoning behind specific updates and hold contributors accountable. </li> <li> Backup: Version control acts as a backup system, protecting against data loss in case of accidental deletions or hardware failures. </li> <li> Release Management: It helps in managing releases, hotfixes, and updates by tagging and keeping track of different versions of the project. </li> </ul> <p> In summary: Version control provides a structured and reliable way to manage projects, improve collaboration, and safeguard your work. It’s a fundamental tool in modern software development and many other digital workflows. </p> </details> <h2 id="gitignore"><code class="language-plaintext highlighter-rouge">.gitignore</code></h2> <p>You can use <code class="language-plaintext highlighter-rouge">.gitignore</code> to specify files or directories that do not need to be tracked by <code class="language-plaintext highlighter-rouge">git</code>.</p> <p>Most wildcards in <code class="language-plaintext highlighter-rouge">.gitignore</code> are similar to those in <code class="language-plaintext highlighter-rouge">bash</code>. Check <a href="#wildcards-in-linux">Wildcards in Linux</a> for more information about <code class="language-plaintext highlighter-rouge">wildcards</code>.</p> <p>By default, the items in <code class="language-plaintext highlighter-rouge">.gitignore</code> will be ignored recursively. If you don’t want to ignore recursively, you can add <code class="language-plaintext highlighter-rouge">/</code> before the item to indicate that it only takes effect in the current directory. For example, <code class="language-plaintext highlighter-rouge">/foo</code> means to ignore only the <code class="language-plaintext highlighter-rouge">foo</code> file or directory in the current directory, while <code class="language-plaintext highlighter-rouge">foo</code> means to ignore all <code class="language-plaintext highlighter-rouge">foo</code> files or directories.</p> <p>By default, the items in <code class="language-plaintext highlighter-rouge">.gitignore</code> match both directories and files. If you only want to match directories, you can add <code class="language-plaintext highlighter-rouge">/</code> at the end of the item to indicate that it only matches directories. For example, <code class="language-plaintext highlighter-rouge">foo/</code> means to match only the directory <code class="language-plaintext highlighter-rouge">foo</code>, while <code class="language-plaintext highlighter-rouge">foo</code> means to match all <code class="language-plaintext highlighter-rouge">foo</code> files or directories.</p> <p>You can configure the ignore rules in <code class="language-plaintext highlighter-rouge">~/.config/git/ignore</code> to ignore files globally.</p> <p>There can be a <code class="language-plaintext highlighter-rouge">.gitignore</code> file in any directory in a repository, and this file will take effect on files and directories in the current directory. The priority of <code class="language-plaintext highlighter-rouge">.gitignore</code> files is from subdirectory to parent directory, and the global ignore file has the lowest priority.</p>]]></content><author><name></name></author><category term="Potpourri"/><category term="Git"/><category term="Version Control"/><summary type="html"><![CDATA[The importance of Version Control]]></summary></entry><entry><title type="html">Cradle to Grave Devotion: Objective C Notes</title><link href="https://kaiser-yang.github.io/blog/2025/oc-notes/" rel="alternate" type="text/html" title="Cradle to Grave Devotion: Objective C Notes"/><published>2025-06-18T11:57:02+00:00</published><updated>2025-06-18T11:57:02+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/oc-notes</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/oc-notes/"><![CDATA[<h2 id="property"><code class="language-plaintext highlighter-rouge">@property</code></h2> <p>In Objective C, <code class="language-plaintext highlighter-rouge">@property</code> is used to declare properties in a class. It is a way to define instance variables (ivars) and their associated getter and setter methods. You can use <code class="language-plaintext highlighter-rouge">@property</code> to declare properties in the interface section of a class.</p> <p>Here is an example of how to declare a property:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">age</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>You can also specify attributes for the property.</p> <p>Here are some common attributes for memory management. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">strong</code> (default): This means that the property retains a strong reference to the object.</li> <li><code class="language-plaintext highlighter-rouge">weak</code>: This means that the property does not retain the object and allows it to be deallocated if there are no strong references to it.</li> <li><code class="language-plaintext highlighter-rouge">assign</code>: This means that the property does not retain the object and simply assigns it. This one is usually used for primitive types like <code class="language-plaintext highlighter-rouge">NSInteger</code>, <code class="language-plaintext highlighter-rouge">CGFloat</code>, etc.</li> <li><code class="language-plaintext highlighter-rouge">copy</code>: This means that the property creates a copy of the object when it is assigned.</li> <li><code class="language-plaintext highlighter-rouge">retain</code>: This is similar to <code class="language-plaintext highlighter-rouge">strong</code>, but it is used in manual reference counting (MRC) instead of automatic reference counting (ARC). Deprecated in ARC.</li> </ul> <p>Here are some common attributes for thread safety and access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">atomic</code> (default): This means that the property is thread-safe and uses atomic access.</li> <li><code class="language-plaintext highlighter-rouge">nonatomic</code>: This means that the property is not thread-safe and does not use atomic access.</li> </ul> <p>Here are some common attributes for access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">readwrite</code> (default): This means that the property can be both read and written to.</li> <li><code class="language-plaintext highlighter-rouge">readonly</code>: This means that the property can only be read and not written to.</li> </ul> <p>Other attributes you can use with <code class="language-plaintext highlighter-rouge">@property</code> include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">getter=</code>: This allows you to specify a custom getter method name.</li> <li><code class="language-plaintext highlighter-rouge">setter=</code>: This allows you to specify a custom setter method name.</li> </ul> <p>These below are some attributes that just used for documentation and do not affect the behavior of the property unless you implement the methods yourself:</p> <ul> <li><code class="language-plaintext highlighter-rouge">nullable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">nonnull</code>: This indicates that the property cannot be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">null_resettable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code> and will be reset to a default value when it is set to <code class="language-plaintext highlighter-rouge">nil</code>.</li> </ul> <p>For <code class="language-plaintext highlighter-rouge">@property</code>, you can access the property using dot notation and when you access the property with dot notation, the compiler will automatically call the getter or setter method for you.</p> <h2 id="categories-of-objective-c">Categories of Objective C</h2> <p>There is a very interesting syntax in Objective C: the category.</p> <p>A category is a way to add methods to an existing class without modifying the original class.</p> <p>To use a category, you first need to define it in a header file (<code class="language-plaintext highlighter-rouge">.h</code> file) and then implement it in an implementation file (<code class="language-plaintext highlighter-rouge">.m</code> file or <code class="language-plaintext highlighter-rouge">.mm</code> file).</p> <p>Here is an example of a category that extends the <code class="language-plaintext highlighter-rouge">NSString</code> class to add a method that reverses a string:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NSString+Reverse.h</span>
<span class="cp">#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// NSString+Reverse.m</span>
<span class="cp">#import "NSString+Reverse.h"
</span><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span> <span class="p">{</span>
    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nf">stringWithCapacity</span><span class="p">:[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">reversed</span> <span class="nf">appendFormat</span><span class="p">:</span><span class="s">@"%C"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nf">characterAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">]];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">reversed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We usually name the files with the format <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.h</code> and <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.m</code>. With these files, now you can use the <code class="language-plaintext highlighter-rouge">reversedString</code> method on any <code class="language-plaintext highlighter-rouge">NSString</code> object:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// import the category header file</span>
<span class="cp">#import "NSString+Reverse.h"
</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">original</span> <span class="o">=</span> <span class="s">@"Hello, World!"</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">original</span> <span class="nf">reversedString</span><span class="p">];</span>
</code></pre></div></div> <p>Of course, you can also add class methods (<code class="language-plaintext highlighter-rouge">+</code> methods) to a category. But note that you cannot add new properties to a category, and you cannot access the ivars (instance variables) of the original class directly.</p> <p>You can define multiple categories for the same class, but be careful to avoid method name conflicts.</p> <p>You can also use the methods defined in a category in another category, and you just need to import the category header file in the implementation file of the other category.</p> <h2 id="class-extensions">Class Extensions</h2> <p>Class extensions are also called anonymous categories.</p> <p>Unlike normal categories, class extensions are defined and implemented in implementation files, and usually used to add private methods or properties to a class.</p> <p>Here is an example of a class extension:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Person.mm</span>
<span class="cp">#import "Person.h"
#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">privateProperty</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"This is a private method."</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">privateProperty</code> and <code class="language-plaintext highlighter-rouge">privateMethod</code> are only accessible within the <code class="language-plaintext highlighter-rouge">Person</code> class.</p> <p>Actually, you can still access the private methods from outside the class using <code class="language-plaintext highlighter-rouge">performSelector</code>. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">privateMethod</span><span class="p">)];</span>
<span class="c1">// With parameters, but only support at most two parameters</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nf">privateMethod</span><span class="p">:</span><span class="n">withArg</span><span class="o">:</span><span class="p">)</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg1"</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg2"</span><span class="p">];</span>
</code></pre></div></div> <h2 id="protocols">Protocols</h2> <p>Protocols in Objective C are similar to interfaces in other languages. They define a set of methods that a class can implement.</p> <p>You can use <code class="language-plaintext highlighter-rouge">@protocol</code> to define a protocol, and then use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code> to specify whether the methods are optional or required. The default is <code class="language-plaintext highlighter-rouge">@required</code>. And when you use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>, all the methods following it will be optional or required until the end of the protocol or the next <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>.</p> <p>Here is an example of a protocol:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span>
<span class="err">@required</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherRequiredMethod</span><span class="p">;</span>
<span class="k">@optional</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">optionalMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherOptionalMethod</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>To declare a class that conforms to a protocol, you can use the <code class="language-plaintext highlighter-rouge">&lt;ProtocolName&gt;</code> syntax in the class declaration. If the class implements more than one protocol, you can separate them with commas.</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="p">,</span> <span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When a class conforms to a protocol, it must implement all the required methods of the protocol. If it does not implement all the required methods, the compiler will generate a warning or error.</p> <p>And you can specify that a property conforms to protocols, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span>
<span class="c1">// We use 'id' for properties that conform to protocols</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span> <span class="n">myProperty</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>For optional methods, you may want to check if the object responds to the method before calling it, using <code class="language-plaintext highlighter-rouge">respondsToSelector:</code>:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">([</span><span class="n">myObject</span> <span class="nf">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">optionalMethod</span><span class="p">)])</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">myObject</span> <span class="nf">optionalMethod</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is possible to declare a protocol conforming to another protocol, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span> <span class="o">&lt;</span><span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="c1">// We just declare that 'MyProtocol' conforms to 'AnotherProtocol'</span>
<span class="c1">// and we don't need to implement any methods here.</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When you declare a class that conforms to a protocol, you must implement all the required methods of the protocol. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In the .h file</span>
<span class="k">@interface</span> <span class="nc">MyClass</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>

<span class="c1">// In the .m file</span>
<span class="k">@implementation</span> <span class="nc">MyClass</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span> <span class="p">{</span>
    <span class="c1">// Implementation of the required method</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Potpourri"/><category term="Objective C"/><summary type="html"><![CDATA[This post includes some notes on Objective C.]]></summary></entry><entry><title type="html">gcs-front-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/" rel="alternate" type="text/html" title="gcs-front-end Development"/><published>2025-06-05T01:26:27+00:00</published><updated>2025-06-05T01:26:27+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-front-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-front-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Code and test.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone https://github.com/CMIPT/gcs-front-end.git
<span class="c"># or with SSH</span>
git clone git@github.com:CMIPT/gcs-front-end.git
</code></pre></div></div> <h2 id="code-and-test">Code and Test</h2> <p>You may need to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> first, so that you can request APIs from the front-end.</p> <p>We recommend you to use the <code class="language-plaintext highlighter-rouge">docker-compose</code> to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code>, those below are required:</p> <ul> <li><code class="language-plaintext highlighter-rouge">docker</code></li> <li><code class="language-plaintext highlighter-rouge">docker-compose</code></li> <li><code class="language-plaintext highlighter-rouge">openssl</code></li> </ul> <p>First, you should download the latest release from <a href="https://github.com/CMIPT/gcs-back-end/releases">gcs-back-end</a>.</p> <p>The downloaded file is a compressed file named <code class="language-plaintext highlighter-rouge">gcs-back-end.tar.gz</code>, which contains the compiled <code class="language-plaintext highlighter-rouge">jar</code> package, and related configuration files.</p> <p>The directory structure is as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── .env
├── 3rdparty
├── Dockerfile
├── database
├── docker-compose.yml
├── nginx
├── start.sh
├── target
</code></pre></div></div> <p>Then you need to do some configurations for the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the port you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories.</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>You can generate the <code class="language-plaintext highlighter-rouge">ssl</code> certificate by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 36500 <span class="nt">-newkey</span> rsa:2048 <span class="se">\</span>
  <span class="nt">-keyout</span> nginx/ssl/private.key <span class="nt">-out</span> nginx/ssl/certificate.crt
</code></pre></div></div> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>After this, the <code class="language-plaintext highlighter-rouge">gcs</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>Once the service is running (you can check the status by running <code class="language-plaintext highlighter-rouge">docker ps</code>), you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>Now it’s time for you to code and test.</p> <h2 id="commit-the-code">Commit the Code</h2> <p>After you finish your coding and testing, you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use asynchronous request to check if the repository
name is not empty. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Frontend"/><category term="Vue"/><summary type="html"><![CDATA[This post includes the main process of gcs-front-end development.]]></summary></entry><entry><title type="html">gcs-back-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/" rel="alternate" type="text/html" title="gcs-back-end Development"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-back-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-back-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Write the code.</li> <li>Compile and test the code.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <p>If you want to run the project locally, you should clone the sub-modules, too. Use the following command to clone the repository and its sub-modules:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone <span class="nt">--recursive</span> https://github.com/CMIPT/gcs-back-end.git
<span class="c"># or with SSH</span>
git clone <span class="nt">--recursive</span> git@github.com:CMIPT/gcs-back-end.git
</code></pre></div></div> <p>If you have cloned the repository before, you just need to update the sub-module:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs-back-end root first</span>
git submodule init
git submodule update
</code></pre></div></div> <h2 id="write-the-code">Write the Code</h2> <p>Then you should write the code related to the feature you want to implement or the bug you want to fix.</p> <p>Do not forget to write the integration tests for the code you write, if you are adding a new feature or you are fixing a bug that has no tests before.</p> <h2 id="compile-and-test-the-code">Compile and Test the Code</h2> <p>If you just want to compile, make sure you have <code class="language-plaintext highlighter-rouge">mvn</code> and <code class="language-plaintext highlighter-rouge">jdk17</code> (or later) installed on your system.</p> <p>If you want to run the tests, you should have a database set up. We recommend you to use <code class="language-plaintext highlighter-rouge">docker-compose</code> to run the tests. Make sure <code class="language-plaintext highlighter-rouge">mvn</code>, <code class="language-plaintext highlighter-rouge">jdk17</code> (or later), <code class="language-plaintext highlighter-rouge">docker</code>, <code class="language-plaintext highlighter-rouge">openssl</code>, and <code class="language-plaintext highlighter-rouge">docker-compose</code> are installed on your system.</p> <p>Or if you do not want to compile and test the code locally, you can skip this step. When you open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the repository, GitHub Actions will automatically build the project and run the tests.</p> <h3 id="compile">Compile</h3> <p>Use the following command to compile the project:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile
</code></pre></div></div> <h3 id="test">Test</h3> <p>For test, you should build the <code class="language-plaintext highlighter-rouge">jar</code> package first:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Skip tests, as we have no database to run tests</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div> <p>Once it successfully built, you will find the <code class="language-plaintext highlighter-rouge">jar</code> package in the <code class="language-plaintext highlighter-rouge">target</code> directory.</p> <p>The second step is to configure the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the ports you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories,</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>Now the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>You can use <code class="language-plaintext highlighter-rouge">docker ps</code> to check if the service is running (named with <code class="language-plaintext highlighter-rouge">gcs</code>).</p> <p>Once the service is running, you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>If you want to update the <code class="language-plaintext highlighter-rouge">jar</code> package, you can use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Rebuild the jar package</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
<span class="c"># Substitute the old jar package with the new one</span>
docker <span class="nb">cp </span>target/gcs-back-end.jar gcs:/gcs
<span class="c"># Restart the gcs service</span>
docker restart gcs
</code></pre></div></div> <p>Now you can copy the whole repository to the <code class="language-plaintext highlighter-rouge">gcs</code> docker so that you can run the tests in the docker container:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
</code></pre></div></div> <p>Now you can enter the <code class="language-plaintext highlighter-rouge">gcs</code> docker container and run the tests:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Install maven</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> maven
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <p>Once the tests are passed, you can exit the docker container.</p> <p>The next time you want to run the tests, you just need use those commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Update the source code in docker container</span>
docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
<span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <h2 id="commit-the-code">Commit the Code</h2> <p>Now you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use @NotBlank to ensure the repository name
is not empty. And add NOT NULL constraint to the repository
name in the database. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Docker"/><category term="Spring"/><category term="Backend"/><category term="Java"/><summary type="html"><![CDATA[This post includes the main process of gcs-back-end development.]]></summary></entry><entry><title type="html">gcs Documentation</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-documentation/" rel="alternate" type="text/html" title="gcs Documentation"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-documentation</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-documentation/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">gcs</code> stands for Git Center Server. It is a Git repository management system that provides a web interface for managing Git repositories, similar to GitHub or GitLab. This project is developed by the <a href="https://github.com/CMIPT">CMIPT</a>. We do this mainly to provide a self-hosted solution for our team, and practice our skills in coding. <code class="language-plaintext highlighter-rouge">gcs</code> is still in the early stages of development, and there are many features that are not yet implemented. Therefore, we hope that there will be more contributors to join the project. Do not be afraid to contribute, even if you are not familiar with it, there will be someone to help you.</p> <ul> <li><a href="/blog/2025/gcs-deploy">Deploy gcs</a></li> <li><a href="/blog/2025/gcs-back-end-development">gcs-back-end Development</a></li> <li><a href="/blog/2025/gcs-back-front-development">gcs-front-end Development</a></li> </ul>]]></content><author><name></name></author><category term="gcs"/><category term="Linux"/><category term="Nginx"/><category term="Docker"/><category term="Spring"/><category term="Vue"/><category term="Frontend"/><category term="Backend"/><summary type="html"><![CDATA[This post includes the index of gcs documentation.]]></summary></entry><entry><title type="html">Q&amp;amp;A</title><link href="https://kaiser-yang.github.io/blog/2025/question-and-answer/" rel="alternate" type="text/html" title="Q&amp;amp;A"/><published>2025-05-16T13:16:38+00:00</published><updated>2025-05-16T13:16:38+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/question-and-answer</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/question-and-answer/"><![CDATA[<h2 id="what-is-ab-testing">What is A/B testing?</h2> <p>A/B testing is a statistical method used to compare two versions of an application to determine which performs better based on specific metrics.</p> <p>In A/B testing, users are split into two groups: the control group (A) and the treatment group (B). The control group is exposed to the original version of the application, while the treatment group is exposed to the modified version. By analyzing the performance of both groups, you can determine which version is more effective in achieving the desired outcome.</p> <p>There are some examples for A/B testing:</p> <ul> <li><strong>Website Design</strong>: Testing two different layouts of a webpage to see which one leads to more conversions.</li> <li><strong>Algorithm Optimization</strong>: Comparing two different algorithms to see which one performs better in terms of speed or accuracy.</li> </ul> <h2 id="what-are-overload-override-and-overwrite">What are overload, override and overwrite?</h2> <ul> <li><strong>Overload</strong>: In programming, overloading refers to the ability to define multiple functions or methods with the same name but different parameters. This allows you to use the same function name for different purposes, depending on the context.</li> <li><strong>Override</strong>: Overriding is a feature in object-oriented programming where a subclass provides a specific implementation of a method that is already defined in its superclass. This allows the subclass to customize or extend the behavior of the inherited method.</li> <li><strong>Overwrite</strong>: Overwriting in <code class="language-plaintext highlighter-rouge">C++</code> refers to hiding a non-virtual base class member function.</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Overload</span>
<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">content</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">String</span> <span class="n">content</span><span class="p">);</span>

<span class="c1">// Override</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">();</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span> <span class="c1">// Override the Base class method</span>
<span class="p">};</span>

<span class="c1">// Overwrite</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">();</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">();</span> <span class="c1">// Hides the Base class method</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="what-is-the-3-2-1-rule-for-backups">What is the <code class="language-plaintext highlighter-rouge">3-2-1 rule</code> for backups?</h2> <ul> <li>At least <code class="language-plaintext highlighter-rouge">3</code> copies of your data. This ensures redundancy; if one copy fails, you have others to rely on.</li> <li>At least <code class="language-plaintext highlighter-rouge">2</code> copies on different storage media. This avoids points of failure.</li> <li>At least <code class="language-plaintext highlighter-rouge">1</code> copy off-site. This protects against local disasters like fire or flood.</li> </ul> <h2 id="what-is-the-difference-between-docker-and-a-virtual-machine">What is the difference between Docker and a virtual machine?</h2> <p>Docker is based on a more general concept called containers.</p> <p>The main difference between containers and virtual machines is that virtual machines will execute an entire OS stack, including the kernel, even if the kernel is the same as the host machine.</p> <p>Unlike VMs, containers avoid running another instance of the kernel and instead share the kernel with the host. On Linux, this is achieved through a mechanism called LXC (Linux Containers), and it makes use of a series of isolation mechanisms to spin up a program that thinks it’s running on its own hardware but it’s actually sharing the hardware and kernel with the host.</p> <p>Therefore, containers have a lower overhead than a full VM. On the flip side, containers have a weaker isolation and only work if the host runs the same kernel. For instance if you run Docker on MacOS, Docker needs to spin up a Linux virtual machine to get an initial Linux kernel and thus the overhead is still significant. Lastly, Docker is a specific implementation of containers and it is tailored for software deployment. Because of this, it has some quirks. For example, Docker containers will not persist any form of storage between reboots by default.</p> <h2 id="how-to-upgrade-application-when-db-schema-changes">How to Upgrade Application When DB Schema Changes?</h2> <p>When developing new features, the DB schema may change, such as adding new columns or tables. We must make sure that the data is not lost after upgrading the application.</p> <p>Versioned schema migrations are a common solution to this problem. The steps can be summarized as follows:</p> <ul> <li>Store the version of the schema in the database.</li> <li>Creating incremental migration scripts that can be run to update the schema between two contiguous versions. Each migration script should be idempotent, meaning that it can be run multiple times without causing any issues. We should also update the base schema to the latest version to support installation the latest version directly.</li> <li>Automatically run the migration scripts when the application starts. For the first installation, we call the base schema script. For upgrading, we check the current version of the schema, and run the migration scripts until the specific version.</li> </ul> <h2 id="how-to-build-shared-or-static-library">How to Build Shared or Static Library?</h2> <p>For shared library, we can use <code class="language-plaintext highlighter-rouge">-fPIC</code> to generate position-independent object code. Then we can use <code class="language-plaintext highlighter-rouge">-shared</code> to generate shared library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Generate position-independent object code</span>
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> a.cpp <span class="nt">-o</span> a.o
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> b.cpp <span class="nt">-o</span> b.o
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> c.cpp <span class="nt">-o</span> c.o
<span class="c"># Generate shared library</span>
g++ <span class="nt">-shared</span> <span class="nt">-o</span> libfoo.so a.o b.o c.o
</code></pre></div></div> <p>After that, you may need to update the environment variable <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> to include the directory where the shared library is located.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/library
</code></pre></div></div> <p>Then you can use <code class="language-plaintext highlighter-rouge">-L</code> and <code class="language-plaintext highlighter-rouge">-l</code> to link the shared library when compiling your program.</p> <p>You may be asking why we need update the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> environment variable even if we have already specified the path to the shared library using <code class="language-plaintext highlighter-rouge">-L</code>. The reason is that the <code class="language-plaintext highlighter-rouge">-L</code> option only specifies the path to the library at compile time, which is used to find the library when linking the program. At runtime, the dynamic linker needs to know where to find the shared library. The <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> environment variable tells the dynamic linker where to look for shared libraries when the program is executed. If the library is not in a standard location (like <code class="language-plaintext highlighter-rouge">/usr/lib</code> or <code class="language-plaintext highlighter-rouge">/usr/local/lib</code>), the dynamic linker will not be able to find it unless you specify the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>.</p> <p>For static library, we can use <code class="language-plaintext highlighter-rouge">ar</code> to archive object files into a static library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ <span class="nt">-c</span> a.cpp <span class="nt">-o</span> a.o
g++ <span class="nt">-c</span> b.cpp <span class="nt">-o</span> b.o
g++ <span class="nt">-c</span> c.cpp <span class="nt">-o</span> c.o
ar rcs libfoo.a a.o b.o c.o
</code></pre></div></div> <p>The options for <code class="language-plaintext highlighter-rouge">ar</code> are as follows:</p> <ul> <li><code class="language-plaintext highlighter-rouge">r</code>: Insert or replace the files in the archive.</li> <li><code class="language-plaintext highlighter-rouge">c</code>: Create the archive if it does not exist.</li> <li><code class="language-plaintext highlighter-rouge">s</code>: Create or update the index for the archive. The index helps the linker find the symbols faster.</li> <li><code class="language-plaintext highlighter-rouge">t</code>: List the contents of the archive.</li> <li><code class="language-plaintext highlighter-rouge">x</code>: Extract files from the archive.</li> <li><code class="language-plaintext highlighter-rouge">d</code>: Delete files from the archive.</li> </ul> <h2 id="what-is-cdns">What is CDNs?</h2> <p>A Content Delivery Network (CDN) is a geographically distributed network of servers that work together to deliver web content (e.g., images, videos, CSS, JavaScript) to users more efficiently. The primary goal is to reduce latency, improve load times, and decrease bandwidth consumption by serving content from servers closest to the end user.</p> <p>The CDN works by caching content on multiple servers located in various geographic locations. When a user requests content, the CDN routes the request to the nearest server, which reduces the distance the data has to travel.</p> <h2 id="what-are-sop-and-cors">What are SOP and CORS?</h2> <p>SOP is an abbreviation for Same-Origin Policy. It is a security measure implemented in web browsers. It restricts web pages from making requests to a different domain than the one that served the web page.</p> <p>This policy is in place to prevent malicious websites from accessing sensitive data from another domain without the user’s consent. For example, if a user is logged into their bank account in one tab, and then visits a malicious website in another tab, the malicious website should not be able to access the user’s bank account information. Therefore, the SOP is for security reasons and protects users from cross-site attacks.</p> <p><strong>NOTE</strong>: If two URLs have the same protocol, domain, and port, then they are considered to have the same origin.</p> <p>However, there are some cases where we need to allow cross-origin requests, such as when we are using APIs from different domains or when we are using CDNs.</p> <p>CORS is an abbreviation for Cross-Origin Resource Sharing. It is a browser mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served. With CORS, the browser will send an <code class="language-plaintext highlighter-rouge">OPTIONS</code> request to the server to check if the server allows cross-origin requests. Then the server will respond with the appropriate headers (such as <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>, <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Methods</code>, <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Headers</code> etc.) to indicate whether the request is allowed or not.</p> <p>From the introduction above, we can figure out that SOP and CORS are only in the browser level. Therefore, we can use reverse proxy to bypass the SOP. For example, we can use <code class="language-plaintext highlighter-rouge">nginx</code> to set up a reverse proxy to forward requests to the target server. This way, the browser will only see the requests going to the same origin.</p> <h2 id="what-is-memory-alignment">What is memory alignment?</h2> <p>Memory alignment refers to the way data is arranged and accessed in memory. For example, the 1-byte data type can be stored at any address, while the 4-byte data type should be stored at an address that is a multiple of 4.</p> <p>In <code class="language-plaintext highlighter-rouge">C/C++</code>, you can not convert pointers of different memory alignment. However, you can convert any types of pointers to <code class="language-plaintext highlighter-rouge">void*</code> or <code class="language-plaintext highlighter-rouge">char*</code> pointers, because they are 1-byte aligned.</p> <p>You can use the <code class="language-plaintext highlighter-rouge">alignof</code> operator in <code class="language-plaintext highlighter-rouge">C++</code> to get the alignment of a type. There is a function that can check if a pointer can be safely cast to a pointer of a different type:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">is_aligned</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">alignment</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">uintptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="o">%</span> <span class="n">alignment</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="n">is_aligned</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">alignof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span> <span class="c1">// Check if ptr is aligned for int</span>
<span class="n">is_aligned</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">alignof</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">));</span> <span class="c1">// Check if ptr is aligned for long long</span>
</code></pre></div></div> <p><strong>NOTE</strong>: even if two pointers are aligned, you can not dereference one pointer to access the data of the other type, unless the deference type is <code class="language-plaintext highlighter-rouge">char</code>, <code class="language-plaintext highlighter-rouge">void</code>, <code class="language-plaintext highlighter-rouge">std::byte</code> or the original type of the data. It is worth noting that <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">unsigned int</code> are considered the same type in this context.</p> <p>In some cases, you may be asked how to implement <code class="language-plaintext highlighter-rouge">memcpy</code> effectively. One common approach is to copy multiple bytes at a time, you may think of trying to convert the <code class="language-plaintext highlighter-rouge">void *</code> to <code class="language-plaintext highlighter-rouge">long long *</code> and copy 8 bytes at a time. Before doing that, you should check if the pointer is aligned for <code class="language-plaintext highlighter-rouge">long long</code> type. If it is not aligned, you can copy the data byte by byte until the pointer is aligned, and then copy the rest of the data in chunks of 8 bytes. <strong>Unfortunately, this approach may cause undefined behavior</strong>.</p> <p>Actually, there are SIMD (Single Instruction, Multiple Data) instructions, with which you can loading and storing data in larger chunks, such as 128 bits or 256 bits. But using SIMD is not portable.</p> <h2 id="what-is-the-process-of-ssltls-handshake">What is the process of SSL/TLS handshake?</h2> <p>RSA key exchange process:</p> <ol> <li>The TLS client sends a <code class="language-plaintext highlighter-rouge">Client Hello</code> message that lists cryptographic information such as the TLS version and, in the client’s order of preference, the Cipher Suites supported by the client. The message also contains a random byte string that is used in subsequent computations.</li> <li>The TLS server responds with a <code class="language-plaintext highlighter-rouge">Server Hello</code> message that contains the Cipher Suite chosen by the server from the list provided by the client, and another random byte string.</li> <li>The server also sends its digital certificate (including the public key) to the client.</li> <li>The server sends a <code class="language-plaintext highlighter-rouge">Server Hello Done</code> message.</li> <li>The TLS client verifies the server’s digital certificate. The TLS client generate another random byte string, then generate a secret key by all the three random byte strings. The client sends the third random string the server, and this package will be encrypted with the public key of the server. This is a <code class="language-plaintext highlighter-rouge">Finished</code> message, indicating that the client part of the handshake is complete.</li> <li>The TLS server can decrypt the <code class="language-plaintext highlighter-rouge">Finished</code> message using its private key. Then it can generate the same secret key using the three random byte strings. The server then sends its own <code class="language-plaintext highlighter-rouge">Finished</code> message, encrypted with the secret key.</li> <li>Now both the client and server have the same secret key, and they can start exchanging application data securely.</li> </ol> <pre><code class="language-txt">+------------+                                      +------------+
| TLS Client |                                      | TLS Server |
+------------+                                      +------------+
       |                                                   |
       | 1. Client Hello                                   |
       |    (Version, Cipher Suites, Random1)              |
       |--------------------------------------------------&gt;|
       |                                                   |
       |                       2. Server Hello             |
       |                          (Chosen Cipher, Random2) |
       |&lt;--------------------------------------------------|
       |                                                   |
       |                            3. Digital Certificate |
       |                               (PubKey)            |
       |&lt;--------------------------------------------------|
       |                                                   |
       |                              4. Server Hello Done |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 5. Verify Cert                                    |
       |    Generate Random3                               |
       |    Derive Secret Key                              |
       |    (Random1 + Random2 + Random3)                  |
       |    Finished                                       |
       |    (Encrypted with Server's PubKey)               |
       |    [Contains Random3]                             |
       |--------------------------------------------------&gt;|
       |                                                   |
       |           6. Decrypt with Private Key             |
       |              Derive Secret Key                    |
       |              (Random1 + Random2 + Random3)        |
       |              Finished (Encrypted with Secret Key) |
       |&lt;--------------------------------------------------|
       |                                                   |
       |      7. Secure Application Data Exchange          |
       |&lt;=================================================&gt;|
       |                                                   |
</code></pre> <p>RSA key exchange is not secure enough, and it has been deprecated in TLS 1.3. The main problem of RSA key exchange is that if the private key of the server is compromised, all past communications can be decrypted. Diffie-Hellman key exchange process can solve this problem, and its process is as follows:</p> <ol> <li>The TLS client sends a <code class="language-plaintext highlighter-rouge">Client Hello</code> message containing Supported TLS version, list of supported Cipher Suites (ordered by client preference) and a random byte string (<code class="language-plaintext highlighter-rouge">Client Random</code>) for later cryptographic operations.</li> <li>The server responds with a <code class="language-plaintext highlighter-rouge">Server Hello</code> message containing, Chosen Cipher Suite from the client’s list, a second random byte string (<code class="language-plaintext highlighter-rouge">Server Random</code>).</li> <li>The server transmits its digital certificate, which includes its long-term public key.</li> <li>The server sends a <code class="language-plaintext highlighter-rouge">Server Key Exchange</code> message with Diffie-Hellman (DH) public parameters: prime modulus <code class="language-plaintext highlighter-rouge">p</code> and generator <code class="language-plaintext highlighter-rouge">g</code>, server’s temporary DH public key (<code class="language-plaintext highlighter-rouge">g^a mod p</code>, where <code class="language-plaintext highlighter-rouge">a</code> is the server’s short-term private exponent). This message is signed with the server’s long-term private key to authenticate the server.</li> <li>The server signals the end of the initial handshake phase.</li> <li>The client verifies the server’s certificate (checks validity, revocation status, and signature). The client generates its own DH key pair: temporary private exponent <code class="language-plaintext highlighter-rouge">b</code> and public key (<code class="language-plaintext highlighter-rouge">g^b mod p</code>). The client computes the pre-master secret as <code class="language-plaintext highlighter-rouge">g^(a*b) mod p</code> (using the server’s public key <code class="language-plaintext highlighter-rouge">g^a</code> and its own private key <code class="language-plaintext highlighter-rouge">b</code>). The client sends a <code class="language-plaintext highlighter-rouge">Client Key Exchange</code> message containing its DH public key (<code class="language-plaintext highlighter-rouge">g^b mod p</code>). The client derives the master secret using <code class="language-plaintext highlighter-rouge">Client Random</code>, <code class="language-plaintext highlighter-rouge">Server Random</code>, and the pre-master secret. The client generates session keys (symmetric encryption keys, HMAC keys, etc.) from the master secret.</li> <li>The client sends a <code class="language-plaintext highlighter-rouge">Finished</code> message that contains a hash of all handshake messages exchanged so far (from <code class="language-plaintext highlighter-rouge">Client Hello</code> to <code class="language-plaintext highlighter-rouge">Client Key Exchange</code>), and is encrypted with the session key (proves the client knows the correct key). This confirms the client’s side of the handshake is complete.</li> <li>The server computes the pre-master secret as <code class="language-plaintext highlighter-rouge">g^(a*b) mod p</code> (using the client’s public key <code class="language-plaintext highlighter-rouge">g^b</code> and its own private key <code class="language-plaintext highlighter-rouge">a</code>), derives the same master secret using <code class="language-plaintext highlighter-rouge">Client Random</code>, <code class="language-plaintext highlighter-rouge">Server Random</code>, and the pre-master secret, generates session keys from the master secret, and sends its own <code class="language-plaintext highlighter-rouge">Finished</code> message which contains a hash of all handshake messages (from <code class="language-plaintext highlighter-rouge">Client Hello</code> to <code class="language-plaintext highlighter-rouge">Server Key Exchange</code>) and is encrypted with the session key (proves the server knows the correct key).</li> <li>Both client and server now share the same session keys. They use these keys to encrypt/decrypt application data, ensuring confidentiality and integrity for all subsequent communication.</li> </ol> <pre><code class="language-txt">+------------+                                      +------------+
| TLS Client |                                      | TLS Server |
+------------+                                      +------------+
       |                                                   |
       | 1. Client Hello                                   |
       |    (TLS Version, Supported Cipher Suites, Random1)|
       |--------------------------------------------------&gt;|
       |                                                   |
       |                       2. Server Hello             |
       |                     (Chosen Cipher Suite, Random2)|
       |&lt;--------------------------------------------------|
       |                                                   |
       |                            3. Digital Certificate |
       |                              (Server's Public Key)|
       |&lt;--------------------------------------------------|
       |                                                   |
       |               4. Server Key Exchange              |
       |                 (DH Public Params: p, g, g^a)     |
       |       [Signed with Server's Long-Term Private Key]|
       |&lt;--------------------------------------------------|
       |                                                   |
       |                              5. Server Hello Done |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 6. Client Actions:                                |
       |    - Verify Server Certificate                    |
       |    - Generate DH Key Pair (g^b mod p)             |
       |    - Compute Pre-Master Secret: g^(a*b) mod p     |
       |    - Derive Master Secret                         |
       |    - Generate Session Keys (from Master Secret)   |
       |    - Client Key Exchange: Send g^b mod p          |
       |--------------------------------------------------&gt;|
       |                                                   |
       | 7. Server Actions:                                |
       |    - Compute Pre-Master Secret: g^(a*b) mod p     |
       |    - Derive Master Secret                         |
       |    - Generate Session Keys (from Master Secret)   |
       |    - Verify Client's Finished Message             |
       |    - Send Finished Message                        |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 8. Client Actions:                                |
       |    - Verify Server's Finished Message             |
       |                                                   |
       | 9. Secure Application Data Exchange (Session Key) |
       |&lt;=================================================&gt;|
       |                                                   |
</code></pre> <h2 id="what-does--do-in-bash">What does <code class="language-plaintext highlighter-rouge">:(){:|:&amp;};:</code> do in Bash?</h2> <p>For better understanding, we can substitute the colon <code class="language-plaintext highlighter-rouge">:</code> with a more descriptive name, such as <code class="language-plaintext highlighter-rouge">forkbomb</code> and format it as follows:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>forkbomb<span class="o">()</span> <span class="o">{</span>
    forkbomb | forkbomb &amp;
<span class="o">}</span><span class="p">;</span>
forkbomb
</code></pre></div></div> <p>From the above code, it is clear that the function <code class="language-plaintext highlighter-rouge">forkbomb</code> calls itself twice and runs in the background. This will create an infinite number of processes, eventually consuming all system resources and causing the system to become unresponsive.</p> <h2 id="what-are-debounce-and-throttle">What are debounce and throttle?</h2> <p>Debounce and throttle are techniques used to control the rate at which a function is executed, especially in response to events like scrolling, resizing, or key presses.</p> <ul> <li><strong>Debounce</strong>: This technique ensures that a function is only executed after a certain period of time, and every time the event is triggered, the timer is reset.</li> <li><strong>Throttle</strong>: This technique ensures that a function is executed at most once within a specified time interval, regardless of how many times the event is triggered.</li> </ul> <p>Debounce is useful for scenarios where you want to wait until the user has stopped performing an action, such as typing in a search box or resizing a window.</p> <p>Throttle is useful for scenarios where you want to limit the frequency of function execution, such as handling scroll events or API requests.</p> <h2 id="what-is-orm">What is ORM?</h2> <p>ORM stands for Object-Relational Mapping, which is a programming technique that allows developers to interact with a relational database using object-oriented programming languages.</p> <h2 id="how-to-read-pointers-in-cc">How to read pointers in C/C++?</h2> <p>The most common and easy way to read pointers in <code class="language-plaintext highlighter-rouge">C/C++</code> is the Right-Left Rule. The Right-Left Rule states that you should start at the identifier, move right when possible, then left, and repeat. During each step, you should stop when you reach a parenthesis.</p> <p>For example, we can use it to tell apart <code class="language-plaintext highlighter-rouge">const char * p1</code>, <code class="language-plaintext highlighter-rouge">char const * p2</code>, <code class="language-plaintext highlighter-rouge">char * const p3</code>, <code class="language-plaintext highlighter-rouge">const char * const p4</code> and <code class="language-plaintext highlighter-rouge">const * char p5</code>:</p> <p>For <code class="language-plaintext highlighter-rouge">const char * p1</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p1</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p1</code> is a pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p1</code> is a pointer to a <code class="language-plaintext highlighter-rouge">const char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">char const * p2</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p2</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p2</code> is a pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p2</code> is a pointer to a <code class="language-plaintext highlighter-rouge">char const</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">char * const p3</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p3</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is constant.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is a constant pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is a constant pointer to a <code class="language-plaintext highlighter-rouge">char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">const char * const p4</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p4</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is constant.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is a constant pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is a constant pointer to a <code class="language-plaintext highlighter-rouge">const char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">const * char p5</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p5</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p5</code> is a <code class="language-plaintext highlighter-rouge">char</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p5</code> is a pointer to something. Error occurs, <code class="language-plaintext highlighter-rouge">p5</code> can not be a pointer and a <code class="language-plaintext highlighter-rouge">char</code> at the same time. Therefore, this is not a valid declaration.</li> </ol> <p>There are some complicated examples you can try to practice the Right-Left Rule:</p> <ul> <li><code class="language-plaintext highlighter-rouge">int (*(*foo)(int))[5]</code></li> <li><code class="language-plaintext highlighter-rouge">int (*(*foo)(int, int))(int, int)</code></li> </ul> <p>I’ll explain <code class="language-plaintext highlighter-rouge">int (*(*foo)(int))[5]</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">foo</code>.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">)</code> so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to something.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">(int)</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to something.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">[5]</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to an array of 5 elements.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">int</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to an array of 5 <code class="language-plaintext highlighter-rouge">int</code> elements.</li> </ol> <h2 id="what-are-big-endian-and-little-endian">What are Big Endian and Little Endian?</h2> <p>Endianness refers to the order in which bytes are stored in memory.</p> <ul> <li><strong>Big Endian</strong>: The most significant byte (MSB) is stored at the lowest memory address. For example, the number <code class="language-plaintext highlighter-rouge">0x12345678</code> would be stored as <code class="language-plaintext highlighter-rouge">12 34 56 78</code>.</li> <li><strong>Little Endian</strong>: The least significant byte (LSB) is stored at the lowest memory address. For example, the number <code class="language-plaintext highlighter-rouge">0x12345678</code> would be stored as <code class="language-plaintext highlighter-rouge">78 56 34 12</code>.</li> </ul> <p><strong>NOTE</strong>: In networking protocols, big-endian is often referred to as “network byte order”.</p> <h2 id="what-is-the-p0-test">What is the P0 Test?</h2> <p>The P0 test, also known as the “P0 test case” or “P0 test scenario,” is a type of software testing that focuses on the most critical and high-priority functionalities of a software application.</p> <p>The P0 stands Priority 0, which means that these test cases are of the highest priority and must be executed first. The goal of P0 testing is to ensure that the core functionalities of the application are working correctly before moving on to lower-priority test cases.</p> <p>Similar to P0, there are also P1, P2, and P3 tests, which represent lower priority test cases.</p> <h2 id="what-is-the-gray-release">What is the Gray Release?</h2> <p>A gray release is a software deployment strategy that allows for gradual rollout of new features or changes to a subset of users before a full release. This approach helps to minimize risks and allows for real-world testing of new features in a controlled manner.</p> <h2 id="what-is-the-saas">What is the SaaS?</h2> <p>SasS stands for Software as a Service. It is a software distribution model where applications are hosted in the cloud and made available to users over the internet. SaaS eliminates the need for users to install and maintain software on their local devices, as the software is accessed through a web browser or an application interface.</p> <h2 id="what-is-cgi">What is CGI?</h2> <p>CGI stands for Common Gateway Interface. It is a standard protocol that allows web servers to execute external programs or scripts to generate dynamic content for web pages. CGI scripts can be written in various programming languages, such as Perl, Python, or C. When a user requests a web page that requires dynamic content, the web server invokes the CGI script, which processes the request and generates the response.</p> <h2 id="what-is-the-turning-completeness">What is the Turning Completeness?</h2> <p>Turning Completeness is a concept in computer science that refers to the ability of a computational system to perform any computation that can be expressed algorithmically. A system is considered Turing complete if it can simulate a Turing machine, which is a theoretical model of computation that can perform any calculation that can be described by an algorithm.</p> <h2 id="what-is-socket-programming">What is socket programming?</h2> <p>Socket programming is a way to enable communication between two computers over a network. Actually, socket is a group of APIs that provided by the operating system to enable network communication. With these APIs, we can:</p> <ol> <li>Create a socket: <code class="language-plaintext highlighter-rouge">socket()</code></li> <li>Bind the socket to an IP address and port: <code class="language-plaintext highlighter-rouge">bind()</code></li> <li>Listen for incoming connections: <code class="language-plaintext highlighter-rouge">listen()</code></li> <li>Accept incoming connections: <code class="language-plaintext highlighter-rouge">accept()</code></li> <li>Send and receive data: <code class="language-plaintext highlighter-rouge">send()</code>, <code class="language-plaintext highlighter-rouge">recv()</code></li> </ol> <p>For clients, we can use <code class="language-plaintext highlighter-rouge">connect()</code> to connect to a server, and then use <code class="language-plaintext highlighter-rouge">send()</code> and <code class="language-plaintext highlighter-rouge">recv()</code> to communicate.</p> <h2 id="what-is-sticky-packet-problem-how-to-solve-it">What is sticky packet problem? How to solve it?</h2> <p>The sticky packet problem occurs in TCP communication when multiple messages are sent in quick succession, and the receiver cannot distinguish where one message ends and the next begins. This can lead to data being “stuck” together in a single read operation, making it difficult to parse the individual messages.</p> <p>To solve the sticky packet problem, we can use the following methods:</p> <ol> <li><strong>Fixed-Length Messages</strong>: Define a fixed length for each message. The receiver reads exactly that many bytes for each message.</li> <li><strong>Delimiter-Based Messages</strong>: Use a special character or sequence of characters to indicate the end of a message.</li> <li><strong>Length-Prefixed Messages</strong>: Prepend each message with a fixed-size header that specifies the length of the message.</li> <li><strong>Application-Level Protocols</strong>: Use established protocols like HTTP or WebSocket that have built-in mechanisms for message framing.</li> </ol> <p>Why sticky package problem not occur in UDP?</p> <blockquote> <p>UDP is a connectionless protocol that sends messages, called datagrams, without establishing a connection between the sender and receiver. Each datagram is sent independently and contains all the necessary information (such as source and destination addresses) to be routed through the network. Because of this, each UDP datagram is treated as a separate entity, and there is no concept of a continuous stream of data like in TCP. Therefore, the sticky packet problem does not occur in UDP, as each datagram is received in its entirety and can be processed independently.</p> </blockquote> <h2 id="what-is-tcp-three-way-handshake-why-three-way">What is TCP three-way handshake? Why three-way?</h2> <p>The TCP three-way handshake is a process used to establish a reliable connection between a client and a server over a TCP/IP network. The three-way handshake involves three steps:</p> <ol> <li><strong>SYN</strong>: The client sends a TCP segment with the SYN (synchronize) flag set to the server, indicating that it wants to establish a connection.</li> <li><strong>SYN-ACK</strong>: The server responds with a TCP segment that has both the SYN and ACK (acknowledge) flags set. The SYN flag indicates that the server is willing to establish a connection, and the ACK flag acknowledges the client’s initial SYN request.</li> <li><strong>ACK</strong>: The client sends a final TCP segment with the ACK flag set, acknowledging the server’s SYN-ACK response. At this point, the connection is established, and data can be exchanged between the client and server.</li> </ol> <p>The reason for using a three-way handshake instead of a two-way handshake is to ensure that both the client and server are ready to communicate and to prevent certain types of attacks, such as SYN flooding.</p> <p>In a two-way handshake, the client would send a SYN request, and the server would respond with a SYN-ACK. However, if the SYN-ACK response is lost or delayed, the client will try to resend the SYN request, potentially leading to multiple connections being established.</p> <p>In a four-way handshake, the last handshake is redundant, as the three-way handshake already ensures that both parties are ready to communicate:</p> <ul> <li>For the first handshake, the client indicates that it wants to communicate.</li> <li>For the second handshake, the server indicates that it is ready to communicate. And this also ensure that the server can receive data from the client.</li> <li>For the third handshake, the client let the server know that “I know you are ready.” And this also ensure that the client can receive data from the server.</li> </ul> <h2 id="what-is-acid-how-to-achieve-it">What is ACID? How to achieve it?</h2> <ul> <li><strong>Atomicity</strong>: The transaction is all-or-nothing. This can be achieved using undo logs to roll back changes if a transaction fails.</li> <li><strong>Consistency</strong>: The transaction brings the database from one valid state to another. This can be achieved using constraints, triggers, and application logic.</li> <li><strong>Isolation</strong>: The transaction is isolated from other transactions. This can be achieved using locking mechanisms and isolation levels.</li> <li><strong>Durability</strong>: Once a transaction is committed, its changes persist permanently even after system failures. This can be achieved using redo logs.</li> </ul> <h2 id="what-are-isolation-levels-in-databases">What are isolation levels in databases?</h2> <p>Before introducing isolation levels, we need to understand the following phenomena:</p> <ul> <li><strong>Dirty Read</strong>: A transaction reads uncommitted data from another transaction.</li> <li><strong>Non-Repeatable Read</strong>: A transaction reads the same data multiple times, but gets different results because another transaction modified/deleted it.</li> <li><strong>Phantom Read</strong>: A transaction re-runs a range query and gets new rows inserted by another committed transaction.</li> <li><strong>Serialization Anomaly</strong>: The result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time.</li> <li><strong>Lost Update</strong>: Two transactions read the same data and modify it, but one transaction’s changes are lost due to the other transaction’s changes</li> </ul> <p>Isolation levels define the degree to which a transaction must be isolated from the data modifications made by other transactions. The standard isolation levels defined by the SQL standard are:</p> <table> <thead> <tr> <th>Isolation Level</th> <th>Dirty Read</th> <th>Non-Repeatable Read</th> <th>Phantom Read</th> <th>Serialization Anomaly</th> <th>Lost Update</th> </tr> </thead> <tbody> <tr> <td>Read Uncommitted</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Read Committed</td> <td>Not Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Repeatable Read</td> <td>Not Possible</td> <td>Not Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Serializable</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> </tr> </tbody> </table> <h2 id="how-to-implement-isolation-levels-in-databases">How to implement isolation levels in databases?</h2> <p>Before we start, we need to understand the following concepts:</p> <ul> <li><strong>Shared Lock</strong>: Also known as read lock and S-lock. It can be acquired when no other transaction holds a write lock on the same data.</li> <li><strong>Exclusive Lock</strong>: Also known as write lock and X-lock. It can be acquired when no other transaction holds a shared or write lock on the same data.</li> </ul> <p>For <code class="language-plaintext highlighter-rouge">Read Uncommited</code>, we can use First-Level Locking (1LL). 1LL means that a transaction must acquire an X-lock before modifying data, and release the X-lock after the transaction is committed or rolled back.</p> <p>For <code class="language-plaintext highlighter-rouge">Read Committed</code>, we can use Second-Level Locking (2LL). 2LL means that based on 1PL, a transaction must acquire an S-lock before reading data, and release the S-lock immediately after reading the data.</p> <p>For <code class="language-plaintext highlighter-rouge">Repeatable Read</code>, we can use Third-Level Locking (3LL). 3LL means that based on 2PL, a transaction must hold the S-lock until the transaction is committed or rolled back.</p> <p><strong>NOTE</strong>: 3LL can not prevent phantom reads, because transactions only hold locks for existing data items. For example, if a transaction reads a range of data items another transaction inserts a new data item then commits, and after that the first transaction may read the new data item.</p> <p>For <code class="language-plaintext highlighter-rouge">Serializable</code>, we can use Two-Phase Locking (2PL). The core idea of the 2PL is that transactions must follow two strict phases for lock management:</p> <ul> <li>Growing Phase: In this phase, a transaction can acquire locks but cannot release any locks.</li> <li>Shrinking Phase: In this phase, a transaction can release locks but cannot acquire any new locks.</li> </ul> <p>There are some variants of the two-phase locking protocol:</p> <ul> <li>Conservative Two-Phase Locking: In this variant, a transaction must acquire all locks (at one time) before it starts executing. This can prevent deadlocks.</li> <li>Strict Two-Phase Locking: In this variant, a transaction must hold X-locks until it commits or rolls back.</li> <li>Rigorous Two-Phase Locking: In this variant, a transaction must hold all locks until it commits or rolls back.</li> </ul> <p><strong>NOTE</strong>: With only 2PL, it can only ensure that the result of multiple transactions is equivalent to some serial execution of those transactions. It may not prevent dirty reads, non-repeatable reads, phantom reads, and lost updates. To prevent these phenomena, we need to use other techniques together with 2PL.</p> <h2 id="can-tcp-and-udp-bind-to-the-same-port-can-client-use-the-same-port-to-send-date-to-different-servers-with-tcpudp">Can TCP and UDP bind to the same port? Can client use the same port to send date to different servers with TCP/UDP?</h2> <p>The answer to both questions is yes. For the first question, TCP and UDP are two different protocols, the OS can distinguish them easily. For the second question, the TCP/UDP socket is identified by a 4-tuple: (source IP, source port, destination IP, destination port). As long as the 4-tuple is different, the OS can distinguish them easily.</p> <h2 id="references">References</h2> <ul> <li><a href="https://www.ibm.com/docs/en/ibm-mq/9.3.x?topic=tls-overview-ssltls-handshake">An overview of the SSL/TLS handshake</a></li> <li><a href="https://www.kaidohussar.dev/posts/debounce-vs-throttle">Debounce vs throttle</a></li> <li><a href="https://www.linkedin.com/pulse/streamlining-test-case-execution-understanding-p0-p4-sai-teja-vuthuri-ywvoc">Streamlining Test Case Execution: Understanding P0 to P4 Prioritization</a></li> </ul>]]></content><author><name></name></author><category term="Potpourri"/><summary type="html"><![CDATA[Some questions that I have encountered in my work.]]></summary></entry></feed>