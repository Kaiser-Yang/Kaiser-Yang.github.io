<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kaiser-yang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kaiser-yang.github.io/" rel="alternate" type="text/html" hreflang="zh"/><updated>2025-10-13T14:37:20+00:00</updated><id>https://kaiser-yang.github.io/feed.xml</id><title type="html">Kaiser’s Homepage</title><subtitle>Sharing everything I know. </subtitle><entry><title type="html">Miller Rabin 素数测试</title><link href="https://kaiser-yang.github.io/blog/2025/miller-rabin/" rel="alternate" type="text/html" title="Miller Rabin 素数测试"/><published>2025-10-13T13:11:22+00:00</published><updated>2025-10-13T13:11:22+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/miller-rabin</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/miller-rabin/"><![CDATA[<h2 id="前置知识">前置知识</h2> <h3 id="费马小定理fermats-little-theorem">费马小定理（Fermat’s Little Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(a\) 不是 \(p\) 的倍数， 则 \(a^{p-1} \equiv 1 \mod p\)。</p> <h3 id="二次探测定理quadratic-residue-theorem">二次探测定理（Quadratic Residue Theorem）</h3> <p>如果 \(p\) 是一个素数，且 \(x^2 \equiv 1 \mod p\)， 则 \(x \equiv 1 \mod p\) 或 \(x \equiv -1 \mod p\)。</p> <h2 id="miller-rabin-素数测试原理">Miller Rabin 素数测试原理</h2> <p>我们可以发现，费马小定理和二次探测定理都给出了素数的必要条件， 但并不是充分条件。也就是说，如果一个数不满足这些条件， 那么它一定不是素数。</p> <p>Miller Rabin 素数测试是一种基于概率的素数测试算法， 它通过多次随机选择基数 \(a\) 来验证一个数是否为素数。</p> <p>对于一个奇数 \(n\) 而言其可以被写成 \(n - 1 = 2^s \cdot d\) 的形式， 其中 \(d\) 是奇数，\(s \geq 1\)。 根据费马小定理，如果 \(n\) 是素数， 则对于任意 \(a\)，都有 \(a^{2^s \cdot d} \equiv 1 \mod n\)。 而由二次探测定理可知，我们可以对 \(a^{2^s \cdot d} \equiv 1 \mod n\) 执行开方的操作，其结果一定要是 \(1\) 或 \(n - 1\)。 同时当其结果为 \(1\) 时，且当前还可以进行开方操作时， 则继续进行开方操作，直到结果为 \(n - 1\) 或无法继续开方为止。 如果在某次开方的过程中，结果既不是 \(1\) 也不是 \(n - 1\)， 则 \(n\) 一定不是素数。</p> <p>根据上面的流程我们可以选择多个不同的 \(a\) 来进行测试， 如果所有的测试都通过了，则 \(n\) 很可能是素数。</p> <p>特别地，对于64位无符号整数，选择 \(2, 325, 9375, 28178, 450775, 9780504, 1795265022\) 可以保证不会出现伪素数。</p> <p>另外在实现的过程中，我们往往不会进行开方的操作，取而代之的是平方操作：</p> <ol> <li>将待测试的数 \(n\) 表示为 \(n - 1 = 2^s \cdot d\)，其中 \(d\) 是奇数，\(s \geq 1\)。</li> <li>选择一个基数 \(a\)。</li> <li>计算 \(x = a^d \mod n\)。</li> <li>如果 \(x \equiv 1 \mod n\) 或 \(x \equiv n - 1 \mod n\)，此时进行平方的结果一定是 \(1\)， 所以可以直接认为通过本轮的测试。</li> <li>否则，重复以下步骤 \(s - 1\) 次： <ul> <li>计算 \(x \leftarrow x^2 \mod n\)。</li> <li>如果 \(x \equiv n - 1 \mod n\)，则通过本轮测试。</li> </ul> </li> <li>如果所有测试都未通过，则 \(n\) 不是素数。</li> </ol> <p>在上述过程的5中，我们只检查了结果是否等于 \(n - 1\)，而没有检查结果是否等于 \(1\)。 这是因为如果当前的结果第一次等于 \(1\)，则说明在前一次平方操作中， 结果既不是 \(1\) 也不是 \(n - 1\)，这就违背了二次探测定理。</p> <p>最后给出Miller Rabin素数测试的代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/template/miller_rabin.cpp">Miller Rabin</a>。</p>]]></content><author><name></name></author><category term="Algorithm"/><category term="Algorithms"/><category term="Miller Rabin"/><summary type="html"><![CDATA[本文介绍 Miller Rabin 素数测试的原理及其实现方式。]]></summary></entry><entry><title type="html">The Brief Introduction of Git</title><link href="https://kaiser-yang.github.io/blog/2025/git-base/" rel="alternate" type="text/html" title="The Brief Introduction of Git"/><published>2025-06-22T19:38:50+00:00</published><updated>2025-06-22T19:38:50+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/git-base</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/git-base/"><![CDATA[<h2 id="the-importance-of-version-control">The importance of Version Control</h2> <details> <summary>The answer from copilot</summary> <p> Version control is important because it helps individuals and teams manage changes to code, documents, or other digital assets over time. Here are some key reasons why version control is essential: </p> <ul> <li> Track Changes: It records every modification made to files, allowing you to see what was changed, when, and by whom. </li> <li> Collaboration: Multiple people can work on the same project simultaneously without overwriting each other's work. Version control systems help merge changes from different contributors. </li> <li> Revert Changes: If a mistake is made, you can easily revert files or entire projects back to a previous state. </li> <li> Branching and Experimentation: You can create branches to try out new features or ideas without affecting the main codebase. If the experiment fails, simply discard the branch. </li> <li> Accountability: With a detailed history of changes, it's easier to understand the reasoning behind specific updates and hold contributors accountable. </li> <li> Backup: Version control acts as a backup system, protecting against data loss in case of accidental deletions or hardware failures. </li> <li> Release Management: It helps in managing releases, hotfixes, and updates by tagging and keeping track of different versions of the project. </li> </ul> <p> In summary: Version control provides a structured and reliable way to manage projects, improve collaboration, and safeguard your work. It’s a fundamental tool in modern software development and many other digital workflows. </p> </details> <h2 id="gitignore"><code class="language-plaintext highlighter-rouge">.gitignore</code></h2> <p>You can use <code class="language-plaintext highlighter-rouge">.gitignore</code> to specify files or directories that do not need to be tracked by <code class="language-plaintext highlighter-rouge">git</code>.</p> <p>Most wildcards in <code class="language-plaintext highlighter-rouge">.gitignore</code> are similar to those in <code class="language-plaintext highlighter-rouge">bash</code>. Check <a href="#wildcards-in-linux">Wildcards in Linux</a> for more information about <code class="language-plaintext highlighter-rouge">wildcards</code>.</p> <p>By default, the items in <code class="language-plaintext highlighter-rouge">.gitignore</code> will be ignored recursively. If you don’t want to ignore recursively, you can add <code class="language-plaintext highlighter-rouge">/</code> before the item to indicate that it only takes effect in the current directory. For example, <code class="language-plaintext highlighter-rouge">/foo</code> means to ignore only the <code class="language-plaintext highlighter-rouge">foo</code> file or directory in the current directory, while <code class="language-plaintext highlighter-rouge">foo</code> means to ignore all <code class="language-plaintext highlighter-rouge">foo</code> files or directories.</p> <p>By default, the items in <code class="language-plaintext highlighter-rouge">.gitignore</code> match both directories and files. If you only want to match directories, you can add <code class="language-plaintext highlighter-rouge">/</code> at the end of the item to indicate that it only matches directories. For example, <code class="language-plaintext highlighter-rouge">foo/</code> means to match only the directory <code class="language-plaintext highlighter-rouge">foo</code>, while <code class="language-plaintext highlighter-rouge">foo</code> means to match all <code class="language-plaintext highlighter-rouge">foo</code> files or directories.</p> <p>You can configure the ignore rules in <code class="language-plaintext highlighter-rouge">~/.config/git/ignore</code> to ignore files globally.</p> <p>There can be a <code class="language-plaintext highlighter-rouge">.gitignore</code> file in any directory in a repository, and this file will take effect on files and directories in the current directory. The priority of <code class="language-plaintext highlighter-rouge">.gitignore</code> files is from subdirectory to parent directory, and the global ignore file has the lowest priority.</p>]]></content><author><name></name></author><category term="Potpourri"/><category term="Git"/><category term="Version Control"/><summary type="html"><![CDATA[The importance of Version Control]]></summary></entry><entry><title type="html">Cradle to Grave Devotion: Objective C Notes</title><link href="https://kaiser-yang.github.io/blog/2025/oc-notes/" rel="alternate" type="text/html" title="Cradle to Grave Devotion: Objective C Notes"/><published>2025-06-18T11:57:02+00:00</published><updated>2025-06-18T11:57:02+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/oc-notes</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/oc-notes/"><![CDATA[<h2 id="property"><code class="language-plaintext highlighter-rouge">@property</code></h2> <p>In Objective C, <code class="language-plaintext highlighter-rouge">@property</code> is used to declare properties in a class. It is a way to define instance variables (ivars) and their associated getter and setter methods. You can use <code class="language-plaintext highlighter-rouge">@property</code> to declare properties in the interface section of a class.</p> <p>Here is an example of how to declare a property:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">age</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>You can also specify attributes for the property.</p> <p>Here are some common attributes for memory management. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">strong</code> (default): This means that the property retains a strong reference to the object.</li> <li><code class="language-plaintext highlighter-rouge">weak</code>: This means that the property does not retain the object and allows it to be deallocated if there are no strong references to it.</li> <li><code class="language-plaintext highlighter-rouge">assign</code>: This means that the property does not retain the object and simply assigns it. This one is usually used for primitive types like <code class="language-plaintext highlighter-rouge">NSInteger</code>, <code class="language-plaintext highlighter-rouge">CGFloat</code>, etc.</li> <li><code class="language-plaintext highlighter-rouge">copy</code>: This means that the property creates a copy of the object when it is assigned.</li> <li><code class="language-plaintext highlighter-rouge">retain</code>: This is similar to <code class="language-plaintext highlighter-rouge">strong</code>, but it is used in manual reference counting (MRC) instead of automatic reference counting (ARC). Deprecated in ARC.</li> </ul> <p>Here are some common attributes for thread safety and access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">atomic</code> (default): This means that the property is thread-safe and uses atomic access.</li> <li><code class="language-plaintext highlighter-rouge">nonatomic</code>: This means that the property is not thread-safe and does not use atomic access.</li> </ul> <p>Here are some common attributes for access control. Note that you can only use one of these attributes at a time:</p> <ul> <li><code class="language-plaintext highlighter-rouge">readwrite</code> (default): This means that the property can be both read and written to.</li> <li><code class="language-plaintext highlighter-rouge">readonly</code>: This means that the property can only be read and not written to.</li> </ul> <p>Other attributes you can use with <code class="language-plaintext highlighter-rouge">@property</code> include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">getter=</code>: This allows you to specify a custom getter method name.</li> <li><code class="language-plaintext highlighter-rouge">setter=</code>: This allows you to specify a custom setter method name.</li> </ul> <p>These below are some attributes that just used for documentation and do not affect the behavior of the property unless you implement the methods yourself:</p> <ul> <li><code class="language-plaintext highlighter-rouge">nullable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">nonnull</code>: This indicates that the property cannot be <code class="language-plaintext highlighter-rouge">nil</code>.</li> <li><code class="language-plaintext highlighter-rouge">null_resettable</code>: This indicates that the property can be <code class="language-plaintext highlighter-rouge">nil</code> and will be reset to a default value when it is set to <code class="language-plaintext highlighter-rouge">nil</code>.</li> </ul> <p>For <code class="language-plaintext highlighter-rouge">@property</code>, you can access the property using dot notation and when you access the property with dot notation, the compiler will automatically call the getter or setter method for you.</p> <h2 id="categories-of-objective-c">Categories of Objective C</h2> <p>There is a very interesting syntax in Objective C: the category.</p> <p>A category is a way to add methods to an existing class without modifying the original class.</p> <p>To use a category, you first need to define it in a header file (<code class="language-plaintext highlighter-rouge">.h</code> file) and then implement it in an implementation file (<code class="language-plaintext highlighter-rouge">.m</code> file or <code class="language-plaintext highlighter-rouge">.mm</code> file).</p> <p>Here is an example of a category that extends the <code class="language-plaintext highlighter-rouge">NSString</code> class to add a method that reverses a string:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NSString+Reverse.h</span>
<span class="cp">#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// NSString+Reverse.m</span>
<span class="cp">#import "NSString+Reverse.h"
</span><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="p">(</span><span class="nl">Reverse</span><span class="p">)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">reversedString</span> <span class="p">{</span>
    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nf">stringWithCapacity</span><span class="p">:[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">length</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">reversed</span> <span class="nf">appendFormat</span><span class="p">:</span><span class="s">@"%C"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nf">characterAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">]];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">reversed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We usually name the files with the format <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.h</code> and <code class="language-plaintext highlighter-rouge">ClassName+CategoryName.m</code>. With these files, now you can use the <code class="language-plaintext highlighter-rouge">reversedString</code> method on any <code class="language-plaintext highlighter-rouge">NSString</code> object:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// import the category header file</span>
<span class="cp">#import "NSString+Reverse.h"
</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">original</span> <span class="o">=</span> <span class="s">@"Hello, World!"</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="p">[</span><span class="n">original</span> <span class="nf">reversedString</span><span class="p">];</span>
</code></pre></div></div> <p>Of course, you can also add class methods (<code class="language-plaintext highlighter-rouge">+</code> methods) to a category. But note that you cannot add new properties to a category, and you cannot access the ivars (instance variables) of the original class directly.</p> <p>You can define multiple categories for the same class, but be careful to avoid method name conflicts.</p> <p>You can also use the methods defined in a category in another category, and you just need to import the category header file in the implementation file of the other category.</p> <h2 id="class-extensions">Class Extensions</h2> <p>Class extensions are also called anonymous categories.</p> <p>Unlike normal categories, class extensions are defined and implemented in implementation files, and usually used to add private methods or properties to a class.</p> <p>Here is an example of a class extension:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Person.mm</span>
<span class="cp">#import "Person.h"
#import &lt;Foundation/Foundation.h&gt;
</span><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">privateProperty</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">privateMethod</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"This is a private method."</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">privateProperty</code> and <code class="language-plaintext highlighter-rouge">privateMethod</code> are only accessible within the <code class="language-plaintext highlighter-rouge">Person</code> class.</p> <p>Actually, you can still access the private methods from outside the class using <code class="language-plaintext highlighter-rouge">performSelector</code>. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">privateMethod</span><span class="p">)];</span>
<span class="c1">// With parameters, but only support at most two parameters</span>
<span class="p">[</span><span class="n">person</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nf">privateMethod</span><span class="p">:</span><span class="n">withArg</span><span class="o">:</span><span class="p">)</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg1"</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"arg2"</span><span class="p">];</span>
</code></pre></div></div> <h2 id="protocols">Protocols</h2> <p>Protocols in Objective C are similar to interfaces in other languages. They define a set of methods that a class can implement.</p> <p>You can use <code class="language-plaintext highlighter-rouge">@protocol</code> to define a protocol, and then use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code> to specify whether the methods are optional or required. The default is <code class="language-plaintext highlighter-rouge">@required</code>. And when you use <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>, all the methods following it will be optional or required until the end of the protocol or the next <code class="language-plaintext highlighter-rouge">@optional</code> or <code class="language-plaintext highlighter-rouge">@required</code>.</p> <p>Here is an example of a protocol:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span>
<span class="err">@required</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherRequiredMethod</span><span class="p">;</span>
<span class="k">@optional</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">optionalMethod</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">anotherOptionalMethod</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>To declare a class that conforms to a protocol, you can use the <code class="language-plaintext highlighter-rouge">&lt;ProtocolName&gt;</code> syntax in the class declaration. If the class implements more than one protocol, you can separate them with commas.</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="p">,</span> <span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When a class conforms to a protocol, it must implement all the required methods of the protocol. If it does not implement all the required methods, the compiler will generate a warning or error.</p> <p>And you can specify that a property conforms to protocols, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span>
<span class="c1">// We use 'id' for properties that conform to protocols</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span> <span class="n">myProperty</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div> <p>For optional methods, you may want to check if the object responds to the method before calling it, using <code class="language-plaintext highlighter-rouge">respondsToSelector:</code>:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">([</span><span class="n">myObject</span> <span class="nf">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">optionalMethod</span><span class="p">)])</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">myObject</span> <span class="nf">optionalMethod</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>It is possible to declare a protocol conforming to another protocol, like this:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">MyProtocol</span> <span class="o">&lt;</span><span class="n">AnotherProtocol</span><span class="o">&gt;</span>
<span class="c1">// We just declare that 'MyProtocol' conforms to 'AnotherProtocol'</span>
<span class="c1">// and we don't need to implement any methods here.</span>
<span class="k">@end</span>
</code></pre></div></div> <p>When you declare a class that conforms to a protocol, you must implement all the required methods of the protocol. For example:</p> <div class="language-objective-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In the .h file</span>
<span class="k">@interface</span> <span class="nc">MyClass</span> <span class="o">&lt;</span><span class="n">MyProtocol</span><span class="o">&gt;</span>
<span class="k">@end</span>

<span class="c1">// In the .m file</span>
<span class="k">@implementation</span> <span class="nc">MyClass</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">requiredMethod</span> <span class="p">{</span>
    <span class="c1">// Implementation of the required method</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Potpourri"/><category term="Objective C"/><summary type="html"><![CDATA[This post includes some notes on Objective C.]]></summary></entry><entry><title type="html">gcs-front-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/" rel="alternate" type="text/html" title="gcs-front-end Development"/><published>2025-06-05T01:26:27+00:00</published><updated>2025-06-05T01:26:27+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-front-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-front-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-front-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Code and test.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone https://github.com/CMIPT/gcs-front-end.git
<span class="c"># or with SSH</span>
git clone git@github.com:CMIPT/gcs-front-end.git
</code></pre></div></div> <h2 id="code-and-test">Code and Test</h2> <p>You may need to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> first, so that you can request APIs from the front-end.</p> <p>We recommend you to use the <code class="language-plaintext highlighter-rouge">docker-compose</code> to deploy the <code class="language-plaintext highlighter-rouge">gcs-back-end</code>, those below are required:</p> <ul> <li><code class="language-plaintext highlighter-rouge">docker</code></li> <li><code class="language-plaintext highlighter-rouge">docker-compose</code></li> <li><code class="language-plaintext highlighter-rouge">openssl</code></li> </ul> <p>First, you should download the latest release from <a href="https://github.com/CMIPT/gcs-back-end/releases">gcs-back-end</a>.</p> <p>The downloaded file is a compressed file named <code class="language-plaintext highlighter-rouge">gcs-back-end.tar.gz</code>, which contains the compiled <code class="language-plaintext highlighter-rouge">jar</code> package, and related configuration files.</p> <p>The directory structure is as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── .env
├── 3rdparty
├── Dockerfile
├── database
├── docker-compose.yml
├── nginx
├── start.sh
├── target
</code></pre></div></div> <p>Then you need to do some configurations for the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the port you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories.</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>You can generate the <code class="language-plaintext highlighter-rouge">ssl</code> certificate by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 36500 <span class="nt">-newkey</span> rsa:2048 <span class="se">\</span>
  <span class="nt">-keyout</span> nginx/ssl/private.key <span class="nt">-out</span> nginx/ssl/certificate.crt
</code></pre></div></div> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>After this, the <code class="language-plaintext highlighter-rouge">gcs</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>Once the service is running (you can check the status by running <code class="language-plaintext highlighter-rouge">docker ps</code>), you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>Now it’s time for you to code and test.</p> <h2 id="commit-the-code">Commit the Code</h2> <p>After you finish your coding and testing, you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use asynchronous request to check if the repository
name is not empty. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-front-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Frontend"/><category term="Vue"/><summary type="html"><![CDATA[This post includes the main process of gcs-front-end development.]]></summary></entry><entry><title type="html">gcs-back-end Development</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/" rel="alternate" type="text/html" title="gcs-back-end Development"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-back-end-development</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-back-end-development/"><![CDATA[<p>The main process of <code class="language-plaintext highlighter-rouge">gcs-back-end</code> development is as follows:</p> <ul> <li>Clone the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Write the code.</li> <li>Compile and test the code.</li> <li>Commit the code to the repository.</li> <li>Open a pull request to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</li> <li>Wait for the code review and merge.</li> </ul> <h2 id="clone-the-repository">Clone the Repository</h2> <p>If you want to run the project locally, you should clone the sub-modules, too. Use the following command to clone the repository and its sub-modules:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># HTTPS</span>
git clone <span class="nt">--recursive</span> https://github.com/CMIPT/gcs-back-end.git
<span class="c"># or with SSH</span>
git clone <span class="nt">--recursive</span> git@github.com:CMIPT/gcs-back-end.git
</code></pre></div></div> <p>If you have cloned the repository before, you just need to update the sub-module:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs-back-end root first</span>
git submodule init
git submodule update
</code></pre></div></div> <h2 id="write-the-code">Write the Code</h2> <p>Then you should write the code related to the feature you want to implement or the bug you want to fix.</p> <p>Do not forget to write the integration tests for the code you write, if you are adding a new feature or you are fixing a bug that has no tests before.</p> <h2 id="compile-and-test-the-code">Compile and Test the Code</h2> <p>If you just want to compile, make sure you have <code class="language-plaintext highlighter-rouge">mvn</code> and <code class="language-plaintext highlighter-rouge">jdk17</code> (or later) installed on your system.</p> <p>If you want to run the tests, you should have a database set up. We recommend you to use <code class="language-plaintext highlighter-rouge">docker-compose</code> to run the tests. Make sure <code class="language-plaintext highlighter-rouge">mvn</code>, <code class="language-plaintext highlighter-rouge">jdk17</code> (or later), <code class="language-plaintext highlighter-rouge">docker</code>, <code class="language-plaintext highlighter-rouge">openssl</code>, and <code class="language-plaintext highlighter-rouge">docker-compose</code> are installed on your system.</p> <p>Or if you do not want to compile and test the code locally, you can skip this step. When you open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the repository, GitHub Actions will automatically build the project and run the tests.</p> <h3 id="compile">Compile</h3> <p>Use the following command to compile the project:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile
</code></pre></div></div> <h3 id="test">Test</h3> <p>For test, you should build the <code class="language-plaintext highlighter-rouge">jar</code> package first:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Skip tests, as we have no database to run tests</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div> <p>Once it successfully built, you will find the <code class="language-plaintext highlighter-rouge">jar</code> package in the <code class="language-plaintext highlighter-rouge">target</code> directory.</p> <p>The second step is to configure the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is the ports you want to expose, which is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories,</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>Now the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> service is running in the background listening on port <code class="language-plaintext highlighter-rouge">8080</code>.</p> <p>You can use <code class="language-plaintext highlighter-rouge">docker ps</code> to check if the service is running (named with <code class="language-plaintext highlighter-rouge">gcs</code>).</p> <p>Once the service is running, you can access the API documentation at:</p> <p><code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui/index.html</code></p> <p>If you want to update the <code class="language-plaintext highlighter-rouge">jar</code> package, you can use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Rebuild the jar package</span>
mvn package <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
<span class="c"># Substitute the old jar package with the new one</span>
docker <span class="nb">cp </span>target/gcs-back-end.jar gcs:/gcs
<span class="c"># Restart the gcs service</span>
docker restart gcs
</code></pre></div></div> <p>Now you can copy the whole repository to the <code class="language-plaintext highlighter-rouge">gcs</code> docker so that you can run the tests in the docker container:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
</code></pre></div></div> <p>Now you can enter the <code class="language-plaintext highlighter-rouge">gcs</code> docker container and run the tests:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Install maven</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> maven
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <p>Once the tests are passed, you can exit the docker container.</p> <p>The next time you want to run the tests, you just need use those commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Update the source code in docker container</span>
docker <span class="nb">cp</span> <span class="nb">.</span> gcs:/root/gcs-back-end
<span class="c"># Enter the gcs docker container</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> gcs /bin/bash
<span class="c"># Enter the gcs-back-end directory</span>
<span class="nb">cd</span> /root/gcs-back-end
<span class="c"># Run the tests</span>
mvn <span class="nb">test</span>
</code></pre></div></div> <h2 id="commit-the-code">Commit the Code</h2> <p>Now you can commit the code to the repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
<span class="c"># Or you can use your own GUI to write the commit message</span>
</code></pre></div></div> <p>The commit message should be clear and concise, those below are some examples:</p> <pre><code class="language-Bash"># Example 1
fix(repository): empty repository name

In this commit, we use @NotBlank to ensure the repository name
is not empty. And add NOT NULL constraint to the repository
name in the database. This should close #1234.

# Example 2
ci(format): format ci pipeline

We add new github actions to format the code automatically when
a pull request is opened.
</code></pre> <p>The first line of the commit message should started with the type of the commit, which can be one of the following:</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: a new feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: a bug fix</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: documentation only changes</li> <li><code class="language-plaintext highlighter-rouge">format</code> / <code class="language-plaintext highlighter-rouge">style</code>: formatting changes</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: a code change that neither fixes a bug nor adds a feature</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: a code change that improves performance</li> <li><code class="language-plaintext highlighter-rouge">test</code>: adding missing or correcting existing tests</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: changes to our CI configuration files and scripts</li> <li><code class="language-plaintext highlighter-rouge">build</code> / <code class="language-plaintext highlighter-rouge">deps</code>: changes that affect the build system or external dependencies</li> </ul> <p>Then you should add the affected modules in the parentheses, then a colon <code class="language-plaintext highlighter-rouge">:</code>, and a brief description of the change.</p> <p>After the first line, you should leave a blank line, then write a detailed description of the change. Every line of the description should not be greater than <code class="language-plaintext highlighter-rouge">72</code> characters.</p> <p>You should try to make sure the commits are atomic, meaning that each commit should only contain one logical change. And you should try to make every commit can be built and tested successfully.</p> <h2 id="open-a-pull-request">Open a Pull Request</h2> <p>Once you have committed the code, you can push the code to your forked repository, or if you are one of the collaborators, you can push the code to the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository directly.</p> <p>Then open a pull request to the <code class="language-plaintext highlighter-rouge">master</code> branch of the <code class="language-plaintext highlighter-rouge">gcs-back-end</code> repository.</p> <p>The title and description of the pull request should be clear and concise, you can pick up the first line of your commit message as the title of the pull request.</p> <h2 id="wait-for-code-review-and-merge">Wait for Code Review and Merge</h2> <p>You can send a message to the <code class="language-plaintext highlighter-rouge">gcs-developers</code> team to notify them that you have opened a pull request.</p> <p>Once the pull request is opened, the team will review your code and give you feedback as soon as possible.</p> <p>During this process, you may be asked to make some changes to your code.</p> <p>Once the code is reviewed and approved, the team will merge your code to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>]]></content><author><name></name></author><category term="gcs"/><category term="Docker"/><category term="Spring"/><category term="Backend"/><category term="Java"/><summary type="html"><![CDATA[This post includes the main process of gcs-back-end development.]]></summary></entry><entry><title type="html">gcs Documentation</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-documentation/" rel="alternate" type="text/html" title="gcs Documentation"/><published>2025-06-04T12:04:58+00:00</published><updated>2025-06-04T12:04:58+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-documentation</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-documentation/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">gcs</code> stands for Git Center Server. It is a Git repository management system that provides a web interface for managing Git repositories, similar to GitHub or GitLab. This project is developed by the <a href="https://github.com/CMIPT">CMIPT</a>. We do this mainly to provide a self-hosted solution for our team, and practice our skills in coding. <code class="language-plaintext highlighter-rouge">gcs</code> is still in the early stages of development, and there are many features that are not yet implemented. Therefore, we hope that there will be more contributors to join the project. Do not be afraid to contribute, even if you are not familiar with it, there will be someone to help you.</p> <ul> <li><a href="/blog/2025/gcs-deploy">Deploy gcs</a></li> <li><a href="/blog/2025/gcs-back-end-development">gcs-back-end Development</a></li> <li><a href="/blog/2025/gcs-back-front-development">gcs-front-end Development</a></li> </ul>]]></content><author><name></name></author><category term="gcs"/><category term="Linux"/><category term="Nginx"/><category term="Docker"/><category term="Spring"/><category term="Vue"/><category term="Frontend"/><category term="Backend"/><summary type="html"><![CDATA[This post includes the index of gcs documentation.]]></summary></entry><entry><title type="html">Q&amp;amp;A</title><link href="https://kaiser-yang.github.io/blog/2025/question-and-answer/" rel="alternate" type="text/html" title="Q&amp;amp;A"/><published>2025-05-16T13:16:38+00:00</published><updated>2025-05-16T13:16:38+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/question-and-answer</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/question-and-answer/"><![CDATA[<h2 id="what-is-ab-testing">What is A/B testing?</h2> <p>A/B testing is a statistical method used to compare two versions of an application to determine which performs better based on specific metrics.</p> <p>In A/B testing, users are split into two groups: the control group (A) and the treatment group (B). The control group is exposed to the original version of the application, while the treatment group is exposed to the modified version. By analyzing the performance of both groups, you can determine which version is more effective in achieving the desired outcome.</p> <p>There are some examples for A/B testing:</p> <ul> <li><strong>Website Design</strong>: Testing two different layouts of a webpage to see which one leads to more conversions.</li> <li><strong>Algorithm Optimization</strong>: Comparing two different algorithms to see which one performs better in terms of speed or accuracy.</li> </ul> <h2 id="what-are-overload-override-and-overwrite">What are overload, override and overwrite?</h2> <ul> <li><strong>Overload</strong>: In programming, overloading refers to the ability to define multiple functions or methods with the same name but different parameters. This allows you to use the same function name for different purposes, depending on the context.</li> <li><strong>Override</strong>: Overriding is a feature in object-oriented programming where a subclass provides a specific implementation of a method that is already defined in its superclass. This allows the subclass to customize or extend the behavior of the inherited method.</li> <li><strong>Overwrite</strong>: Overwriting in <code class="language-plaintext highlighter-rouge">C++</code> refers to hiding a non-virtual base class member function.</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Overload</span>
<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">content</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">String</span> <span class="n">content</span><span class="p">);</span>

<span class="c1">// Override</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">();</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span> <span class="c1">// Override the Base class method</span>
<span class="p">};</span>

<span class="c1">// Overwrite</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">();</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">print</span><span class="p">();</span> <span class="c1">// Hides the Base class method</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="what-is-the-3-2-1-rule-for-backups">What is the <code class="language-plaintext highlighter-rouge">3-2-1 rule</code> for backups?</h2> <ul> <li>At least <code class="language-plaintext highlighter-rouge">3</code> copies of your data. This ensures redundancy; if one copy fails, you have others to rely on.</li> <li>At least <code class="language-plaintext highlighter-rouge">2</code> copies on different storage media. This avoids points of failure.</li> <li>At least <code class="language-plaintext highlighter-rouge">1</code> copy off-site. This protects against local disasters like fire or flood.</li> </ul> <h2 id="what-is-the-difference-between-docker-and-a-virtual-machine">What is the difference between Docker and a virtual machine?</h2> <p>Docker is based on a more general concept called containers.</p> <p>The main difference between containers and virtual machines is that virtual machines will execute an entire OS stack, including the kernel, even if the kernel is the same as the host machine.</p> <p>Unlike VMs, containers avoid running another instance of the kernel and instead share the kernel with the host. On Linux, this is achieved through a mechanism called LXC (Linux Containers), and it makes use of a series of isolation mechanisms to spin up a program that thinks it’s running on its own hardware but it’s actually sharing the hardware and kernel with the host.</p> <p>Therefore, containers have a lower overhead than a full VM. On the flip side, containers have a weaker isolation and only work if the host runs the same kernel. For instance if you run Docker on MacOS, Docker needs to spin up a Linux virtual machine to get an initial Linux kernel and thus the overhead is still significant. Lastly, Docker is a specific implementation of containers and it is tailored for software deployment. Because of this, it has some quirks. For example, Docker containers will not persist any form of storage between reboots by default.</p> <h2 id="how-to-upgrade-application-when-db-schema-changes">How to Upgrade Application When DB Schema Changes?</h2> <p>When developing new features, the DB schema may change, such as adding new columns or tables. We must make sure that the data is not lost after upgrading the application.</p> <p>Versioned schema migrations are a common solution to this problem. The steps can be summarized as follows:</p> <ul> <li>Store the version of the schema in the database.</li> <li>Creating incremental migration scripts that can be run to update the schema between two contiguous versions. Each migration script should be idempotent, meaning that it can be run multiple times without causing any issues. We should also update the base schema to the latest version to support installation the latest version directly.</li> <li>Automatically run the migration scripts when the application starts. For the first installation, we call the base schema script. For upgrading, we check the current version of the schema, and run the migration scripts until the specific version.</li> </ul> <h2 id="how-to-build-shared-or-static-library">How to Build Shared or Static Library?</h2> <p>For shared library, we can use <code class="language-plaintext highlighter-rouge">-fPIC</code> to generate position-independent object code. Then we can use <code class="language-plaintext highlighter-rouge">-shared</code> to generate shared library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Generate position-independent object code</span>
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> a.cpp <span class="nt">-o</span> a.o
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> b.cpp <span class="nt">-o</span> b.o
g++ <span class="nt">-c</span> <span class="nt">-fPIC</span> c.cpp <span class="nt">-o</span> c.o
<span class="c"># Generate shared library</span>
g++ <span class="nt">-shared</span> <span class="nt">-o</span> libfoo.so a.o b.o c.o
</code></pre></div></div> <p>After that, you may need to update the environment variable <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> to include the directory where the shared library is located.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/library
</code></pre></div></div> <p>Then you can use <code class="language-plaintext highlighter-rouge">-L</code> and <code class="language-plaintext highlighter-rouge">-l</code> to link the shared library when compiling your program.</p> <p>You may be asking why we need update the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> environment variable even if we have already specified the path to the shared library using <code class="language-plaintext highlighter-rouge">-L</code>. The reason is that the <code class="language-plaintext highlighter-rouge">-L</code> option only specifies the path to the library at compile time, which is used to find the library when linking the program. At runtime, the dynamic linker needs to know where to find the shared library. The <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> environment variable tells the dynamic linker where to look for shared libraries when the program is executed. If the library is not in a standard location (like <code class="language-plaintext highlighter-rouge">/usr/lib</code> or <code class="language-plaintext highlighter-rouge">/usr/local/lib</code>), the dynamic linker will not be able to find it unless you specify the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>.</p> <p>For static library, we can use <code class="language-plaintext highlighter-rouge">ar</code> to archive object files into a static library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ <span class="nt">-c</span> a.cpp <span class="nt">-o</span> a.o
g++ <span class="nt">-c</span> b.cpp <span class="nt">-o</span> b.o
g++ <span class="nt">-c</span> c.cpp <span class="nt">-o</span> c.o
ar rcs libfoo.a a.o b.o c.o
</code></pre></div></div> <p>The options for <code class="language-plaintext highlighter-rouge">ar</code> are as follows:</p> <ul> <li><code class="language-plaintext highlighter-rouge">r</code>: Insert or replace the files in the archive.</li> <li><code class="language-plaintext highlighter-rouge">c</code>: Create the archive if it does not exist.</li> <li><code class="language-plaintext highlighter-rouge">s</code>: Create or update the index for the archive. The index helps the linker find the symbols faster.</li> <li><code class="language-plaintext highlighter-rouge">t</code>: List the contents of the archive.</li> <li><code class="language-plaintext highlighter-rouge">x</code>: Extract files from the archive.</li> <li><code class="language-plaintext highlighter-rouge">d</code>: Delete files from the archive.</li> </ul> <h2 id="what-is-cdns">What is CDNs?</h2> <p>A Content Delivery Network (CDN) is a geographically distributed network of servers that work together to deliver web content (e.g., images, videos, CSS, JavaScript) to users more efficiently. The primary goal is to reduce latency, improve load times, and decrease bandwidth consumption by serving content from servers closest to the end user.</p> <p>The CDN works by caching content on multiple servers located in various geographic locations. When a user requests content, the CDN routes the request to the nearest server, which reduces the distance the data has to travel.</p> <h2 id="what-are-sop-and-cors">What are SOP and CORS?</h2> <p>SOP is an abbreviation for Same-Origin Policy. It is a security measure implemented in web browsers. It restricts web pages from making requests to a different domain than the one that served the web page.</p> <p>This policy is in place to prevent malicious websites from accessing sensitive data from another domain without the user’s consent. For example, if a user is logged into their bank account in one tab, and then visits a malicious website in another tab, the malicious website should not be able to access the user’s bank account information. Therefore, the SOP is for security reasons and protects users from cross-site attacks.</p> <p><strong>NOTE</strong>: If two URLs have the same protocol, domain, and port, then they are considered to have the same origin.</p> <p>However, there are some cases where we need to allow cross-origin requests, such as when we are using APIs from different domains or when we are using CDNs.</p> <p>CORS is an abbreviation for Cross-Origin Resource Sharing. It is a browser mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served. With CORS, the browser will send an <code class="language-plaintext highlighter-rouge">OPTIONS</code> request to the server to check if the server allows cross-origin requests. Then the server will respond with the appropriate headers (such as <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>, <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Methods</code>, <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Headers</code> etc.) to indicate whether the request is allowed or not.</p> <p>From the introduction above, we can figure out that SOP and CORS are only in the browser level. Therefore, we can use reverse proxy to bypass the SOP. For example, we can use <code class="language-plaintext highlighter-rouge">nginx</code> to set up a reverse proxy to forward requests to the target server. This way, the browser will only see the requests going to the same origin.</p> <h2 id="what-is-memory-alignment">What is memory alignment?</h2> <p>Memory alignment refers to the way data is arranged and accessed in memory. For example, the 1-byte data type can be stored at any address, while the 4-byte data type should be stored at an address that is a multiple of 4.</p> <p>In <code class="language-plaintext highlighter-rouge">C/C++</code>, you can not convert pointers of different memory alignment. However, you can convert any types of pointers to <code class="language-plaintext highlighter-rouge">void*</code> or <code class="language-plaintext highlighter-rouge">char*</code> pointers, because they are 1-byte aligned.</p> <p>You can use the <code class="language-plaintext highlighter-rouge">alignof</code> operator in <code class="language-plaintext highlighter-rouge">C++</code> to get the alignment of a type. There is a function that can check if a pointer can be safely cast to a pointer of a different type:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">is_aligned</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">alignment</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">uintptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="o">%</span> <span class="n">alignment</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="n">is_aligned</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">alignof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span> <span class="c1">// Check if ptr is aligned for int</span>
<span class="n">is_aligned</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">alignof</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">));</span> <span class="c1">// Check if ptr is aligned for long long</span>
</code></pre></div></div> <p><strong>NOTE</strong>: even if two pointers are aligned, you can not dereference one pointer to access the data of the other type, unless the deference type is <code class="language-plaintext highlighter-rouge">char</code>, <code class="language-plaintext highlighter-rouge">void</code>, <code class="language-plaintext highlighter-rouge">std::byte</code> or the original type of the data. It is worth noting that <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">unsigned int</code> are considered the same type in this context.</p> <p>In some cases, you may be asked how to implement <code class="language-plaintext highlighter-rouge">memcpy</code> effectively. One common approach is to copy multiple bytes at a time, you may think of trying to convert the <code class="language-plaintext highlighter-rouge">void *</code> to <code class="language-plaintext highlighter-rouge">long long *</code> and copy 8 bytes at a time. Before doing that, you should check if the pointer is aligned for <code class="language-plaintext highlighter-rouge">long long</code> type. If it is not aligned, you can copy the data byte by byte until the pointer is aligned, and then copy the rest of the data in chunks of 8 bytes. <strong>Unfortunately, this approach may cause undefined behavior</strong>.</p> <p>Actually, there are SIMD (Single Instruction, Multiple Data) instructions, with which you can loading and storing data in larger chunks, such as 128 bits or 256 bits. But using SIMD is not portable.</p> <h2 id="what-is-the-process-of-ssltls-handshake">What is the process of SSL/TLS handshake?</h2> <p>RSA key exchange process:</p> <ol> <li>The TLS client sends a <code class="language-plaintext highlighter-rouge">Client Hello</code> message that lists cryptographic information such as the TLS version and, in the client’s order of preference, the Cipher Suites supported by the client. The message also contains a random byte string that is used in subsequent computations.</li> <li>The TLS server responds with a <code class="language-plaintext highlighter-rouge">Server Hello</code> message that contains the Cipher Suite chosen by the server from the list provided by the client, and another random byte string.</li> <li>The server also sends its digital certificate (including the public key) to the client.</li> <li>The server sends a <code class="language-plaintext highlighter-rouge">Server Hello Done</code> message.</li> <li>The TLS client verifies the server’s digital certificate. The TLS client generate another random byte string, then generate a secret key by all the three random byte strings. The client sends the third random string the server, and this package will be encrypted with the public key of the server. This is a <code class="language-plaintext highlighter-rouge">Finished</code> message, indicating that the client part of the handshake is complete.</li> <li>The TLS server can decrypt the <code class="language-plaintext highlighter-rouge">Finished</code> message using its private key. Then it can generate the same secret key using the three random byte strings. The server then sends its own <code class="language-plaintext highlighter-rouge">Finished</code> message, encrypted with the secret key.</li> <li>Now both the client and server have the same secret key, and they can start exchanging application data securely.</li> </ol> <pre><code class="language-txt">+------------+                                      +------------+
| TLS Client |                                      | TLS Server |
+------------+                                      +------------+
       |                                                   |
       | 1. Client Hello                                   |
       |    (Version, Cipher Suites, Random1)              |
       |--------------------------------------------------&gt;|
       |                                                   |
       |                       2. Server Hello             |
       |                          (Chosen Cipher, Random2) |
       |&lt;--------------------------------------------------|
       |                                                   |
       |                            3. Digital Certificate |
       |                               (PubKey)            |
       |&lt;--------------------------------------------------|
       |                                                   |
       |                              4. Server Hello Done |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 5. Verify Cert                                    |
       |    Generate Random3                               |
       |    Derive Secret Key                              |
       |    (Random1 + Random2 + Random3)                  |
       |    Finished                                       |
       |    (Encrypted with Server's PubKey)               |
       |    [Contains Random3]                             |
       |--------------------------------------------------&gt;|
       |                                                   |
       |           6. Decrypt with Private Key             |
       |              Derive Secret Key                    |
       |              (Random1 + Random2 + Random3)        |
       |              Finished (Encrypted with Secret Key) |
       |&lt;--------------------------------------------------|
       |                                                   |
       |      7. Secure Application Data Exchange          |
       |&lt;=================================================&gt;|
       |                                                   |
</code></pre> <p>RSA key exchange is not secure enough, and it has been deprecated in TLS 1.3. The main problem of RSA key exchange is that if the private key of the server is compromised, all past communications can be decrypted. Diffie-Hellman key exchange process can solve this problem, and its process is as follows:</p> <ol> <li>The TLS client sends a <code class="language-plaintext highlighter-rouge">Client Hello</code> message containing Supported TLS version, list of supported Cipher Suites (ordered by client preference) and a random byte string (<code class="language-plaintext highlighter-rouge">Client Random</code>) for later cryptographic operations.</li> <li>The server responds with a <code class="language-plaintext highlighter-rouge">Server Hello</code> message containing, Chosen Cipher Suite from the client’s list, a second random byte string (<code class="language-plaintext highlighter-rouge">Server Random</code>).</li> <li>The server transmits its digital certificate, which includes its long-term public key.</li> <li>The server sends a <code class="language-plaintext highlighter-rouge">Server Key Exchange</code> message with Diffie-Hellman (DH) public parameters: prime modulus <code class="language-plaintext highlighter-rouge">p</code> and generator <code class="language-plaintext highlighter-rouge">g</code>, server’s temporary DH public key (<code class="language-plaintext highlighter-rouge">g^a mod p</code>, where <code class="language-plaintext highlighter-rouge">a</code> is the server’s short-term private exponent). This message is signed with the server’s long-term private key to authenticate the server.</li> <li>The server signals the end of the initial handshake phase.</li> <li>The client verifies the server’s certificate (checks validity, revocation status, and signature). The client generates its own DH key pair: temporary private exponent <code class="language-plaintext highlighter-rouge">b</code> and public key (<code class="language-plaintext highlighter-rouge">g^b mod p</code>). The client computes the pre-master secret as <code class="language-plaintext highlighter-rouge">g^(a*b) mod p</code> (using the server’s public key <code class="language-plaintext highlighter-rouge">g^a</code> and its own private key <code class="language-plaintext highlighter-rouge">b</code>). The client sends a <code class="language-plaintext highlighter-rouge">Client Key Exchange</code> message containing its DH public key (<code class="language-plaintext highlighter-rouge">g^b mod p</code>). The client derives the master secret using <code class="language-plaintext highlighter-rouge">Client Random</code>, <code class="language-plaintext highlighter-rouge">Server Random</code>, and the pre-master secret. The client generates session keys (symmetric encryption keys, HMAC keys, etc.) from the master secret.</li> <li>The client sends a <code class="language-plaintext highlighter-rouge">Finished</code> message that contains a hash of all handshake messages exchanged so far (from <code class="language-plaintext highlighter-rouge">Client Hello</code> to <code class="language-plaintext highlighter-rouge">Client Key Exchange</code>), and is encrypted with the session key (proves the client knows the correct key). This confirms the client’s side of the handshake is complete.</li> <li>The server computes the pre-master secret as <code class="language-plaintext highlighter-rouge">g^(a*b) mod p</code> (using the client’s public key <code class="language-plaintext highlighter-rouge">g^b</code> and its own private key <code class="language-plaintext highlighter-rouge">a</code>), derives the same master secret using <code class="language-plaintext highlighter-rouge">Client Random</code>, <code class="language-plaintext highlighter-rouge">Server Random</code>, and the pre-master secret, generates session keys from the master secret, and sends its own <code class="language-plaintext highlighter-rouge">Finished</code> message which contains a hash of all handshake messages (from <code class="language-plaintext highlighter-rouge">Client Hello</code> to <code class="language-plaintext highlighter-rouge">Server Key Exchange</code>) and is encrypted with the session key (proves the server knows the correct key).</li> <li>Both client and server now share the same session keys. They use these keys to encrypt/decrypt application data, ensuring confidentiality and integrity for all subsequent communication.</li> </ol> <pre><code class="language-txt">+------------+                                      +------------+
| TLS Client |                                      | TLS Server |
+------------+                                      +------------+
       |                                                   |
       | 1. Client Hello                                   |
       |    (TLS Version, Supported Cipher Suites, Random1)|
       |--------------------------------------------------&gt;|
       |                                                   |
       |                       2. Server Hello             |
       |                     (Chosen Cipher Suite, Random2)|
       |&lt;--------------------------------------------------|
       |                                                   |
       |                            3. Digital Certificate |
       |                              (Server's Public Key)|
       |&lt;--------------------------------------------------|
       |                                                   |
       |               4. Server Key Exchange              |
       |                 (DH Public Params: p, g, g^a)     |
       |       [Signed with Server's Long-Term Private Key]|
       |&lt;--------------------------------------------------|
       |                                                   |
       |                              5. Server Hello Done |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 6. Client Actions:                                |
       |    - Verify Server Certificate                    |
       |    - Generate DH Key Pair (g^b mod p)             |
       |    - Compute Pre-Master Secret: g^(a*b) mod p     |
       |    - Derive Master Secret                         |
       |    - Generate Session Keys (from Master Secret)   |
       |    - Client Key Exchange: Send g^b mod p          |
       |--------------------------------------------------&gt;|
       |                                                   |
       | 7. Server Actions:                                |
       |    - Compute Pre-Master Secret: g^(a*b) mod p     |
       |    - Derive Master Secret                         |
       |    - Generate Session Keys (from Master Secret)   |
       |    - Verify Client's Finished Message             |
       |    - Send Finished Message                        |
       |&lt;--------------------------------------------------|
       |                                                   |
       | 8. Client Actions:                                |
       |    - Verify Server's Finished Message             |
       |                                                   |
       | 9. Secure Application Data Exchange (Session Key) |
       |&lt;=================================================&gt;|
       |                                                   |
</code></pre> <h2 id="what-does--do-in-bash">What does <code class="language-plaintext highlighter-rouge">:(){:|:&amp;};:</code> do in Bash?</h2> <p>For better understanding, we can substitute the colon <code class="language-plaintext highlighter-rouge">:</code> with a more descriptive name, such as <code class="language-plaintext highlighter-rouge">forkbomb</code> and format it as follows:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>forkbomb<span class="o">()</span> <span class="o">{</span>
    forkbomb | forkbomb &amp;
<span class="o">}</span><span class="p">;</span>
forkbomb
</code></pre></div></div> <p>From the above code, it is clear that the function <code class="language-plaintext highlighter-rouge">forkbomb</code> calls itself twice and runs in the background. This will create an infinite number of processes, eventually consuming all system resources and causing the system to become unresponsive.</p> <h2 id="what-are-debounce-and-throttle">What are debounce and throttle?</h2> <p>Debounce and throttle are techniques used to control the rate at which a function is executed, especially in response to events like scrolling, resizing, or key presses.</p> <ul> <li><strong>Debounce</strong>: This technique ensures that a function is only executed after a certain period of time, and every time the event is triggered, the timer is reset.</li> <li><strong>Throttle</strong>: This technique ensures that a function is executed at most once within a specified time interval, regardless of how many times the event is triggered.</li> </ul> <p>Debounce is useful for scenarios where you want to wait until the user has stopped performing an action, such as typing in a search box or resizing a window.</p> <p>Throttle is useful for scenarios where you want to limit the frequency of function execution, such as handling scroll events or API requests.</p> <h2 id="what-is-orm">What is ORM?</h2> <p>ORM stands for Object-Relational Mapping, which is a programming technique that allows developers to interact with a relational database using object-oriented programming languages.</p> <h2 id="how-to-read-pointers-in-cc">How to read pointers in C/C++?</h2> <p>The most common and easy way to read pointers in <code class="language-plaintext highlighter-rouge">C/C++</code> is the Right-Left Rule. The Right-Left Rule states that you should start at the identifier, move right when possible, then left, and repeat. During each step, you should stop when you reach a parenthesis.</p> <p>For example, we can use it to tell apart <code class="language-plaintext highlighter-rouge">const char * p1</code>, <code class="language-plaintext highlighter-rouge">char const * p2</code>, <code class="language-plaintext highlighter-rouge">char * const p3</code>, <code class="language-plaintext highlighter-rouge">const char * const p4</code> and <code class="language-plaintext highlighter-rouge">const * char p5</code>:</p> <p>For <code class="language-plaintext highlighter-rouge">const char * p1</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p1</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p1</code> is a pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p1</code> is a pointer to a <code class="language-plaintext highlighter-rouge">const char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">char const * p2</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p2</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p2</code> is a pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p2</code> is a pointer to a <code class="language-plaintext highlighter-rouge">char const</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">char * const p3</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p3</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is constant.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is a constant pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p3</code> is a constant pointer to a <code class="language-plaintext highlighter-rouge">char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">const char * const p4</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p4</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is constant.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is a constant pointer to something.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">const char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p4</code> is a constant pointer to a <code class="language-plaintext highlighter-rouge">const char</code>.</li> </ol> <p>For <code class="language-plaintext highlighter-rouge">const * char p5</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">p5</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">char</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p5</code> is a <code class="language-plaintext highlighter-rouge">char</code>.</li> <li>Move right. There is nothing on the right, so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">p5</code> is a pointer to something. Error occurs, <code class="language-plaintext highlighter-rouge">p5</code> can not be a pointer and a <code class="language-plaintext highlighter-rouge">char</code> at the same time. Therefore, this is not a valid declaration.</li> </ol> <p>There are some complicated examples you can try to practice the Right-Left Rule:</p> <ul> <li><code class="language-plaintext highlighter-rouge">int (*(*foo)(int))[5]</code></li> <li><code class="language-plaintext highlighter-rouge">int (*(*foo)(int, int))(int, int)</code></li> </ul> <p>I’ll explain <code class="language-plaintext highlighter-rouge">int (*(*foo)(int))[5]</code>:</p> <ol> <li>Start at <code class="language-plaintext highlighter-rouge">foo</code>.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">)</code> so we stop.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to something.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">(int)</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">*</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to something.</li> <li>Move right. We see <code class="language-plaintext highlighter-rouge">[5]</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to an array of 5 elements.</li> <li>Move left. We see <code class="language-plaintext highlighter-rouge">int</code>, so we stop and get that <code class="language-plaintext highlighter-rouge">foo</code> is a pointer to a function that takes an <code class="language-plaintext highlighter-rouge">int</code> as an argument and returns a pointer to an array of 5 <code class="language-plaintext highlighter-rouge">int</code> elements.</li> </ol> <h2 id="what-are-big-endian-and-little-endian">What are Big Endian and Little Endian?</h2> <p>Endianness refers to the order in which bytes are stored in memory.</p> <ul> <li><strong>Big Endian</strong>: The most significant byte (MSB) is stored at the lowest memory address. For example, the number <code class="language-plaintext highlighter-rouge">0x12345678</code> would be stored as <code class="language-plaintext highlighter-rouge">12 34 56 78</code>.</li> <li><strong>Little Endian</strong>: The least significant byte (LSB) is stored at the lowest memory address. For example, the number <code class="language-plaintext highlighter-rouge">0x12345678</code> would be stored as <code class="language-plaintext highlighter-rouge">78 56 34 12</code>.</li> </ul> <p><strong>NOTE</strong>: In networking protocols, big-endian is often referred to as “network byte order”.</p> <h2 id="what-is-the-p0-test">What is the P0 Test?</h2> <p>The P0 test, also known as the “P0 test case” or “P0 test scenario,” is a type of software testing that focuses on the most critical and high-priority functionalities of a software application.</p> <p>The P0 stands Priority 0, which means that these test cases are of the highest priority and must be executed first. The goal of P0 testing is to ensure that the core functionalities of the application are working correctly before moving on to lower-priority test cases.</p> <p>Similar to P0, there are also P1, P2, and P3 tests, which represent lower priority test cases.</p> <h2 id="what-is-the-gray-release">What is the Gray Release?</h2> <p>A gray release is a software deployment strategy that allows for gradual rollout of new features or changes to a subset of users before a full release. This approach helps to minimize risks and allows for real-world testing of new features in a controlled manner.</p> <h2 id="what-is-the-saas">What is the SaaS?</h2> <p>SasS stands for Software as a Service. It is a software distribution model where applications are hosted in the cloud and made available to users over the internet. SaaS eliminates the need for users to install and maintain software on their local devices, as the software is accessed through a web browser or an application interface.</p> <h2 id="what-is-cgi">What is CGI?</h2> <p>CGI stands for Common Gateway Interface. It is a standard protocol that allows web servers to execute external programs or scripts to generate dynamic content for web pages. CGI scripts can be written in various programming languages, such as Perl, Python, or C. When a user requests a web page that requires dynamic content, the web server invokes the CGI script, which processes the request and generates the response.</p> <h2 id="what-is-the-turning-completeness">What is the Turning Completeness?</h2> <p>Turning Completeness is a concept in computer science that refers to the ability of a computational system to perform any computation that can be expressed algorithmically. A system is considered Turing complete if it can simulate a Turing machine, which is a theoretical model of computation that can perform any calculation that can be described by an algorithm.</p> <h2 id="what-is-socket-programming">What is socket programming?</h2> <p>Socket programming is a way to enable communication between two computers over a network. Actually, socket is a group of APIs that provided by the operating system to enable network communication. With these APIs, we can:</p> <ol> <li>Create a socket: <code class="language-plaintext highlighter-rouge">socket()</code></li> <li>Bind the socket to an IP address and port: <code class="language-plaintext highlighter-rouge">bind()</code></li> <li>Listen for incoming connections: <code class="language-plaintext highlighter-rouge">listen()</code></li> <li>Accept incoming connections: <code class="language-plaintext highlighter-rouge">accept()</code></li> <li>Send and receive data: <code class="language-plaintext highlighter-rouge">send()</code>, <code class="language-plaintext highlighter-rouge">recv()</code></li> </ol> <p>For clients, we can use <code class="language-plaintext highlighter-rouge">connect()</code> to connect to a server, and then use <code class="language-plaintext highlighter-rouge">send()</code> and <code class="language-plaintext highlighter-rouge">recv()</code> to communicate.</p> <h2 id="what-is-sticky-packet-problem-how-to-solve-it">What is sticky packet problem? How to solve it?</h2> <p>The sticky packet problem occurs in TCP communication when multiple messages are sent in quick succession, and the receiver cannot distinguish where one message ends and the next begins. This can lead to data being “stuck” together in a single read operation, making it difficult to parse the individual messages.</p> <p>To solve the sticky packet problem, we can use the following methods:</p> <ol> <li><strong>Fixed-Length Messages</strong>: Define a fixed length for each message. The receiver reads exactly that many bytes for each message.</li> <li><strong>Delimiter-Based Messages</strong>: Use a special character or sequence of characters to indicate the end of a message.</li> <li><strong>Length-Prefixed Messages</strong>: Prepend each message with a fixed-size header that specifies the length of the message.</li> <li><strong>Application-Level Protocols</strong>: Use established protocols like HTTP or WebSocket that have built-in mechanisms for message framing.</li> </ol> <p>Why sticky package problem not occur in UDP?</p> <blockquote> <p>UDP is a connectionless protocol that sends messages, called datagrams, without establishing a connection between the sender and receiver. Each datagram is sent independently and contains all the necessary information (such as source and destination addresses) to be routed through the network. Because of this, each UDP datagram is treated as a separate entity, and there is no concept of a continuous stream of data like in TCP. Therefore, the sticky packet problem does not occur in UDP, as each datagram is received in its entirety and can be processed independently.</p> </blockquote> <h2 id="what-is-tcp-three-way-handshake-why-three-way">What is TCP three-way handshake? Why three-way?</h2> <p>The TCP three-way handshake is a process used to establish a reliable connection between a client and a server over a TCP/IP network. The three-way handshake involves three steps:</p> <ol> <li><strong>SYN</strong>: The client sends a TCP segment with the SYN (synchronize) flag set to the server, indicating that it wants to establish a connection.</li> <li><strong>SYN-ACK</strong>: The server responds with a TCP segment that has both the SYN and ACK (acknowledge) flags set. The SYN flag indicates that the server is willing to establish a connection, and the ACK flag acknowledges the client’s initial SYN request.</li> <li><strong>ACK</strong>: The client sends a final TCP segment with the ACK flag set, acknowledging the server’s SYN-ACK response. At this point, the connection is established, and data can be exchanged between the client and server.</li> </ol> <p>The reason for using a three-way handshake instead of a two-way handshake is to ensure that both the client and server are ready to communicate and to prevent certain types of attacks, such as SYN flooding.</p> <p>In a two-way handshake, the client would send a SYN request, and the server would respond with a SYN-ACK. However, if the SYN-ACK response is lost or delayed, the client will try to resend the SYN request, potentially leading to multiple connections being established.</p> <p>In a four-way handshake, the last handshake is redundant, as the three-way handshake already ensures that both parties are ready to communicate:</p> <ul> <li>For the first handshake, the client indicates that it wants to communicate.</li> <li>For the second handshake, the server indicates that it is ready to communicate. And this also ensure that the server can receive data from the client.</li> <li>For the third handshake, the client let the server know that “I know you are ready.” And this also ensure that the client can receive data from the server.</li> </ul> <h2 id="what-is-acid-how-to-achieve-it">What is ACID? How to achieve it?</h2> <ul> <li><strong>Atomicity</strong>: The transaction is all-or-nothing. This can be achieved using undo logs to roll back changes if a transaction fails.</li> <li><strong>Consistency</strong>: The transaction brings the database from one valid state to another. This can be achieved using constraints, triggers, and application logic.</li> <li><strong>Isolation</strong>: The transaction is isolated from other transactions. This can be achieved using locking mechanisms and isolation levels.</li> <li><strong>Durability</strong>: Once a transaction is committed, its changes persist permanently even after system failures. This can be achieved using redo logs.</li> </ul> <h2 id="what-are-isolation-levels-in-databases">What are isolation levels in databases?</h2> <p>Before introducing isolation levels, we need to understand the following phenomena:</p> <ul> <li><strong>Dirty Read</strong>: A transaction reads uncommitted data from another transaction.</li> <li><strong>Non-Repeatable Read</strong>: A transaction reads the same data multiple times, but gets different results because another transaction modified/deleted it.</li> <li><strong>Phantom Read</strong>: A transaction re-runs a range query and gets new rows inserted by another committed transaction.</li> <li><strong>Serialization Anomaly</strong>: The result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time.</li> <li><strong>Lost Update</strong>: Two transactions read the same data and modify it, but one transaction’s changes are lost due to the other transaction’s changes</li> </ul> <p>Isolation levels define the degree to which a transaction must be isolated from the data modifications made by other transactions. The standard isolation levels defined by the SQL standard are:</p> <table> <thead> <tr> <th>Isolation Level</th> <th>Dirty Read</th> <th>Non-Repeatable Read</th> <th>Phantom Read</th> <th>Serialization Anomaly</th> <th>Lost Update</th> </tr> </thead> <tbody> <tr> <td>Read Uncommitted</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Read Committed</td> <td>Not Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Repeatable Read</td> <td>Not Possible</td> <td>Not Possible</td> <td>Possible</td> <td>Possible</td> <td>Possible</td> </tr> <tr> <td>Serializable</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> <td>Not Possible</td> </tr> </tbody> </table> <h2 id="how-to-implement-isolation-levels-in-databases">How to implement isolation levels in databases?</h2> <p>Before we start, we need to understand the following concepts:</p> <ul> <li><strong>Shared Lock</strong>: Also known as read lock and S-lock. It can be acquired when no other transaction holds a write lock on the same data.</li> <li><strong>Exclusive Lock</strong>: Also known as write lock and X-lock. It can be acquired when no other transaction holds a shared or write lock on the same data.</li> </ul> <p>For <code class="language-plaintext highlighter-rouge">Read Uncommited</code>, we can use First-Level Locking (1LL). 1LL means that a transaction must acquire an X-lock before modifying data, and release the X-lock after the transaction is committed or rolled back.</p> <p>For <code class="language-plaintext highlighter-rouge">Read Committed</code>, we can use Second-Level Locking (2LL). 2LL means that based on 1PL, a transaction must acquire an S-lock before reading data, and release the S-lock immediately after reading the data.</p> <p>For <code class="language-plaintext highlighter-rouge">Repeatable Read</code>, we can use Third-Level Locking (3LL). 3LL means that based on 2PL, a transaction must hold the S-lock until the transaction is committed or rolled back.</p> <p><strong>NOTE</strong>: 3LL can not prevent phantom reads, because transactions only hold locks for existing data items. For example, if a transaction reads a range of data items another transaction inserts a new data item then commits, and after that the first transaction may read the new data item.</p> <p>For <code class="language-plaintext highlighter-rouge">Serializable</code>, we can use Two-Phase Locking (2PL). The core idea of the 2PL is that transactions must follow two strict phases for lock management:</p> <ul> <li>Growing Phase: In this phase, a transaction can acquire locks but cannot release any locks.</li> <li>Shrinking Phase: In this phase, a transaction can release locks but cannot acquire any new locks.</li> </ul> <p>There are some variants of the two-phase locking protocol:</p> <ul> <li>Conservative Two-Phase Locking: In this variant, a transaction must acquire all locks (at one time) before it starts executing. This can prevent deadlocks.</li> <li>Strict Two-Phase Locking: In this variant, a transaction must hold X-locks until it commits or rolls back.</li> <li>Rigorous Two-Phase Locking: In this variant, a transaction must hold all locks until it commits or rolls back.</li> </ul> <p><strong>NOTE</strong>: With only 2PL, it can only ensure that the result of multiple transactions is equivalent to some serial execution of those transactions. It may not prevent dirty reads, non-repeatable reads, phantom reads, and lost updates. To prevent these phenomena, we need to use other techniques together with 2PL.</p> <h2 id="can-tcp-and-udp-bind-to-the-same-port-can-client-use-the-same-port-to-send-date-to-different-servers-with-tcpudp">Can TCP and UDP bind to the same port? Can client use the same port to send date to different servers with TCP/UDP?</h2> <p>The answer to both questions is yes. For the first question, TCP and UDP are two different protocols, the OS can distinguish them easily. For the second question, the TCP/UDP socket is identified by a 4-tuple: (source IP, source port, destination IP, destination port). As long as the 4-tuple is different, the OS can distinguish them easily.</p> <h2 id="references">References</h2> <ul> <li><a href="https://www.ibm.com/docs/en/ibm-mq/9.3.x?topic=tls-overview-ssltls-handshake">An overview of the SSL/TLS handshake</a></li> <li><a href="https://www.kaidohussar.dev/posts/debounce-vs-throttle">Debounce vs throttle</a></li> <li><a href="https://www.linkedin.com/pulse/streamlining-test-case-execution-understanding-p0-p4-sai-teja-vuthuri-ywvoc">Streamlining Test Case Execution: Understanding P0 to P4 Prioritization</a></li> </ul>]]></content><author><name></name></author><category term="Potpourri"/><summary type="html"><![CDATA[Some questions that I have encountered in my work.]]></summary></entry><entry><title type="html">Contributing to blink-cmp-git</title><link href="https://kaiser-yang.github.io/blog/2025/blink-cmp-git-contribution/" rel="alternate" type="text/html" title="Contributing to blink-cmp-git"/><published>2025-05-08T12:21:15+00:00</published><updated>2025-05-08T12:21:15+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/blink-cmp-git-contribution</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/blink-cmp-git-contribution/"><![CDATA[<h2 id="brief-introduction">Brief Introduction</h2> <p><a href="https://github.com/Kaiser-Yang/blink-cmp-git">blink-cmp-git</a> is a source for <a href="https://github.com/Saghen/blink.cmp">blink.cmp</a>. The source is able to provide completion items related to a git repository. For example, if a git repository’s remote is <code class="language-plaintext highlighter-rouge">GitHub</code>, the source can get the issues, pull requests, and contributors from the <code class="language-plaintext highlighter-rouge">GitHub</code> by using <code class="language-plaintext highlighter-rouge">gh</code> or <code class="language-plaintext highlighter-rouge">curl</code>.</p> <p>Actually, the source is able to provide completion items for other git hosting platforms. This post explains how to configure additional git hosting platforms, which is useful when you are using your own git hosting platforms.</p> <p>By the way, if you find that the source has not configured the git hosting platforms you are using, please feel free to create a pull request or an issue. As for <code class="language-plaintext highlighter-rouge">v3.0.0</code>, the source supports <code class="language-plaintext highlighter-rouge">GitHub</code> and <code class="language-plaintext highlighter-rouge">GitLab</code>. For enterprise deployments (GitHub Enterprise/GitLab EE), it is possible to support by updating some configuration.</p> <h2 id="configuration">Configuration</h2> <p>The source is able to support other git hosting platforms by adding new configuration files in <code class="language-plaintext highlighter-rouge">lua/blink-cmp-git/default</code>.</p> <p>Let’s dive into how <code class="language-plaintext highlighter-rouge">GitLab</code> is supported.</p> <p>Firstly, we should create a file under <code class="language-plaintext highlighter-rouge">lua/blink-cmp-git/default</code>. We use <code class="language-plaintext highlighter-rouge">gitlab.lua</code> here.</p> <p>Secondly, we should return an object of <a href="https://github.com/Kaiser-Yang/blink-cmp-git/blob/master/lua/blink-cmp-git/types.lua#L30"><code class="language-plaintext highlighter-rouge">blink-cmp-git.GCSOptions</code></a> in this file:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">--- @type blink-cmp-git.GCSOptions</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="o">...</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="o">...</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">issue</code>, <code class="language-plaintext highlighter-rouge">pull_request</code>, and <code class="language-plaintext highlighter-rouge">mention</code> are the objects of <a href="https://github.com/Kaiser-Yang/blink-cmp-git/blob/master/lua/blink-cmp-git/types.lua#L15"><code class="language-plaintext highlighter-rouge">blink-cmp-git.GCSCompletionOptions</code></a>, which has those fields below:</p> <ul> <li><code class="language-plaintext highlighter-rouge">enable</code>: A boolean or a function. If it is a function, it should return a boolean. When <code class="language-plaintext highlighter-rouge">true</code> or the function returns <code class="language-plaintext highlighter-rouge">true</code>, the source will provide completion items for this type.</li> <li><code class="language-plaintext highlighter-rouge">triggers</code>: A list of strings or a function. If it is a function, it should return a list of strings. The source will trigger completion when the input matches these strings.</li> <li><code class="language-plaintext highlighter-rouge">get_token</code>: A string or a function. If it is a function, it should return a string. The result will be parsed to <code class="language-plaintext highlighter-rouge">get_command_args</code> field to support configure PAT of some git hosting platforms.</li> <li><code class="language-plaintext highlighter-rouge">get_command</code>: A string or a function. If it is a function, it should return a string. This is the command to get the completion items.</li> <li><code class="language-plaintext highlighter-rouge">get_command_args</code>: A list of strings or a function. If it is a function, it should return a list of strings. This is the arguments of the command to get the completion items.</li> <li><code class="language-plaintext highlighter-rouge">insert_text_trailing</code>: A string or a function. If it is a function, it should return a string. This value will be inserted when users confirm or select the completion item.</li> <li><code class="language-plaintext highlighter-rouge">separate_output</code>: A function that receives the output of the command and returns a list of any type. Each item of the return value will be assembled into a completion item.</li> <li><code class="language-plaintext highlighter-rouge">get_label</code>: A function that receives the item of the list of <code class="language-plaintext highlighter-rouge">separate_output</code> and returns a string. Label is the element related with matching.</li> <li><code class="language-plaintext highlighter-rouge">get_kind_name</code>: A function that receives the item of the list of <code class="language-plaintext highlighter-rouge">separate_output</code> and returns a string.</li> <li><code class="language-plaintext highlighter-rouge">get_insert_text</code>: A function that receives the item of the list of <code class="language-plaintext highlighter-rouge">separate_output</code> and returns a string. This value is what will be inserted when the item is confirmed or selected.</li> <li><code class="language-plaintext highlighter-rouge">get_documentation</code>: A function that receives the item of the list of <code class="language-plaintext highlighter-rouge">separate_output</code> and returns a string or an object of <a href="https://github.com/Kaiser-Yang/blink-cmp-git/blob/master/lua/blink-cmp-git/types.lua#L1"><code class="language-plaintext highlighter-rouge">blink-cmp-git.DocumentationCommand</code></a>. Documentation usually shows the description of the completion item.</li> <li><code class="language-plaintext highlighter-rouge">configure_score_offset</code>: A function receives the list of completion items. The function is used to decide how to order the completion items.</li> <li><code class="language-plaintext highlighter-rouge">on_error</code>: A function receives the return value and standard error output of the command. The function will be called when the command fails (non-zero return or non-empty standard error).</li> </ul> <h3 id="gitlab-implementation"><code class="language-plaintext highlighter-rouge">GitLab</code> Implementation</h3> <p>Let’s dive into how to implement all the features of <code class="language-plaintext highlighter-rouge">GitLab</code>.</p> <p>For <code class="language-plaintext highlighter-rouge">issue</code>, <code class="language-plaintext highlighter-rouge">pull_request</code>, and <code class="language-plaintext highlighter-rouge">mention</code>. We use a function as the default enable. This function will return <code class="language-plaintext highlighter-rouge">true</code> when the remote’s URL contains <code class="language-plaintext highlighter-rouge">gitlab.com</code>:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">default_gitlab_enable</span><span class="p">()</span>
    <span class="k">if</span>
        <span class="ow">not</span> <span class="n">utils</span><span class="p">.</span><span class="n">command_found</span><span class="p">(</span><span class="s1">'git'</span><span class="p">)</span>
        <span class="ow">or</span> <span class="ow">not</span> <span class="n">utils</span><span class="p">.</span><span class="n">command_found</span><span class="p">(</span><span class="s1">'glab'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">utils</span><span class="p">.</span><span class="n">command_found</span><span class="p">(</span><span class="s1">'curl'</span><span class="p">)</span>
    <span class="k">then</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">get_repo_remote_url</span><span class="p">():</span><span class="n">find</span><span class="p">(</span><span class="s1">'gitlab%.com'</span><span class="p">)</span>
<span class="k">end</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">enable</span> <span class="o">=</span> <span class="n">default_gitlab_enable</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">enable</span> <span class="o">=</span> <span class="n">default_gitlab_enable</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">enable</span> <span class="o">=</span> <span class="n">default_gitlab_enable</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">utils</code> is from <code class="language-plaintext highlighter-rouge">require('blink-cmp-git.utils')</code>, which provides some useful functions.</p> <p>For the triggers, we use <code class="language-plaintext highlighter-rouge">#</code> for <code class="language-plaintext highlighter-rouge">issue</code>, <code class="language-plaintext highlighter-rouge">!</code> for <code class="language-plaintext highlighter-rouge">pull_request</code>, and <code class="language-plaintext highlighter-rouge">@</code> for <code class="language-plaintext highlighter-rouge">mention</code>, which are the default triggers of <code class="language-plaintext highlighter-rouge">GitLab</code>. The code is:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">triggers</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">'#'</span> <span class="p">},</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">triggers</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">'!'</span> <span class="p">},</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">triggers</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">'@'</span> <span class="p">},</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>For <code class="language-plaintext highlighter-rouge">get_token</code>, we can use an empty string as the default value:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_token</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_token</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_token</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>For <code class="language-plaintext highlighter-rouge">get_command</code>, we hope to use <code class="language-plaintext highlighter-rouge">glab</code> when found, otherwise use <code class="language-plaintext highlighter-rouge">curl</code>. For other git hosting platforms, if there is a CLI tool, we recommend to try to use it. If not, <code class="language-plaintext highlighter-rouge">curl</code> can be as the default:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">default_gitlab_get_command</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">command_found</span><span class="p">(</span><span class="s1">'glab'</span><span class="p">)</span> <span class="ow">and</span> <span class="s1">'glab'</span> <span class="ow">or</span> <span class="s1">'curl'</span>
<span class="k">end</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_command</span> <span class="o">=</span> <span class="n">default_gitlab_get_command</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_command</span> <span class="o">=</span> <span class="n">default_gitlab_get_command</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_command</span> <span class="o">=</span> <span class="n">default_gitlab_get_command</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>Because we may get <code class="language-plaintext highlighter-rouge">glab</code> or <code class="language-plaintext highlighter-rouge">curl</code> as the command, in <code class="language-plaintext highlighter-rouge">get_command_args</code> we must set different arguments for them (we only give the code for <code class="language-plaintext highlighter-rouge">issue</code> here):</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">basic_args_for_gitlab_api</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">utils</span><span class="p">.</span><span class="n">truthy</span><span class="p">(</span><span class="n">token</span><span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="p">{</span>
        <span class="s1">'-H'</span><span class="p">,</span>
        <span class="s1">'PRIVATE-TOKEN: '</span> <span class="o">..</span> <span class="n">token</span><span class="p">,</span>
    <span class="p">}</span> <span class="k">end</span>
    <span class="k">return</span> <span class="p">{}</span>
<span class="k">end</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_command_args</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
            <span class="kd">local</span> <span class="n">args</span> <span class="o">=</span> <span class="n">basic_args_for_gitlab_api</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s1">'curl'</span> <span class="k">then</span>
                <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'-s'</span><span class="p">)</span>
                <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'-f'</span><span class="p">)</span>
                <span class="nb">table.insert</span><span class="p">(</span>
                    <span class="n">args</span><span class="p">,</span>
                    <span class="s1">'https://gitlab.com/api/v4/projects/'</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">get_repo_owner_and_repo</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
                        <span class="o">..</span> <span class="s1">'/issues'</span>
                <span class="p">)</span>
            <span class="k">else</span>
                <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'api'</span><span class="p">)</span>
                <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'projects/'</span> <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">get_repo_owner_and_repo</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="o">..</span> <span class="s1">'/issues'</span><span class="p">)</span>
            <span class="k">end</span>
            <span class="k">return</span> <span class="n">args</span>
        <span class="k">end</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>Please make sure the last argument of <code class="language-plaintext highlighter-rouge">get_command_args</code> is the URL of the API. This will make it easy for users to configure if they using enterprise version. The <code class="language-plaintext highlighter-rouge">utils.get_repo_owner_and_repo</code> is a function that getting the owner and repository name of the current git repository. The parameter <code class="language-plaintext highlighter-rouge">true</code> means that the return value is encoded as URL (using ‘%20’ instead of space). Some git hosting platforms require encoding, while some do not. You need to check the API documentation of the git hosting platform.</p> <p>For <code class="language-plaintext highlighter-rouge">insert_text_trailing</code>, we can use an empty string as the default value:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">insert_text_trailing</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">insert_text_trailing</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">insert_text_trailing</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>For the output of the command, which is a <code class="language-plaintext highlighter-rouge">JSON</code> list, we can use the method <code class="language-plaintext highlighter-rouge">json_array_separator</code> defined in <code class="language-plaintext highlighter-rouge">blink-cmp-git/lua/blink-cmp-git/default/common.lua</code> to parse it into a <code class="language-plaintext highlighter-rouge">lua</code> table:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">separate_output</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">json_array_separator</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">separate_output</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">json_array_separator</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">separate_output</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">json_array_separator</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>We strongly recommend you to create a file in <code class="language-plaintext highlighter-rouge">doc/item</code> to let users know what the item looks like. For example, the each issue item after separating:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'doc/item/gitlab/issue.lua'</span>
<span class="c1">-- All empty strings in the table will be set to nil</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">id</span> <span class="o">=</span> <span class="mi">161591198</span><span class="p">,</span>
    <span class="n">iid</span> <span class="o">=</span> <span class="mi">7758</span><span class="p">,</span>
    <span class="n">project_id</span> <span class="o">=</span> <span class="mi">34675721</span><span class="p">,</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s1">'New command to delete labels'</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">[[
### Problem to solve

Right now you can only crate or list labels, not delete them.

### Proposal

Add a new command to delete labels.

### Links / references
    ]]</span><span class="p">,</span>
    <span class="n">state</span> <span class="o">=</span> <span class="s1">'closed'</span><span class="p">,</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="s1">'2025-02-01T15:37:10.879Z'</span><span class="p">,</span>
    <span class="n">updated_at</span> <span class="o">=</span> <span class="s1">'2025-02-05T08:31:45.636Z'</span><span class="p">,</span>
    <span class="n">closed_at</span> <span class="o">=</span> <span class="s1">'2025-02-05T08:31:45.593Z'</span><span class="p">,</span>
    <span class="n">closed_by</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">id</span> <span class="o">=</span> <span class="mi">3457201</span><span class="p">,</span>
        <span class="n">username</span> <span class="o">=</span> <span class="s1">'viktomas'</span><span class="p">,</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s1">'Tomas Vik'</span><span class="p">,</span>
        <span class="n">state</span> <span class="o">=</span> <span class="s1">'active'</span><span class="p">,</span>
        <span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="n">avatar_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/uploads/-/system/user/avatar/3457201/avatar.png'</span><span class="p">,</span>
        <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/viktomas'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">'devops::create'</span><span class="p">,</span>
        <span class="s1">'group::code review'</span><span class="p">,</span>
        <span class="s1">'section::dev'</span><span class="p">,</span>
        <span class="s1">'type::feature'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">milestone</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">id</span> <span class="o">=</span> <span class="mi">4599724</span><span class="p">,</span>
        <span class="n">iid</span> <span class="o">=</span> <span class="mi">108</span><span class="p">,</span>
        <span class="n">group_id</span> <span class="o">=</span> <span class="mi">9970</span><span class="p">,</span>
        <span class="n">title</span> <span class="o">=</span> <span class="s1">'17.9'</span><span class="p">,</span>
        <span class="n">description</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
        <span class="n">state</span> <span class="o">=</span> <span class="s1">'active'</span><span class="p">,</span>
        <span class="n">created_at</span> <span class="o">=</span> <span class="s1">'2024-05-24T19:18:50.640Z'</span><span class="p">,</span>
        <span class="n">updated_at</span> <span class="o">=</span> <span class="s1">'2024-05-24T19:18:50.640Z'</span><span class="p">,</span>
        <span class="n">due_date</span> <span class="o">=</span> <span class="s1">'2025-02-14'</span><span class="p">,</span>
        <span class="n">start_date</span> <span class="o">=</span> <span class="s1">'2025-01-11'</span><span class="p">,</span>
        <span class="n">expired</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/groups/gitlab-org/-/milestones/108'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">assignees</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">{</span>
            <span class="n">id</span> <span class="o">=</span> <span class="mi">2090646</span><span class="p">,</span>
            <span class="n">username</span> <span class="o">=</span> <span class="s1">'rndmh3ro'</span><span class="p">,</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s1">'Sebastian Gumprich'</span><span class="p">,</span>
            <span class="n">state</span> <span class="o">=</span> <span class="s1">'active'</span><span class="p">,</span>
            <span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
            <span class="n">avatar_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/uploads/-/system/user/avatar/2090646/avatar.png'</span><span class="p">,</span>
            <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/rndmh3ro'</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="n">author</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">id</span> <span class="o">=</span> <span class="mi">2090646</span><span class="p">,</span>
        <span class="n">username</span> <span class="o">=</span> <span class="s1">'rndmh3ro'</span><span class="p">,</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s1">'Sebastian Gumprich'</span><span class="p">,</span>
        <span class="n">state</span> <span class="o">=</span> <span class="s1">'active'</span><span class="p">,</span>
        <span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="n">avatar_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/uploads/-/system/user/avatar/2090646/avatar.png'</span><span class="p">,</span>
        <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/rndmh3ro'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="nb">type</span> <span class="o">=</span> <span class="s1">'ISSUE'</span><span class="p">,</span>
    <span class="n">assignee</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">id</span> <span class="o">=</span> <span class="mi">2090646</span><span class="p">,</span>
        <span class="n">username</span> <span class="o">=</span> <span class="s1">'rndmh3ro'</span><span class="p">,</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s1">'Sebastian Gumprich'</span><span class="p">,</span>
        <span class="n">state</span> <span class="o">=</span> <span class="s1">'active'</span><span class="p">,</span>
        <span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="n">avatar_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/uploads/-/system/user/avatar/2090646/avatar.png'</span><span class="p">,</span>
        <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/rndmh3ro'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">user_notes_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">merge_requests_count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">upvotes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">downvotes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">due_date</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">confidential</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
    <span class="n">discussion_locked</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">issue_type</span> <span class="o">=</span> <span class="s1">'issue'</span><span class="p">,</span>
    <span class="n">web_url</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/gitlab-org/cli/-/issues/7758'</span><span class="p">,</span>
    <span class="n">time_stats</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">time_estimate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="n">total_time_spent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="n">human_time_estimate</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
        <span class="n">human_total_time_spent</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">task_completion_status</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="n">completed_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">weight</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">blocking_issues_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">has_tasks</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">task_status</span> <span class="o">=</span> <span class="s1">'0 of 0 checklist items completed'</span><span class="p">,</span>
    <span class="n">_links</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">self</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/api/v4/projects/34675721/issues/7758'</span><span class="p">,</span>
        <span class="n">notes</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/api/v4/projects/34675721/issues/7758/notes'</span><span class="p">,</span>
        <span class="n">award_emoji</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/api/v4/projects/34675721/issues/7758/award_emoji'</span><span class="p">,</span>
        <span class="n">project</span> <span class="o">=</span> <span class="s1">'https://gitlab.com/api/v4/projects/34675721'</span><span class="p">,</span>
        <span class="n">closed_as_duplicate_of</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">references</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">short</span> <span class="o">=</span> <span class="s1">'#7758'</span><span class="p">,</span>
        <span class="n">relative</span> <span class="o">=</span> <span class="s1">'#7758'</span><span class="p">,</span>
        <span class="n">full</span> <span class="o">=</span> <span class="s1">'gitlab-org/cli#7758'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">severity</span> <span class="o">=</span> <span class="s1">'UNKNOWN'</span><span class="p">,</span>
    <span class="n">moved_to_id</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">imported</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
    <span class="n">imported_from</span> <span class="o">=</span> <span class="s1">'none'</span><span class="p">,</span>
    <span class="n">service_desk_reply_to</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">epic_iid</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">epic</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">iteration</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="n">health_status</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, we can configure the getters for the completion items. For <code class="language-plaintext highlighter-rouge">issue</code>, we can use the <code class="language-plaintext highlighter-rouge">iid</code> and its title as the label, <code class="language-plaintext highlighter-rouge">iid</code> as the insert text, <code class="language-plaintext highlighter-rouge">Issue</code> as the kind name, and use some useful information to assemble the documentation:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
  <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">get_label</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'#'</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">iid</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
    <span class="k">end</span><span class="p">,</span>

    <span class="n">get_kind_name</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
      <span class="k">return</span> <span class="s1">'Issue'</span>
    <span class="k">end</span><span class="p">,</span>

    <span class="n">get_insert_text</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'#'</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">iid</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
    <span class="k">end</span><span class="p">,</span>

    <span class="n">get_documentation</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'#'</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">iid</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span>
          <span class="s1">'State: '</span><span class="p">,</span>
          <span class="n">item</span><span class="p">.</span><span class="n">discussion_locked</span> <span class="ow">and</span> <span class="s1">'locked'</span> 
            <span class="ow">or</span> <span class="n">item</span><span class="p">.</span><span class="n">draft</span> <span class="ow">and</span> <span class="s1">'draft'</span> 
            <span class="ow">or</span> <span class="n">item</span><span class="p">.</span><span class="n">state</span><span class="p">,</span>
          <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span>
        <span class="p">)</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Author: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">author</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">' ('</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">author</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">')'</span><span class="p">)</span>
        <span class="o">..</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Created at: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Updated at: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">updated_at</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
        <span class="o">..</span> <span class="p">(</span>
          <span class="n">item</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="s1">'merged'</span> 
          <span class="ow">and</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Merged  at: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">merged_at</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
            <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Merged  by: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">merged_by</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
            <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">' ('</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">merged_by</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">')'</span><span class="p">)</span>
            <span class="o">..</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span> 
          <span class="ow">or</span> <span class="n">item</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="s1">'closed'</span> 
          <span class="ow">and</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Closed  at: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">closed_at</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
            <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Closed  by: '</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">closed_by</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
            <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">' ('</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">closed_by</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">')'</span><span class="p">)</span>
            <span class="o">..</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span> 
          <span class="ow">or</span> <span class="s1">''</span>
        <span class="p">)</span>
        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">description</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Sometimes, we can not assemble the documentation from the output of the command, or we want more detailed information as the documentation. In this case, we can return an object of <code class="language-plaintext highlighter-rouge">blink-cmp-git.DocumentationCommand</code> in the <code class="language-plaintext highlighter-rouge">get_documentation</code> function, for example, the <code class="language-plaintext highlighter-rouge">get_documentation</code> of <code class="language-plaintext highlighter-rouge">mention</code>:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">get_documentation</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="n">get_token</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span>
                <span class="n">get_command</span> <span class="o">=</span> <span class="n">default_gitlab_get_command</span><span class="p">,</span>
                <span class="n">get_command_args</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
                    <span class="kd">local</span> <span class="n">args</span> <span class="o">=</span> <span class="n">basic_args_for_gitlab_api</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s1">'curl'</span> <span class="k">then</span>
                        <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'-s'</span><span class="p">)</span>
                        <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'-f'</span><span class="p">)</span>
                        <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'https://gitlab.com/api/v4/users/'</span> <span class="o">..</span> <span class="nb">tostring</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">id</span><span class="p">))</span>
                    <span class="k">else</span>
                        <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'api'</span><span class="p">)</span>
                        <span class="nb">table.insert</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="s1">'users/'</span> <span class="o">..</span> <span class="nb">tostring</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">id</span><span class="p">))</span>
                    <span class="k">end</span>
                    <span class="k">return</span> <span class="n">args</span>
                <span class="k">end</span><span class="p">,</span>
                <span class="n">resolve_documentation</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
                    <span class="kd">local</span> <span class="n">user_info</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="n">json_decode</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
                    <span class="n">utils</span><span class="p">.</span><span class="n">remove_empty_string_value</span><span class="p">(</span><span class="n">user_info</span><span class="p">)</span>
                    <span class="k">return</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="n">user_info</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">' ('</span><span class="p">,</span> <span class="n">user_info</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">')'</span><span class="p">)</span>
                        <span class="o">..</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Location: '</span><span class="p">,</span> <span class="n">user_info</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Email: '</span><span class="p">,</span> <span class="n">user_info</span><span class="p">.</span><span class="n">public_email</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Company: '</span><span class="p">,</span> <span class="n">user_info</span><span class="p">.</span><span class="n">work_information</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
                        <span class="o">..</span> <span class="n">utils</span><span class="p">.</span><span class="n">concat_when_all_true</span><span class="p">(</span><span class="s1">'Created at: '</span><span class="p">,</span> <span class="n">user_info</span><span class="p">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s1">'</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
                <span class="k">end</span><span class="p">,</span>
                <span class="n">on_error</span> <span class="o">=</span> <span class="n">common</span><span class="p">.</span><span class="n">default_on_error</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">end</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>For the <code class="language-plaintext highlighter-rouge">configure_score_offset</code>, we can sort the completion items as original order:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">configure_score_offset</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">score_offset_origin</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">configure_score_offset</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">score_offset_origin</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">configure_score_offset</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">score_offset_origin</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>For the <code class="language-plaintext highlighter-rouge">on_error</code>, we can use the <code class="language-plaintext highlighter-rouge">default_on_error</code> function defined in <code class="language-plaintext highlighter-rouge">lua/blink-cmp-git/default/common.lua</code>:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/gitlab.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">on_error</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">default_on_error</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">pull_request</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">on_error</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">default_on_error</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">mention</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">on_error</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.common'</span><span class="p">).</span><span class="n">default_on_error</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <p>At last, we just need to add this table to <code class="language-plaintext highlighter-rouge">lua/blink-cmp-git/default/init.lua</code>:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/default/init.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">return</span> <span class="p">{</span>
    <span class="n">git_centers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">gitlab</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'blink-cmp-git.default.gitlab'</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Maybe you need to update the <code class="language-plaintext highlighter-rouge">lua/blink-cmp-git/health.lua</code> to add some checks:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In file 'lua/blink-cmp-git/health.lua'</span>
<span class="c1">-- NOTE: Some code is omitted</span>
<span class="k">function</span> <span class="nc">M</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span>
    <span class="n">health</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="s1">'blink-cmp-git'</span><span class="p">)</span>
    <span class="n">check_command_executable</span><span class="p">(</span><span class="s1">'git'</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">should_check_curl</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">should_check_curl</span> <span class="o">=</span> <span class="n">should_check_curl</span>
        <span class="ow">or</span> <span class="ow">not</span> <span class="n">check_command_executable</span><span class="p">(</span><span class="s1">'glab'</span><span class="p">,</span> <span class="s1">'"glab" not found, will use "curl" instead.'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">should_check_curl</span> <span class="k">then</span> <span class="n">check_command_executable</span><span class="p">(</span><span class="s1">'curl'</span><span class="p">)</span> <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div> <p>Now it’s time to do some simple tests.</p> <p>If this update works well, you can update the <code class="language-plaintext highlighter-rouge">README.md</code> to add some information about the new git center. Then you can create a pull request to the <code class="language-plaintext highlighter-rouge">blink-cmp-git</code> repository.</p>]]></content><author><name></name></author><category term="Potpourri"/><summary type="html"><![CDATA[A guide to adding support for new Git hosting services in blink-cmp-git.]]></summary></entry><entry><title type="html">Deploy gcs</title><link href="https://kaiser-yang.github.io/blog/2025/gcs-deploy/" rel="alternate" type="text/html" title="Deploy gcs"/><published>2025-04-24T09:10:49+00:00</published><updated>2025-04-24T09:10:49+00:00</updated><id>https://kaiser-yang.github.io/blog/2025/gcs-deploy</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2025/gcs-deploy/"><![CDATA[<p>We only recommend deploying <code class="language-plaintext highlighter-rouge">gcs</code> by docker compose, which is the easiest way.</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li><code class="language-plaintext highlighter-rouge">openssl</code></li> <li><code class="language-plaintext highlighter-rouge">docker</code></li> <li><code class="language-plaintext highlighter-rouge">docker-compose</code></li> </ul> <h2 id="deployment">Deployment</h2> <p>You should download the latest release from <a href="https://github.com/CMIPT/gcs-front-end/releases">gcs-front-end</a>.</p> <p>The downloaded file is a compressed file named <code class="language-plaintext highlighter-rouge">gcs.tar.gz</code>, which contains the compiled <code class="language-plaintext highlighter-rouge">jar</code> package, <code class="language-plaintext highlighter-rouge">js</code> and <code class="language-plaintext highlighter-rouge">css</code> files, and related configuration files.</p> <p>The directory structure is as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── .env
├── .output
├── 3rdparty
├── Dockerfile
├── database
├── docker-compose.yml
├── nginx
├── start.sh
├── target
</code></pre></div></div> <p>Then you need to do some configurations for the deployment environment. You mainly need to modify the <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of the project. Those below are the environment variables you need to set:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GIT_USER_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_DRUID_PASSWORD</span><span class="o">=</span>
<span class="nv">GIT_SERVER_DOMAIN</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_HOST</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PORT</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_USERNAME</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PASSWORD</span><span class="o">=</span>
<span class="nv">SPRING_MAIL_PROTOCOL</span><span class="o">=</span>
<span class="nv">MD5_SALT</span><span class="o">=</span>
<span class="nv">JWT_SECRET</span><span class="o">=</span>
<span class="nv">GCS_SSH_MAPPING_PORT</span><span class="o">=</span>
<span class="nv">FRONT_END_REVERSE_PROXY_PORT</span><span class="o">=</span>
</code></pre></div></div> <p>You can generate <code class="language-plaintext highlighter-rouge">JWT_SECRET</code> and <code class="language-plaintext highlighter-rouge">MD5_SALT</code> using the command <code class="language-plaintext highlighter-rouge">openssl rand -base64 32</code> (make sure they are different). <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> and <code class="language-plaintext highlighter-rouge">FRONT_END_REVERSE_PROXY_PORT</code> are the ports you want to expose. <code class="language-plaintext highlighter-rouge">GCS_SSH_MAPPING_PORT</code> is used for <code class="language-plaintext highlighter-rouge">ssh</code> cloning repositories. <code class="language-plaintext highlighter-rouge">FRONT_END_REVERSE_PROXY_PORT</code> is used for accessing the front end.</p> <p><strong>NOTE</strong>: <code class="language-plaintext highlighter-rouge">MD5_SALT</code> should not be changed after set.</p> <p>Then, you should copy your certificates to make sure <code class="language-plaintext highlighter-rouge">HTTPS</code> works properly. You can use your own <code class="language-plaintext highlighter-rouge">ssl</code> certificate and make sure they are placed in the <code class="language-plaintext highlighter-rouge">nginx/ssl</code> directory with names <code class="language-plaintext highlighter-rouge">private.key</code> and <code class="language-plaintext highlighter-rouge">certificate.crt</code>.</p> <p>Or you can generate the <code class="language-plaintext highlighter-rouge">ssl</code> certificate by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 36500 <span class="nt">-newkey</span> rsa:2048 <span class="se">\</span>
  <span class="nt">-keyout</span> nginx/ssl/private.key <span class="nt">-out</span> nginx/ssl/certificate.crt
</code></pre></div></div> <p>Now you can use the command below to start the <code class="language-plaintext highlighter-rouge">gcs</code> service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <p>After this, the <code class="language-plaintext highlighter-rouge">gcs</code> service is running in the background, you can browse the front end at <code class="language-plaintext highlighter-rouge">https://your-domain:FRONT_END_REVERSE_PROXY_PORT</code>.</p>]]></content><author><name></name></author><category term="Java"/><category term="Linux"/><category term="Nginx"/><category term="Docker"/><summary type="html"><![CDATA[This post introduces how to deploy gcs on a server using Docker.]]></summary></entry><entry><title type="html">IEEE Xtreme 18.0 题解</title><link href="https://kaiser-yang.github.io/blog/2024/ieeextreme-18-solution/" rel="alternate" type="text/html" title="IEEE Xtreme 18.0 题解"/><published>2024-10-28T09:10:49+00:00</published><updated>2024-10-28T09:10:49+00:00</updated><id>https://kaiser-yang.github.io/blog/2024/ieeextreme-18-solution</id><content type="html" xml:base="https://kaiser-yang.github.io/blog/2024/ieeextreme-18-solution/"><![CDATA[<h1 id="two-fridges"><a href="https://csacademy.com/ieeextreme-practice/task/two-fridges">Two Fridges</a></h1> <p>由于题目中的温度范围非常小，我们只需要从小到大枚举温度，对于每个枚举，检查是否所有区间都被覆盖。 第一个覆盖所有区间的温度对即是答案。如果找不到输出 \(-1\) 即可。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/two_fridges.cpp">two_fridges.cpp</a></p> <h1 id="star-road"><a href="https://csacademy.com/ieeextreme-practice/task/star-road">Star Road</a></h1> <p>对于本题我们可以使用线段树和线段树的合并来解决这个问题。</p> <p>具体的，我们首先需要将 \(star\) 离散化，使得其值在 \([1, len]\) 之间， 其中 \(len\) 是不同的星星的个数。 然后我们从任意一个结点开始进行 <code class="language-plaintext highlighter-rouge">DFS</code>，当我们到达一个结点时，我们为这个结点建立一个线段树。</p> <p>对于线段树的叶子结点 (其表示的区间设为 \([l, l]\) ) ，它会保存两个值：</p> <ul> <li>\(LIS\)：以 \(l\) 结尾的最长递增子序列的长度。</li> <li>\(LDS\)：以 \(l\) 结尾的最长递减子序列的长度。</li> </ul> <p>对于线段树的非叶子结点 (其表示的区间为 \([l, r]\) )，它会保存两个值：</p> <ul> <li>\(LIS\)：其子结点的 \(LIS\) 的最大值。</li> <li>\(LDS\)：其子结点的 \(LDS\) 的最大值。</li> </ul> <p>当我们开始回溯时，我们可以得到：</p> <ul> <li>\(son[i].LIS\)：子结点 \(i\) 所在线段树在区间 \([1, star[u] - 1]\) 的 \(LIS\)。</li> <li>\(son[i].LDS\)：子结点 \(i\) 所在线段树在区间 \([star[u] + 1, len]\) 的 \(LDS\)。</li> </ul> <p>我们使用 \(star[u] - 1\) 和 \(star[u] + 1\) 是为了保证 \(star[u]\) 可以被选中， 因此如果我们选中 \(u\)， 那么我们可以得到 \(ans = max(ans, son[i].LIS + 1 + son[j].LDS), i \ne j\)， 这里可以分别按照 \(LID\) 和 \(LDS\) 排序来规避掉枚举 \(i, j\) 的问题。</p> <p>那么如果我们不选中 \(u\)，我们如何得到这部分的答案呢？ 我们可以在合并线段树的过程中解决这个问题。 在合并线段树 \(a\) 和线段树 \(b\) 时，设我们当前处于区间 \([l, r]\)， 我们可以得到 \(a\) (或 \(b\)) 在 \([l, mid]\) 区间的 \(LIS\)， 以及 \(b\) (或 \(a\)) 的 \([mid + 1, r]\) 区间的 \(LDS\)， 那么这两部分可以合并，这些合并包括了不选中 \(u\) 的部分。 也就是 \(ans = max(ans, LIS[lc[a]] + LDS[rc[b]], LIS[lc[b]] + LDS[rc[a]])\)。</p> <p>当我们完成了所有的结点的合并后，我们需要进行两次单点更新：</p> <ul> <li>如果 \(max(son[i].LIS + 1)\) 比线段树 \(u\) 在 \(star[u]\) 处的 \(LIS\) 大， 我们需要将其更新为 \(max(son[i].LIS + 1)\)， 这表示以 \(star[u]\) 结尾的最长递增子序列的长度发生了变化。</li> <li>如果 \(max(son[i].LDS + 1)\) 比线段树 \(u\) 在 \(star[u]\) 处的 \(LDS\) 大， 我们需要将其更新为 \(max(son[i].LDS + 1)\)， 这表示以 \(star[u]\) 结尾的最长递减子序列的长度发生了变化。</li> </ul> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/star_road.cpp">star_road.cpp</a></p> <h1 id="increasing-table"><a href="https://csacademy.com/ieeextreme-practice/task/increasing-table">Increasing table</a></h1> <p>考虑到当第一行的元素确定后，第二行的元素也就确定了，因此我们只需要计算第一行的方案数即可。 对于输入，我们可以维护一个序列，序列中的元素表示第一行可以填入的数， 以及这个数是否一定要填入到第一行，序列按照可以填入的数从小到大排序。 现在我们需要计算从这个序列中选出 \(N\) 个数的方案数。 如果我们不考虑每一列是否满足递增关系，那么我们可以很轻松的用动态规划解决这个问题。具体的， 用 \(dp[i][j][0]\) 表示前 \(i\) 个数中选出 \(j\) 个数，且第 \(i\) 个数不被选择时的方案数； 用 \(dp[i][j][1]\) 表示前 \(i\) 个数中选出 \(j\) 个数，且第 \(i\) 个数被选择时的方案数。</p> \[\begin{aligned} dp[i][j][0] &amp; = \begin{cases} 0，\text{当前必选} \\ dp[i - 1][j][0] + dp[i - 1][j][1]，\text{其他} \end{cases} \\ dp[i][j][1] &amp; = dp[i - 1][j - 1][0] + dp[i - 1][j - 1][1] \end{aligned}\] <p>我们现在考虑必须要让列也递增的情况，我们来依次来考虑第一行的每个数最大可能的取值：</p> <ul> <li>对于第一个数，其只能是 \(1\)。</li> <li>对于第二个数，其最大是 \(3\)，因为当第二个数是 \(4\) 的时候， 第二行一定得出现 \(2，3\) 此时第二列一定不可能递增。</li> <li>对于第三个数，其最大是 \(5\)，因为当第三个数是 \(6\) 的时候， 第二行一定得出现 \(3，4，5\) (或者更小的数字), 此时第三列一定不可能递增。</li> <li>……</li> <li>对于第 \(i\) 个数，其最大是 \(2i - 1\)。</li> </ul> <p>不难发现，对于一个方案中的第 \(i\) 个数，若其均小于等于 \(2i - 1\)，那么方案一定满足列是递增的。</p> <p>因此，我们只需要对上面的转移方程增加一个限制条件即可：</p> \[\begin{aligned} dp[i][j][0] &amp; = \begin{cases} 0，\text{当前必选} \\ dp[i - 1][j][0] + dp[i - 1][j][1]，\text{其他} \end{cases} \\ dp[i][j][1] &amp; = \begin{cases} dp[i - 1][j - 1][0] + dp[i - 1][j - 1][1]，\text{当前小于等于} 2i - 1 \\ 0，\text{其他} \end{cases} \end{aligned}\] <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/increasing_table.cpp">increasing_table.cpp</a></p> <h1 id="bounded-tuple"><a href="">Bounded tuple</a></h1> <p>不会。</p> <h1 id="laser-defense"><a href="https://csacademy.com/ieeextreme-practice/task/laser-defense">Laser Defense</a></h1> <p>我们将激光分成四种：</p> <ul> <li>\(a_u\)：\(a_u[i]\) 表示 \(A\) 点发出的第 \(i\) 条与上边界的交点座标。</li> <li>\(a_r\)：\(a_r[i]\) 表示 \(A\) 点发出的第 \(i\) 条与右边界的交点座标。</li> <li>\(b_u\)：\(b_u[i]\) 表示 \(B\) 点发出的第 \(i\) 条与上边界的交点座标。</li> <li>\(b_l\)：\(b_l[i]\) 表示 \(B\) 点发出的第 \(i\) 条与左边界的交点座标。</li> </ul> <p>我们分别对上面四种激光进行排序。</p> <p>我们首先考虑只有 \(A\) 点激光的情况，此时被分成了 \(len(a_u) + len(a_r) + 1\) 个区域。</p> <p>接着对于某个 \(B\) 点发出的激光，如果其到达左边界， 那么此时区域个数会增加 \(len(a_u) + len(a_r) + 1\)；如果其到达上边界， 此时我们可以用二分查找在 \(a_u\) 中找到有多少个激光出现在其左边，不妨设为 \(x\)， 那么此时区域个数会增加 \(len(a_u) + len(a_r) + 1 - x\)。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/laser_defense.cpp">laser_defense.cpp</a></p> <h1 id="another-sliding-window-problem"><a href="https://csacademy.com/ieeextreme-practice/task/another-sliding-window-problem">Another Sliding Window Problem</a></h1> <p>首先我们不难发现要获得一个序列的 <code class="language-plaintext highlighter-rouge">optimal cost</code>，如果序列有偶数个元素，那么最大的要和最小的配对， 第二大的要和第二小的配对，以此类推；如果序列有奇数个元素，那么最大的元素要单独拎出来， 而其余元素按照序列有偶数个元素的情况处理。</p> <p>有了上面的结论，我们可以有以下推论：</p> <blockquote> <p>如果一个序列的 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\)， 那么删除最大的元素后的序列的 <code class="language-plaintext highlighter-rouge">optimal cost</code> 一定小于等于 \(x\)。</p> </blockquote> <p>证明如下：</p> <blockquote> <p>如果一开始序列有奇数个元素，那么删除最大的元素后，序列有偶数个元素， 那么 <code class="language-plaintext highlighter-rouge">optimal cost</code> 的取值集合少了最后一个元素，因此 <code class="language-plaintext highlighter-rouge">optimal cost</code> 不会增加。 如果一开始序列有偶数个元素，那么删除最大的元素后，序列有奇数个元素， 那么 <code class="language-plaintext highlighter-rouge">optimal cost</code> 的取值集合中某一个元素变小了，因此 <code class="language-plaintext highlighter-rouge">optimal cost</code> 不会增加。</p> </blockquote> <p>利用上面的推论，当我们计算出一个满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 的区间 \([l, r]\) 后， 那么 \([l, r - 1], [l, r - 2], \cdots, [l, l]\) 一定也满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\)， 如果我们用 \(s[i]\) 表示 \([1, i]\) 的前缀和， 那么这些区间的对答案的贡献为：\(s[r] - s[l - 1] - (r - l + 1) \times a[l]\)。</p> <p>接下来我们考虑对于一个给定的 \(l\)， 如何快速求出最大的 \(r\) 使得 \([l, r]\) 满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\)。</p> <p>我们还是需要利用 <code class="language-plaintext highlighter-rouge">optimal cost</code> 的配对性质，首先我们先找到最后一个小于等于 \(x\) 的元素的位置， 不妨设为 \(r\)，初始 \(l = r\)，那么对于当前的区间 \([l, r]\) 中的 \(r\) 一定是满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 最大的。接下来我们考虑如何求解 \(l - 1\) 对应的最大的 \(r'\)。 实际上 \(r'\) 只有可能是 \(\{r - 1, r, r + 1\}\) 中的一个。这是因为：</p> <ul> <li>如果 \([l, r]\) 的长度是偶数，那么 \([l - 1, r]\) 的长度是奇数， 此时 \([l - 1, r]\) 一定是满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 的， 因为此时可以让 \(a[l - 1]\) 单独一组；同时按照匹配规则， 如果 \(a[l - 1] + a[r + 1] \le x\), 那么 \([l - 1, r + 1]\) 也一定是满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 的。 而对于 \([l - 1, r + 2]\) 一定是不满足的，因为如果该区间满足， 那么 \([l - 1, r + 1]\) 也一定满足，而 \([l - 1, r + 1]\) 长度是偶数， 此时我们把 \(a[l - 1]\) 删除掉，那么 \([l, r + 1]\) 一定满足，这与 \(r\) 是最大的矛盾。 所以当前情况下 \(r'\) 只有可能是 \(\{r, r + 1\}\) 中的一个。</li> <li>如果 \([l, r]\) 的长度是奇数，那么 \([l - 1, r]\) 的长度是偶数， 此时如果 \(a[l - 1] + a[r] \le x\)， 那么 \([l - 1, r]\) 一定是满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 的， 进一步的有如果 \(a[r + 1] \le x\) 成立， 那么 \([l - 1, r + 1]\) 也一定是满足 <code class="language-plaintext highlighter-rouge">optimal cost</code> 小于等于 \(x\) 的。 而对于 \([l - 1, r + 2]\) 一定是不满足的，因为如果该区间满足， 而 \([l - 1, r + 2]\) 长度是偶数， 此时我们把 \(a[l - 1], a[r + 2]\) 同时删除掉，那么 \([l, r + 1]\) 一定满足， 这与 \(r\) 是最大的矛盾。而如果一开始就不满足 \(a[l - 1] + a[r] \le x\)， 那么由于 \([l, r]\) 区间长度是奇数，我们可以删除 \(a[r]\)，增加 \(a[l - 1]\)， 由于 \([l, r]\) 满足， 我们用一个更小的数字取替换了一个最大的数字形成的 \([l - 1, r - 1]\) 一定满足。 所以当前情况下 \(r'\) 只有可能是 \(\{r - 1, r, r + 1\}\) 中的一个。</li> </ul> <p>因此我们只需要按照上面的过程，每次减少 \(l\) 后，计算出新的 \(r\) 对答案进行统计即可。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/another_sliding_window_problem.cpp">another_sliding_window_problem.cpp</a></p> <h1 id="ieee754-emulator"><a href="https://csacademy.com/contest/ieeextreme-practice/task/ieee754-emulator/">IEEE754 Emulator</a></h1> <p>逻辑并不复杂，有几点需要注意的：</p> <ul> <li>不能直接计算 \(a * b + c\)，应该使用相关的库函数， 例如 <code class="language-plaintext highlighter-rouge">C++</code> 的 <code class="language-plaintext highlighter-rouge">std::fma</code>，<code class="language-plaintext highlighter-rouge">Python</code> 的 <code class="language-plaintext highlighter-rouge">Math.fma</code> 等。</li> <li>类型之间的转换，例如 <code class="language-plaintext highlighter-rouge">int</code> 和 <code class="language-plaintext highlighter-rouge">float</code> 之间的转换，应该使用 <code class="language-plaintext highlighter-rouge">union</code> 或者 <code class="language-plaintext highlighter-rouge">memcpy</code> 等方法，</li> <li>输出要保留前导零，也就是在结果长度小于 <code class="language-plaintext highlighter-rouge">8</code> 的时候需要在前面补零。</li> </ul> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/ieee754_emulator.cpp">ieee754_emulator.cpp</a></p> <h1 id="triumvirates"><a href="">Triumvirates</a></h1> <p>不会。</p> <h1 id="stick"><a href="https://csacademy.com/ieeextreme-practice/task/stick">Stick</a></h1> <p>除去第一个正方形外，每增加一个正方形，所增加的面积是一个定值， 其增加值为单个正方形的面积减去两个正方形的公共部分的面积。因此最终答案为 \(4NL^2 - (N-1)S\)。 其中 \(S\) 为两个连续正方形相交部分的面积。</p> <p>如果直接使用上面的公式，那么乘法的时候可能会溢出 ，因此我们可以将上面的公式进行变形成 \(N(4L^2 - S) + S\)。 并且最后得使用 <code class="language-plaintext highlighter-rouge">unsigned long long</code> 才行。当然 <code class="language-plaintext highlighter-rouge">Life is short; you need Python</code>。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/stick.cpp">stick.cpp</a></p> <h1 id="increasing-decreasing-permutations"><a href="">Increasing-decreasing permutations</a></h1> <p>不会。</p> <h1 id="cheap-construction"><a href="https://csacademy.com/ieeextreme-practice/task/cheap-construction">Cheap Construction</a></h1> <p>首先，对于本题，答案中所选的字符串一定可以是原始串的子串。这是因为如果我们不选择原始串的子串， 那么最终的联通块一定是 \(N\)，所以对于联通块个数小于 \(N\) 情况我们一定要选择原始串的子串。 而对于要让联通块个数为 \(N\) 的情况，我们可以选择一个长度为 \(1\) 的子串。</p> <p>有了上面的结论我们只需要枚举所有的子串，计算每个子串会产生的联通块个数即可。</p> <p>对于如何计算一个子串的联通块个数，我们需要先计算出所有子串的出现位置。这一步当然不能用 <code class="language-plaintext highlighter-rouge">KMP</code> 算法， 如果使用 <code class="language-plaintext highlighter-rouge">KMP</code> 算法整体复杂度就变成 \(O(N^3)\) 了，我们可以直接枚举所有的子串的起始位置， 将其记录下来，而不是单独去计算每个子串的出现位置。</p> <p>想到这一步之后又存在新的问题，我们不能直接使用一个字典去存储每个子串出现的位置， 因为不管是有序字典还是无序字典，其在对一个字符串进行映射的时候必须要遍历整个字符串， 这样复杂度又变成了 \(O(N^3)\)。</p> <p>正确的做法是使用字符串哈希，这样可以在 \(O(N)\) 的复杂度预处理后， 只需要 \(O(1)\) 复杂度即可获取任意子串的哈希值 (本题中得使用双哈希)。</p> <p>经过上面的操作后，我们获取到了每个子串的出现位置，接下来我们考虑如何计算一个子串的联通块个数。 首先我们需要保证一个子串的出现位置是从小到大排序的，这一步可以在前面枚举的时候实现， 接着我们遍历出现位置，同时记录上一个出现位置的结尾 \(las\) (即 \(las\_start\_pos + len - 1\) )， 比较 \(las\) 和当前起始位置 \(now\_start\_pos\) ， 如果 \(las \ge now\_start\_pos\) ，这意味着当前的子串和上一次的子串有重叠，此时不会产生新的联通块； 如果 \(las \lt now\_start\_pos\) ，那么从上一次的结尾到当前位置之前的将会形成新的联通块， 也就是个数会增加 \(now\_start\_pos - las\)。</p> <p>最后一点，本题对常数要求非常高，如果你按照上面的思路写，那么会 <code class="language-plaintext highlighter-rouge">TLE</code>。这里给出一种可行的优化方案：</p> <blockquote> <p>我们并不在一开始枚举所有的子串，而是按照长度递增的方式枚举子串， 每计算出一个长度的所有子串出现位置后就进行一次答案的更新， 这样能够让字典中存储的子串个数不超过 \(N\) 个，从而实现常数优化的目的， 即使是这样你也需要注意其他地方的细节，尽可能的优化常数， 因为我的代码在最慢的一个测试点上花费了 \(946ms\)，这非常接近 <code class="language-plaintext highlighter-rouge">TLE</code>。</p> </blockquote> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/cheap_construction.cpp">cheap_construction.cpp</a></p> <h1 id="disparate-date-sets"><a href="https://csacademy.com/ieeextreme-practice/task/disparate-datasets">Disparate Date Sets</a></h1> <p>本题逻辑实际上没有任何的难点，但是如果我使用以下的方式对输入进行处理，将会出现问题：</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">str</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">string</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">Record</span> <span class="n">tmp_record</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">ch</span> <span class="o">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">','</span> <span class="o">&amp;&amp;</span> <span class="n">cnt</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">tmp_record</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">tmp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">'\"'</span><span class="p">)</span> <span class="p">{</span> <span class="n">cnt</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">tmp_record</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>而如果我将上面的读入替换成 <code class="language-plaintext highlighter-rouge">Python</code> 中的 <code class="language-plaintext highlighter-rouge">csv</code> 进行处理，就能够得到正确的结果。</p> <p>我目前仍然没有发现上面的读取方式对于合法的输入会存在什么问题。我们已经确定了输入一定满足以下的情况：</p> <ul> <li><code class="language-plaintext highlighter-rouge">title</code> 和 <code class="language-plaintext highlighter-rouge">acronyms</code> 中开头和结尾一定为单个双引号。</li> <li>除去 <code class="language-plaintext highlighter-rouge">title</code> 和 <code class="language-plaintext highlighter-rouge">acronyms</code> 开头和结尾的双引号后，其中不存在奇数个连续的双引号。</li> </ul> <p>如果你发现这段读入会对某些输入产生错误，请告诉我。</p> <p>代码部分将会提供使用 <code class="language-plaintext highlighter-rouge">csv</code> 读取数据并处理的 <code class="language-plaintext highlighter-rouge">Python</code> 代码。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/disparate_datasets.py">disparate_datasets.py</a></p> <h1 id="queries"><a href="https://csacademy.com/ieeextreme-practice/task/queries">Queries</a></h1> <p>首先感谢 <a href="https://codeforces.com/profile/cancaneed">cancaneed</a> 提供的思路。</p> <p>本题我们可以采用两次分块来进行实现。分块维护区间和。</p> <p>其中第一个分块用于处理在原始区间上面的更新，我们记为 \(ori\)， 第二个分块用于维护在 \(p\) 上面的更新，我们记为 \(perm\)。</p> <p>对于在原始区间上的更新，我们在 \(ori\) 上更新后 (\(ori.update(l, r, c)\))， 还需要考虑其对 \(p\) 上查询的影响。例如， 如果之前存在 \([l, r]\) 区间上的更新增加 \(c\)， 此时我们查询索引为 \(p_{l'}, p_{l'+1}, \cdots, p_{r'}\) 的和， 那么我们需要知道 \([l, r]\) 中有多少个下标在集合 \(\{p_{l'}, p_{l'+1}, \cdots, p_{r'}\}\) 中， 如果我们将这个数字记为 \(cnt\)，那么此次查询就需要增加 \(c \times cnt\)。 所以在执行原始区间的更新时，我们还需要更新此次操作对 \(perm\) 的影响， 我们将这一部分记为 \(perm\_sum\)， 其中 \(perm\_sum[i]\) 表示对原始区间上的更新会使 \(perm\) 的第 \(i\) 块增加 \(perm\_sum[i]\)。 具体的, 对于更新 \((l, r, c)\)， 我们需要进行如下更新：</p> \[perm\_sum[i] = perm\_sum[i] + c \times (perm\_cnt[i][r] - perm\_cnt[i][l - 1]), 0 \le i \le BLOCK\_CNT\] <p>这里的 \(perm\_cnt[i][j]\) 表示在 \(ori\) 的第 \(i\) 块维护的下标对应到 \(p\) 后， 有多少是小于等于 \(j\) 的。</p> <p>对于在 \(p\) 上的更新，同理我们需要考虑其对 \(ori\) 的影响。我们将这一部分记为 \(ori\_sum\)， 其中 \(ori\_sum[i]\) 表示对 \(p\) 上的更新会使 \(ori\) 的第 \(i\) 块增加 \(ori\_sum[i]\)。 具体的，对于更新 \((l, r, c)\)， 我们需要进行如下更新：</p> \[ori\_sum[i] = ori\_sum[i] + c \times (ori\_cnt[i][r] - ori\_cnt[i][l - 1]), 0 \le i \le BLOCK\_CNT\] <p>这里的 \(ori\_cnt[i][j]\) 表示在 \(perm\) 的第 \(i\) 块维护的下标对应到 \(ori\) 后， 有多少是小于等于 \(j\) 的。</p> <p>对于原始区间上的查询操作，首先需要查询 \(ori.query(l, r)\)， 对于覆盖到整个块 \(id\) 的部分，我们需要累加 \(ori\_sum[id]\)，对于部分块， 我们必须依次在 \(perm\) 上进行单点查询， 因此我们需要维护 \(inv\_p[i]\) 表示原始下标 \(i\) 在 \(perm\) 上的位置， 即 \(inv\_p[p[i]] = i\)。</p> <p>对于 \(p\) 上的查询操作，首先需要查询 \(perm.query(l, r)\)， 对于覆盖到整个块 \(i\) 的部分，我们需要累加 \(perm\_sum[i]\)，对于部分块， 我们必须依次在 \(ori\) 上进行单点查询，也就是去查询 \(ori\) 中 \(p[i]\) 处的值。</p> <p>上面的操作时间复杂度均为 \(O({N \over BLOCK\_SIZE} + BLOCK\_SIZE)\) 的。</p> <p>最后我们还要考虑计算 \(perm\_cnt\) 和 \(ori\_cnt\) 的时间复杂度，这一部分， 我们预处理的时候枚举块数量以及下标即可，因此时间复杂度为 \(O({N^2 \over BLOCK\_SIZE})\)。</p> <p>由于空间的限制，我们的 \(BLOCK\_SIZE\) 不能太小， 既不能选择理论最优值 \(BLOCK\_SIZE = \sqrt{N}\)， 此时我们可以选择 \(BLOCK\_SIZE = 600\)，能够保证通过。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/queries.cpp">queries.cpp</a></p> <h1 id="doubled-sequence"><a href="">Doubled Sequence</a></h1> <p>不会。</p> <h1 id="icarus"><a href="https://csacademy.com/ieeextreme-practice/task/icarus">Icarus</a></h1> <p>我们记 \(l_c\) 表示 \(S\) 中 <code class="language-plaintext highlighter-rouge">L</code> 的出现次数，\(r_c\) 表示 \(S\) 中 <code class="language-plaintext highlighter-rouge">R</code> 的出现次数， \(u_c\) 表示 \(S\) 中 <code class="language-plaintext highlighter-rouge">U</code> 的出现次数。</p> <p>我们总可以通过构建一条链使其满足题目条件。这里我们以 \(l_c \le u_c\) 为例， 其余的情况可以进行类似的讨论。</p> <p>当 \(l_c \le u_c\) 时，我们可以构建一条有 \(u_c + 2\) 个结点的链， 链上的结点均以左结点的方式进行连接。这样构造后，输入中的 <code class="language-plaintext highlighter-rouge">R</code> 将可以被忽略， 同时我们可以在这个链上找到一个结点， 其满足从当前结点触发的第一轮操作中所有的 <code class="language-plaintext highlighter-rouge">L</code> 和 <code class="language-plaintext highlighter-rouge">U</code> 都是合法移动且最深的结点不会被访问到。</p> <p>如何找到这样的点呢？我们可以先假设我们在一个两端无限长的链上的某个结点， 初始化 \(depth\) 为 \(0\)，我们遍历输入中的移动操作，对于 <code class="language-plaintext highlighter-rouge">L</code> 我们将 \(depth\) 减一， 对于 <code class="language-plaintext highlighter-rouge">U</code> 我们将 \(depth\) 加一，记录这个过程中最小的 \(depth\)，不妨记为 \(high\)， 如果我们将链上的结点按照深度从低到高进行编号，那么我们从编号为 \(-high + 1\) 的结点出发， 后续的所有操作一定不能访问到编号为 \(u_c + 2\) 的结点。</p> <p>这是因为我们从编号为 \(-high + 1\) 的点出发的话，第一轮操作肯定都是合法的， 且不会到达编号为 \(u_c + 2\) 的结点； 对于第二轮操作，我们的起点一定是编号 \(-high + 1\) 的结点或者其祖先。</p> <p>如果第二轮起点是编号为 \(-high + 1\) 的结点，那么此后续操作便开始循环，不会到达 \(u_c + 2\)；</p> <p>如果第二轮起点是编号为 \(-high + 1\) 的结点的祖先，那么第二轮可能会有一些 <code class="language-plaintext highlighter-rouge">U</code> 操作失效， 实际上第二轮的起点与第一轮的起点的深度差的绝对值 (不妨记为 \(x\)) 就是 <code class="language-plaintext highlighter-rouge">U</code> 操作最多失效的次数， 下面来解释为什么第二轮的 <code class="language-plaintext highlighter-rouge">U</code> 操作最多失效 \(x\) 次。如果有多于 \(x\) 次的 <code class="language-plaintext highlighter-rouge">U</code> 操作失效， 不妨记为 \(x'\)，此时我们假设链变成无限长， 那么这 \(x'\) 次失效的 <code class="language-plaintext highlighter-rouge">U</code> 操作将会使到达的最低深度减少 \(x'\)， 这意味着我们的起点深度较上一轮应该减少 \(x'\)，这就出现了矛盾。</p> <p>这个结论意味着，当 <code class="language-plaintext highlighter-rouge">U</code> 的失效次数达到最大值时，我们第二轮的终点也不过是回到了第一轮的起点， 且这个过程中到达的最大深度也不过是第一轮到达的最大深度；而其余情况下， 我们的终点深度一定小于第一轮的起点深度，到达的最大深度也一定小于第一轮到达的最大深度。 继续这样推下去，我们便可以发现之后每一轮都不会到达 \(u_c + 2\)。</p> <p>这里还有一点需要注意的是，如果 \(l_c = 0\)，而 \(u_c = 1\)， 此时按照上面的方法会构造出 \(3\) 个结点的树，这一点不满足题目的限制条件。 因此我们需要对这一部分进行特判。这里我们只需要构造一个有 \(2\) 个结点的树， \(2\) 为 \(1\) 的左结点，那么从 \(1\) 号结点出发永远不会到达 \(2\) 号结点。 当然我们可以在上面的思路中选择构造结点个数为 \(2 (l_c + u_c + r_c)\) 的链， 这样也可以解决这一部分。</p> <p>其余的情况可以进行类似的讨论。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/icarus.cpp">icarus.cpp</a></p> <h1 id="power-of-three"><a href="https://csacademy.com/ieeextreme-practice/task/power-of-three">Power of three</a></h1> <p>设 \(M\) 表示输入 \(N\) 的位数，我们计算出 \(x_{min} = (M - 1) \lfloor \log_3 10 \rfloor\)， 不难发现如果有解 \(x\)，那么 \(x \ge x_{min}\) 时，且在理论上 \(x - x_{min} \le 3\)， 这是因为 \(3^3 = 27\)，也就是乘以 \(3\) 个 \(3\) 之后，位数会增加 \(1\)。</p> <p>同时对于解 \(x\) 我们有 \(3^x \equiv N \pmod{P}\)，其中 \(P\) 是任意的数， 因此我们可以提前确定多个质数，从 \(x = x_{min}\) 开始， 然后检查是否对于这些质数都有 \(3^x \equiv N \pmod{P}\)，如果成立， 我们可以大概率认为这个 \(x\) 是答案。如果 \(x\) 在 \(3\) 次递增的过程中没有找到答案， 那么我们输出 \(-1\) 即可。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/power_of_three.cpp">power_of_three.cpp</a></p> <h1 id="halving"><a href="https://csacademy.com/ieeextreme-practice/task/halving">Halving</a></h1> <p>我们先考虑什么情况下无解。首先我们先尝试将能确定的元素进行确定，因为这些元素对方案数没有贡献。 哪些元素能够被确定下来？一共有两种：</p> <ul> <li>已经给定的元素。</li> <li>对于第 \(i\) 对，其中一个元素为 \(-1\)，另一个元素不为 \(B_i\)， 那么可以将为 \(-1\) 的元素确定为 \(B_i\)。</li> </ul> <p>经过上述操作后，我们只需要检查确定的元素是否只出现了一次， 以及如果第 \(i\) 对中两个元素同时被确定其是否满足最小值或最大值为 \(B_i\) 来判断是否有解。</p> <p>接下来我们考虑如何求解有解情况下的方案数。我们可以使用动态规划的方法， 原问题等价于求使用没有在 \(B\) 中出现的元素与在 \(B\) 中的元素进行配对 (不考虑顺序) 的方案数， 该方案数与答案相比只是少乘了 \(2^k\)，这是因为第一步填入确定元素的操作后， 我们需要确定的元素对只可能出现以下两种情况：</p> <ul> <li>两个元素均为 \(-1\)。</li> <li>一个元素为 \(-1\)，另一个元素为 \(B_i\)。</li> </ul> <p>对于第一种情况，我们可以确定其中一个为 \(B_i\)，另一个为比 \(B_i\) 大或者小的元素， 由于两者位置不确定，所以此时等价于求解能与 \(B_i\) 配对的元素的个数再乘以 \(2\)。</p> <p>对于第二种情况，等价于求解能与 \(B_i\) 配对的元素的个数。</p> <p>因此我们可以用 \(dp[i][j][k]\) 来表示用 \(1, 2, ..., i\) 中不在 \(B\) 中的元素与在 \(B\) 中的元素配对， 且在 \(1, 2, ..., i\) 中有 \(j\) 个在 \(B\) 中的元素未配对有 \(k\) 个不在 \(B\) 中的元素未配对 (这个定义有点拗口)。</p> <p>接下来我们考虑如何进行转移，首先我们需要确定 \(i\) 的三种情况：</p> <ul> <li>\(i\) 是一个已经拥有确定匹配的元素。</li> <li>\(i\) 未拥有确定匹配且在 \(B\) 中。</li> <li>\(i\) 未拥有确定匹配且不在 \(B\) 中。</li> </ul> <p>这里的拥有确定匹配是指：如果一对元素的两个元素均在第一步中被确定，那么这两个元素就拥有确定匹配。</p> <p>对于第一种情况，显然 \(dp[i][j][k] = dp[i - 1][j][k]\)。</p> <p>对于第二种情况，我们需要根据是需要找比 \(i\) 大的元素还是比 \(i\) 小的元素进行转移：</p> \[dp[i][j][k] = \begin{cases} dp[i - 1][j][k]，\text{找比} i \text{大的元素} \\ dp[i - 1][j[k + 1] \times (k + 1)，\text{找比} i \text{小的元素} \end{cases}\] <p>第二种情况的第一个转移方程是因为我们不能在 \(1, 2, 3, ..., i - 1\) 中找到比 \(i\) 大的元素， 所以此时只能暂时不对 \(i\) 进行配对。 第二个转移方程则是所有在 \(1, 2, 3, ..., i - 1\) 中不在 \(B\) 中的元素未配对的元素均可以与 \(i\) 配对， 且配对后这一部分未配对的元素个数会减少 \(1\)。</p> <p>对于第三种情况，由于在第二种情况中我们保证了 \(B\) 中未参与配对的元素一定是比 \(i\) 小的， 所以此时我们有以下的转移方程：</p> \[dp[i][j][k] = dp[i - 1][j][k - 1] + dp[i - 1][j + 1][k] \times (j + 1)\] <p>第三种情况中的 \(dp[i - 1][j][k - 1]\) 表示我们可以暂时不对 \(i\) 进行配对， 而 \(dp[i - 1][j + 1][k] \times (j + 1)\) 代表我们可以选择任意一个在 \(B\) 中未参与配对的元素与 \(i\) 配对， 配对之后这一部分未配对的元素个数会减少 \(1\)。</p> <p>通过观察三部分的方程不难发现我们可以使用滚动数组将空间复杂度从 \(O(N^3)\) 优化到 \(O(N^2)\)。</p> <p>最后的答案即为 \(dp[2N][0][0] \times 2^k\)，其中 \(k\) 表示初始有多少对元素对中的元素同时为 \(-1\)。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/halving.cpp">halving.cpp</a></p> <h1 id="kings-order"><a href="https://csacademy.com/ieeextreme-practice/task/kings-order">King’s Order</a></h1> <p>直接使用拓扑排序即可，只是在拓扑排序中需要将普通队列替换成优先队列。 优先队列的比较器设置为题目要求即可。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/kings_order.cpp">kings_order.cpp</a></p> <h1 id="balls"><a href="https://csacademy.com/ieeextreme-practice/task/balls">Balls</a></h1> <p>本题是 <code class="language-plaintext highlighter-rouge">Codeforces</code> 在十三年前某场比赛的原题， 原题的链接：<a href="https://codeforces.com/problemset/problem/93/E">Codeforces 93 E. Lostborn</a>。</p> <p>本题的思路来源于题解：<a href="https://codeforces.com/blog/entry/2216">Codeforces Beta Round 76 - задача Е div 1 глазами ее автора.</a></p> <p>首先我们需要反向考虑问题，具体的， 我们定义 \(f_{E_1, E_2, \dots, E_K}(N)\) 表示给定 \(N\) 和 \(K\) 个球的情况下有多少个点没有被命中， 那么命中的点即为 \(N - f_{E_1, E_2, \dots, E_K}(N)\)。</p> <p>首先我们考虑 \(f_{E_1, E_2, \dots, E_K}(N)\) 是否存在某种递推关系。 事实上，由容斥原理我们有以下的递推关系：</p> \[f_{E_1, E_2, \dots, E_K}(N) = f_{E_2, E_3, \dots, E_K}(N) - f_{E_2, E_3, \dots, E_K}(\lfloor \frac{N}{E_1} \rfloor)\] <p>为了理解上面的递推公式， 我们可以考虑对于给定 \(N\) 和 \(E_2, E_3, \dots, E_K\) 的情况下增加 \(E_1\) 会有多少个新的点被覆盖。</p> <p>我们知道如果增加 \(E_1\)， 那么 \(1 \times E_1, 2 \times E_1, \dots, \lfloor \frac{N}{E_1} \rfloor \times E_1\) 这些点会被覆盖， 那么这些点里面哪些点是新增的呢？由于 \(E_1\) 与其他的 \(E_i\) 互质， 在 \(1, 2, \dots, \lfloor \frac{N}{E_1} \rfloor\) 这些数中如果某个数与所有的 \(E_i\) 互质，那么这个数一定是新增的点， 这一部分刚好对应 \(f_{E_2, E_3, \dots, E_K}(\lfloor \frac{N}{E_1} \rfloor)\)。 这也是为什么我们会有以上的递推式。</p> <p>我们对上面的递推式起个别名：</p> \[dp[i][j] = f_{E_i, E_{i+1}, \dots, E_K}(j)\] <p>那么就有如下的动态转移方程：</p> \[dp[i][j] = dp[i + 1][j] - dp[i + 1][\lfloor \frac{j}{E_i} \rfloor]\] <p>接下来我们来考虑上面式子的复杂度。你可能会说这不是显然的 \(O(NK)\) 吗？是的如果使用递推来做的话， 复杂度确实是 \(O(NK)\)。但是实际上并不是所有的状态都是有用的状态， 因此如果我们使用递归来实现，我们的时间复杂度实际上为有用的状态个数。</p> <p>如何估计有用状态的个数？首先上面式子 \(i\) 的取值数一定是 \(K\) 种， 接下来我们考虑 \(j\) 取值种数。 不难发现对于任何一个可能的 \(j\) 其一定可以写成 \(\lfloor \frac{N}{a} \rfloor\) 的形式， 其中 \(a\) 是某个正整数。也就是说要估计 \(j\) 的种类数， 我们只需要考虑 \(\lfloor \frac{N}{a} \rfloor\) 的种类数， 而 \(\lfloor \frac{N}{a} \rfloor\) 的种类数不会超过 \(min(a 的种类数, \lfloor \frac{N}{2} \rfloor + 2)\)， 这里第二部分是因为当 \(a = \lfloor \frac{N}{2} \rfloor, N \gt 3\) 时，\(\lfloor \frac{N}{a} \rfloor\) 为 \(2\)， 就算对于 \(a \in [1, \lfloor \frac{N}{2} \rfloor]\)，\(\lfloor \frac{N}{a} \rfloor\) 均获得了不同的值， 此时继续增加 \(a\) 也只能获得 \(1, 0\) 两种结果。</p> <p>考虑到显然有下式成立：</p> \[min(a, \lfloor \frac{N}{a} \rfloor) \le \sqrt{N}\] <p>故 \(j\) 的种类数不会超过 \(2 \sqrt{N}\)，因此有用状态的个数不会超过 \(2K \sqrt{N}\)。 这对应的时间复杂度为 \(O(K \sqrt{N})\)。但实际上如果我们对 \(E\) 按照从大到小的顺序排序， 那么 \(N\) 会下降的非常快，这样我们实际上的复杂度会远远小于 \(O(K \sqrt{N})\)。</p> <p>我们当然不能对所有可能的状态都进行记忆化，这样会导致我们不得不使用字典， 这往往会让我们的时间复杂度变为 \(O(K \sqrt{N} log(K \sqrt{N}))\)，且常数非常大。 正确的做法是我们只在 \(N\) 较小时进行记忆化的操作。 这是因为对于递归而言，我们越小的部分被重复计算的次数相较较大的部分会更多。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/balls.cpp">balls.cpp</a></p> <h1 id="corporation"><a href="https://csacademy.com/ieeextreme-practice/task/corporation">Corporation</a></h1> <p>首先感谢 <a href="https://codeforces.com/profile/yanire">yanire</a> 提供的思路。</p> <p>我们可以使用分块来解决这个问题，具体的我们将整个工资序列分成大小为 \(\sqrt{N}\) 的块， 最后一块的大小可能小于 \(\sqrt{N}\)。每块维护以下信息：</p> <ul> <li><code class="language-plaintext highlighter-rouge">sum_salary</code>：块内所有工资的和。</li> <li><code class="language-plaintext highlighter-rouge">sum_happiness</code>：块内幸福值的和。</li> <li><code class="language-plaintext highlighter-rouge">lazy_salary</code>：块内每个员工的工资增量。</li> <li><code class="language-plaintext highlighter-rouge">lazy_happiness</code>：块内每个员工的幸福值增量。</li> <li><code class="language-plaintext highlighter-rouge">all_same</code>：块内每个员工的工资值是否相同。</li> </ul> <p>对于增加操作：</p> <ul> <li>如果覆盖整个块，那么可以在 \(O(1)\) 的时间内完成更新，最多重复 \(O(\sqrt{N})\) 次， 时间复杂度为 \(O(\sqrt{N})\)。</li> <li>如果覆盖部分块，那么需要遍历当前被覆盖的块，然后重新计算块内的信息， 最多会出现两次 (两个边界块) 这种情况，时间复杂度为 \(O(\sqrt{N})\)。</li> </ul> <p>对于设置操作：</p> <ul> <li>如果覆盖整个块且整个块的每个员工工资值相同，那么可以在 \(O(1)\) 的时间内完成更新， 最多出现 \(O(\sqrt{N})\) 次，时间复杂度为 \(O(\sqrt{N})\)。</li> <li>如果覆盖整个块但整个块的每个员工工资值不同，那么需要遍历整个块，然后重新计算块内的信息， 时间复杂度为 \(O(\sqrt{N})\)。对于这种情况下， 我们考虑一开始最多有 \(O(\sqrt{N})\) 个 <code class="language-plaintext highlighter-rouge">all_same</code> 为 <code class="language-plaintext highlighter-rouge">false</code> 的块， 我们每次通过设置操作遍历一整个块的时候，<code class="language-plaintext highlighter-rouge">all_same</code> 为 <code class="language-plaintext highlighter-rouge">false</code> 的块的数量会减少一， 而每次增加操作最多可能会让 <code class="language-plaintext highlighter-rouge">all_same</code> 为 <code class="language-plaintext highlighter-rouge">false</code> 的块数量增加二， 这意味着 \(Q\) 次操作中最多会执行 \(O(\sqrt{N} + Q)\) 次遍历整个块的操作， 均摊下来每次操作只会执行 \(O(1)\) 次。</li> <li>如果覆盖部分块，那么需要遍历当前被覆盖的块，然后重新计算块内的信息， 最多会出现两次 (两个边界块) 这种情况，时间复杂度为 \(O(\sqrt{N})\)。</li> </ul> <p>对于查询操作：</p> <ul> <li>如果覆盖整个块，那么可以在 \(O(1)\) 的时间内完成查询，最多重复 \(O(\sqrt{N})\) 次， 时间复杂度为 \(O(\sqrt{N})\)。</li> <li>如果覆盖部分块，那么需要遍历当前被覆盖的块， 最多会出现两次 (两个边界块) 这种情况，时间复杂度为 \(O(\sqrt{N})\)。</li> </ul> <p>综上我们可以发现上述方法的时间复杂度为 \(O(\sqrt{N}N+\sqrt{N}Q)\)。</p> <p>最后需要使用快速读写减少常数的影响。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/corporation.cpp">corporation.cpp</a></p> <h1 id="this-is-not-an-optimization-problem"><a href="https://csacademy.com/ieeextreme-practice/task/this-is-not-an-optimization-problem">This is not an optimization problem</a></h1> <p>首先感谢 <a href="https://codeforces.com/profile/cancaneed">cancaneed</a> 提供的思路。</p> <p>首先我们考虑计算大小为 \(k\) 时的结果。 此时我们依次考虑每个结点 \(u, 1 \le u \le N\) 的权重对答案的贡献。 对于结点 \(u\) 而言， 其贡献次数显然为从 \(N\) 个结点中选择 \(k\) 个结点的方案数减去没有选中 \(u\) 的方案数。</p> <p>对于从 \(N\) 个结点中选择出 \(k\) 个结点的方案数，我们可以使用组合数的方法计算， 即为 \({N \choose k}\)。</p> <p>接下来我们考虑什么情况下不会选择 \(u\)。 如果选择了 \(k\) 个结点并通过增加一些其他结点构成一棵树且没有选择 \(u\) 那么所有选择的结点一定在 \(u\) 的同一个相邻分支中。 这是显然的，如果存在两个结点在 \(u\) 的不同分支中， 那么这两个结点之间一定有一条路径需要经过 \(u\) 结点。 那么这一部分的方案数即为 \(\sum_{v \in adj(u)} {sz[v] \choose k}\)。 其中 \(sz[v]\) 表示删除 \(u\) 结点后，以 \(v\) 为根的子树的结点个数。</p> <p>结合上面两部分那么大小为 \(k\) 的答案即为：</p> \[\sum_u w[u]{N \choose k} - \sum_u \sum_{v \in adj(u)} w[u]{sz[v] \choose k}\] <p>接下来我们考虑将所有的相同组合数进行合并，设最后的系数为 \(b[i]\)，那么我们有：</p> \[\sum_{i = 0}^{N} b[i] {i \choose k} = \sum_{i = 0}^{N} \frac{i!b[i]}{k!(i-k)!} = \frac{1}{k!} \sum_{i = 0}^{N} \frac{i!b[i]}{(i-k)!}\] <p>首先我们考虑如何计算系数 \(b[i]\)。我们只需要考虑每个结点 \(u\) 对其邻居的影响即可。具体的， 我们在 <code class="language-plaintext highlighter-rouge">DFS</code> 的过程中，设当前到达的结点为 \(u\)，\(u\) 的父结点为 \(par\) 子结点为 \(v\)， 那么 \(u\) 可以作为一整棵子树与 \(par\) 相连， 也就是我们在计算 \(par\) 贡献的时候可以在以 \(u\) 为根的子树中选择 \(k\) 个结点， 此时 \(b[sz[u]]\) 会减少 \(w[par]\) (系数为负)；同时，我们在计算 \(v\) 贡献的时候， 可以在除去以 \(v\) 为根的子树后的其他结点中选择 \(k\) 个结点， 此时对应 \(b[n - sz[v]]\) 减少 \(w[v]\)。 最后不要忘记 \(b[n]\) 还需要增加 \(w[u]\) (对应 \(\sum_u {N \choose k}\))。</p> <p>接下来我们考虑如何计算 \(\frac{1}{k!} \sum_{i = 0}^{N} \frac{i!b[i]}{(i-k)!}\)， 这里我们考虑计算 \(\sum_{i = 0}^{N} \frac{i!b[i]}{(i-k)!}\)， 最后的 \(\frac{1}{k!}\) 只需要在最后乘上乘法逆元即可。</p> <p>我们构造两个 \(N\) 次多项式：</p> \[\begin{aligned} P_1(x) &amp;= n!b[n] + (n - 1)!b[n-1]x + (n - 2)!b[n-2]x^2 + \dots + 0!b[0]x^n \\ P_2(x) &amp;= \frac{1}{0!} + \frac{1}{1!}x + \frac{1}{2!}x^2 + \dots + \frac{1}{n!}x^n \end{aligned}\] <p>我们考虑求 \(P_1(x)P_2(X)\) 的 \(x^{n-k}\) 的系数：</p> \[Coef(x^{n-k}, P_1(x)P_2(x)) = \frac{n!b[n]}{(n-k)!} + \frac{(n-1)!b[n-1]}{(n-k-1)!} + \dots + \frac{(n-k)!b[n-k]}{(0)!} = \sum_{i = 0}^{n} \frac{i!b[i]}{(i-k)!}\] <p>这意味着我们只需要计算 \(P_1(x)P_2(x)\) 的 \(x^{n-k}\) 的系数再乘上 \({1 \over k!}\) 即为答案， 此过程通过任意模数的 <code class="language-plaintext highlighter-rouge">NTT</code> 算法即可完成。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/this_is_not_an_optimization_problem.cpp">this_is_not_an_optimization_problem.cpp</a></p> <h1 id="digits-swap"><a href="https://csacademy.com/ieeextreme-practice/task/digits-swap">Digits swap</a></h1> <p>直接暴力搜索即可，搜索的时候注意只有当当前这一位与其最大可能性不同时才进行搜索。 理论时间复杂度为 \(O(N^K)\)，但实际上跑得飞快。</p> <p>给出几种常见贪心的反例：</p> <ul> <li>每次选靠前最大的和当前位置交换：例如 \(12344\ 2\)，如果按照这种方法会得到 \(44312\) ， 实际最优为 \(44321\)。</li> <li>每次选靠后最大的和当前位置交换：例如 \(21344\ 2\)，如果按照这种方法会得到 \(44312\) ， 实际最优为 \(44321\)。</li> <li>每次选靠后最大的和当前位置交换，交换完某种数字后进行一次从大到小的排序：例如 \(45366\ 3\)， 选择靠后最大交换两次后 \(66345\)，对 \(45\) 进行排序得到 \(66354\)， 再进行一次交换得到 \(66534\)，实际最优为 \(66543\)。</li> </ul> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/digits_swap.cpp">digits_swap.cpp</a></p> <h1 id="brick-stacks"><a href="https://csacademy.com/ieeextreme-practice/task/brick-stacks">Brick stacks</a></h1> <p>我们先从小到大排序，然后依次处理每一个元素，对于当前元素，如果已经形成了 \(pile\) 堆， 我们只需要记录形成的堆的最下方的元素，不妨用 \(pile[i]\) 表示第 \(i\) 堆最下方的元素， 然后尝试将当前元素放到这些堆中， 实际上我们只需要检查当前元素是否可以放到最小的 \(pile[i]\) 所在的堆中， 这是因为：</p> <ul> <li>如果当前的元素不能放入最小的 \(pile[i]\) 所在的堆中，那么它一定不能放入其他堆中；</li> <li>如果设 \(pile_{min}\) 表示最小的 \(pile_[i]\)，\(pile_j\) 表示其他任意一个非最小的 \(pile[i]\)， 那么不会存在当前元素可以放入 \(pile_{min}\) 和 \(pile_j\)，但在当前元素放入 \(pile_{min}\) 后， 下一个元素不能放入 \(pile_j\)，且如果当前元素放入 \(pile_j\) 后， 下一个元素可以放入 \(pile_{min}\) 的情况。</li> </ul> <p>对于上述的第二点，可以有如下的证明：</p> <blockquote> <p>首先 \(pile_{min} + x \gt pile_j\)，否则可以将 \(pile_j\) 的最后一块放到 \(pile_{min}\) 后面。 其次如果 \(A_i + x \le A_{i+1}\)，那么下一个元素一定是能放在 \(A_i\) 所在堆的； 如果 \(A_i + x \gt A_{i+1}\)，而我们将上面第二点写成不等式与该不等式进行联立：</p> \[\begin{cases} pile_j &gt; pile_{min} \\ pile_{min} + x \gt pile_j \\ A_i + x \gt A_{i+1} \\ pile_{min} + x \le A_i \\ pile_{min} + x \le A_{i+1} \\ pile_j + x \gt A_{i+1} \\ pile_j + x \le A_i \\ A_{i+1} \gt A_{i} \\ \end{cases}\] <p>上面的最后三个存在矛盾，因此不可能有解。</p> </blockquote> <p>这就意味着，我们可以用一个小根堆维护形成的堆的最后一个元素，每次尝试将新的数放入到堆顶所形成的堆， 如果不能放置，则形成一个新的堆加入到堆中。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/brick_stacks.cpp">brick_stacks.cpp</a></p> <h1 id="stones"><a href="https://csacademy.com/ieeextreme-practice/task/stones">Stones</a></h1> <p>首先感谢 <a href="https://codeforces.com/profile/cancaneed">cancaneed</a> 提供的思路。</p> <p>我们记 \((R1, B1, R2, B2)\) 为藏球方红球有 \(R1\) 个，蓝球有 \(B1\) 个； 猜球方红球有 \(R2\) 个，蓝球有 \(B2\) 个的状态时猜球方的最优策略下的最大获胜概率。</p> <p>如果我们设 \(p\) 为藏红球的概率，\(q\) 为猜红球的概率， 同时我们设</p> \[rr := 1 - (R2, B2, R1-1, B1) \\ rb := 1 - (R2, B2-1, R1, B1) \\ br := 1 - (R2-1, B2, R1, B1) \\ bb := 1 - (R2, B2, R1, B1 - 1) \\\] <p>我们不难写出以下的转移方程：</p> \[(R1, B1, R2, B2) = p \cdot q \cdot rr \cdot + p \cdot (1-q) \cdot rb + (1-p) \cdot q \cdot br + (1-p) \cdot (1-q) \cdot bb\] <p>由于双方均追求最大化获胜结果，所以我们需要对上面的式子分别关于 \(p, q\) 求导并令其为 \(0\)：</p> \[\begin{cases} \frac{\partial (R1, B1, R2, B2)}{\partial p} = q \cdot rr + (1-q) \cdot rb - q \cdot br - (1-q) \cdot bb = 0 \\ \frac{\partial (R1, B1, R2, B2)}{\partial q} = p \cdot rr - p \cdot rb + (1-p) \cdot br - (1-p) \cdot bb = 0 \end{cases}\] <p>解上面的方程可以得到：</p> \[\begin{cases} p = \frac{bb - br}{rr - rb - br + br} \\ q = \frac{bb - rb}{rr - rb - br + bb} \\ \end{cases}\] <p>最后带入 \((R1, B1, R2, B2)\) 即可。</p> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/stones.cpp">stones.cpp</a></p> <h1 id="rectangles-and-arrays"><a href="https://csacademy.com/ieeextreme-practice/task/rectangles-and-arrays-ieeextreme-18">Rectangles and arrays</a></h1> <p>我们首先考虑不进行修改的情况，那么我们可以使用单调栈来解决这个问题，具体的，我们需要计算出：</p> <ul> <li>\(l1[i]\)：表示第 \(i\) 个元素左侧第一个比它小的元素的位置，如果不存在则设置为最小下标减一。</li> <li>\(r1[i]\)：表示第 \(i\) 个元素右侧第一个比它小的元素的位置，如果不存在则设置为最大下标加一。</li> </ul> <p>那么统计不进行修改的部分就是 \(\max\limits_{1 \le i \le N}(r1[i] - l1[i] - 1)A_i\)， 这里公式表示以 \(A_i\) 为最小值所能形成的最大的正方形。</p> <p>接下来我们考虑需要修改的情况，首先如果要修改某个元素， 我们直接将其修改为 \(X\) 一定会比修改成一个比 \(X\) 小的数更优。 这意味着对于 \(A_i \ge X\) 的元素，我们没有必要修改， 所有后面的修改将会针对满足 \(A_i \lt X\) 的元素。</p> <p>接下来我们考虑如果将 \(A_i\) 修改成 \(X\)，会对哪些部分产生影响。 显然对于 \(l1[j] = i, j \gt i\) 和 \(r1[j] = i, j \lt i\) 的位置 \(j\)， 其 \(l1[j], r1[j]\) 可能会发生变化。 对于 \(i\) 位置，其 \(l1[i], r1[i]\) 也可能会发生变化。</p> <p>因此， 我们只需要计算出修改 \(A_i\) 为 \(X\) 后的新的 \(l1_i, r1_i\) 即可按照之前的公式进行更新。</p> <p>实际上对于非 \(i\) 位置的变化，显然 \(l1, r1\) 会变成左右两侧第二个比它小的元素的位置。 为了避免混淆，我们增加以下定义：</p> <ul> <li>\(l2_i\)：表示第 \(i\) 个元素左侧第二个比它小的元素的位置，如果不存在则设置为最小下标减一。</li> <li>\(r2_i\)：表示第 \(i\) 个元素右侧第二个比它小的元素的位置，如果不存在则设置为最大下标加一。</li> <li>\(l3_i\): 表示将第 \(i\) 个元素修改为 \(X\) 后左侧第一个比它小的元素的位置，如果不存在则设置为最小下标减一。</li> <li>\(r3_i\): 表示将第 \(i\) 个元素修改为 \(X\) 后右侧第一个比它小的元素的位置，如果不存在则设置为最大下标加一。</li> </ul> <p>而修改 \(i\) 位置对 \(j\) 造成影响实际上就是在修改 \(j\) 位置左侧或者右侧第一个比它小的元素。</p> <p>因此这一部分的贡献就是 \(\max\limits_{1 \le i \le N}\{(r2[i] - l1[i] - 1)A_i, (r1[i] - l2[i] - 1)A_i, (r3[i] - l3[i] - 1)X\}\)。</p> <p>上面使用 \(r2[i] - l1[i] - 1\) 和 \(r1[i] - l2[i] - 1\) 而不直接使用 \(r2[i] - l2[i] - 1\) 是因为我们只能修改一个元素， 而不能同时将左右两个第一个比当前小的元素修改为 \(X\)。</p> <p>下面我们来介绍如何计算 \(l2, r2, l3, r3\)。</p> <p>这里以计算 \(l2\) 为例介绍如何计算 \(l2, r2\)。计算这一部分，我们需要用到三个栈， 第一个栈与在计算 \(l1\) 时作用一样，而第二个栈用于保存从第一个栈中弹出的元素，由于栈是先进后出的， 第三个栈用于将从第一个栈中弹出的元素逆序放入到第二个栈中。 当然也可以将第二个栈换成队列，每次从队首取元素即可。这样操作后当从第二个栈弹出元素的时候， 也就找到了左侧第二个比栈顶元素小的元素。代码如下：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s2</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">s2</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">l2</span><span class="p">[</span><span class="n">s2</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="n">s2</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s1</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">s1</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">s3</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s1</span><span class="p">.</span><span class="n">top</span><span class="p">());</span>
        <span class="n">s1</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="n">s1</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s3</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">s2</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s3</span><span class="p">.</span><span class="n">top</span><span class="p">());</span>
        <span class="n">s3</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s1</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">l2</span><span class="p">[</span><span class="n">s1</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">s1</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s2</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">l2</span><span class="p">[</span><span class="n">s2</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">s2</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div> <p>计算完成后不要忘记排除 \(X &lt; A_i\) 的情况：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">l2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">l1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>这里以计算 \(l3\) 为例介绍如何计算 \(l3, r3\)。计算 \(l3\) 与计算 \(l1\) 类似。 只是我们需要比较的值从 \(A_i\) 变成了 \(X\)， 但是这样会导致后续计算的时候有一些元素被提前弹出了栈， 实际上，我们可以先将弹出的元素放到一个队列里面，等到计算完 \(l3[i]\) 后再将这些元素放回栈中。 代码如下：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">now_pop</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">now_pop</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">());</span>
        <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="n">l3</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">());</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">now_pop</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">now_pop</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>
        <span class="n">now_pop</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span> <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="p">}</span>
    <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/rectangles_and_arrays.cpp">rectangles_and_arrays.cpp</a></p> <h1 id="invertible-pairs"><a href="https://csacademy.com/ieeextreme-practice/task/invertible-pairs">Invertible Pairs</a></h1> <p>我们可以使用动态规划解决这一题，具体的我们用 \(dp[i][0]\) 表示前 \(i\) 个数， 以 \(i\) 结尾且第 \(i\) 个数不发生翻转的最大和，用 \(dp[i][1]\) 表示前 \(i\) 个数， 以 \(i\) 结尾且第 \(i\) 个数发生翻转的最大和。我们可以写出以下的转移方程：</p> \[\begin{aligned} dp[i][0] &amp;= \begin{cases} max(a[i], dp[i - 1][0] + a[i])，i \equiv 0 \pmod{2} \\ max(a[i], dp[i - 1][0] + a[i], dp[i - 1][1] + a[i])，i \equiv 1 \pmod{2} \\ \end{cases} \\ dp[i][1] &amp;= \begin{cases} max(-a[i], dp[i - 1][1] - a[i])，i \equiv 0 \pmod{2} \\ max(-a[i], dp[i - 1][0] - a[i], dp[i - 1][1] - a[i])，i \equiv 1 \pmod{2} \end{cases} \end{aligned}\] <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/invertible_pairs.cpp">invertible_pairs.cpp</a></p> <h1 id="sierpinski"><a href="https://csacademy.com/ieeextreme18/task/sierpinski">Sierpinski</a></h1> <p>我们可以直接使用递归的方法来解决，我们首先需要确定当前行号，需要经过多少次构建才能构建出来， 不妨设为 \(cnt\)，这样的操作是 \(O(logx)\) 的，因为每次构建行数为上一次的两倍加一。</p> <p>同时我们也可以获取到 \(cnt - 1\) 次构造后会有多少行，不妨设为 \(last\_end\)， 那么第 \(x\) 行的 \([x - las\_end，las\_end + 1]\) 列一定全是蓝色， 因为这一部分对应的是中间的大蓝三角形。因此我们有以下递归操作：</p> <ul> <li>如果 \(y \in [x - las\_end, las\_end + 1]\)，我们直接返回蓝色；</li> <li>如果 \(y \lt x - las\_end\)，不难发现当前颜色与 \((x - las\_end - 1, y)\) 相同，此时递归调用；</li> <li>如果 \(y \gt las\_end + 1\)，不难发现当前颜色与 \((x - las\_end - 1, y - las\_end - 1)\) 相同， 此时递归调用。</li> </ul> <p>代码：<a href="https://github.com/Kaiser-Yang/OJProblems/blob/main/IEEExtreme/18/sierpinski.cpp">sierpinski</a></p>]]></content><author><name></name></author><category term="Algorithm"/><category term="Algorithm"/><category term="IEEExtreme"/><summary type="html"><![CDATA[Two Fridges]]></summary></entry></feed>